package BOM::Platform::Copiers;

use strict;
use warnings;

use base 'BOM::Database::AutoGenerated::Rose::Copiers';

sub rnew { return shift->SUPER::new(@_) }

sub new {
    my $class = shift;
    my $args = shift || die 'BOM::Platform::Copiers->new called without args';

    my $operation = delete $args->{db_operation};

    my $self = $class->SUPER::new(%$args);

    $self->set_db($operation) if $operation;

    $self->load(speculative => 1) || return;    # must exist in db
    return $self;
}

sub update_or_create {
    my $class = shift;
    my $args  = shift;

    my $self = $class->rnew(
        trader_id => $args->{trader_id},
        copier_id => $args->{copier_id},
        broker    => $args->{broker},
    );

    my @copy_param_keys = qw/min_trade_stake max_trade_stake assets trade_types/;
    my %copy_params;
    @copy_params{@copy_param_keys} = @{$args}{@copy_param_keys};

    unless ($self->load(speculative => 1)) {
        $self = $class->rnew(
            trader_id => $args->{trader_id},
            copier_id => $args->{copier_id},
            broker    => $args->{broker},
            %copy_params,
        );
    }
    else {
        for my $key (@copy_param_keys) {
            $self->$key($copy_params{$key}) if $copy_params{$key};
        }
    }
    $self->save;

    return $self;
}

sub save {
    my $self = shift;

    $self->set_db('write');
    return $self->SUPER::save;    # Rose
}

1;
