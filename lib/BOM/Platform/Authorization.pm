package BOM::Platform::Authorization;

use strict;
use warnings;

=head1 NAME

BOM::Platform::Authorization - Provides functions to work with authorization database

=head1 SINOPSYS

    use BOM::Platform::Authorization;
    my $res = BOM::Platform::Authorization->validate_token(
        token     => $token,
        client_id => $client_id,
        scope     => 'chart',
    );
    if ($res->{validated}) {
        my $loginid = $res->{login_id};
        # do stuff
    } else {
        # reject
    }

=head1 DESCRIPTION

Module provides functions to access authorization database.

=head1 METHODS

=cut

use MIME::Base64 qw(encode_base64url);
use JSON qw(from_json to_json);
use Carp;

use BOM::Platform::Authorization::Token;
use BOM::Utility::Random;
use BOM::Database::AuthDB;
use BOM::Database::AutoGenerated::Rose::Auth::User;

# characters allowed in authentication code
my $AUTH_CODE_BAG = join '', 'A' .. 'Z', '0' .. '9';

# time to live for authentication code
my $AUTH_CODE_TTL = 3600;

# master list of valid scopes
my @SCOPES = qw/chart price trade password cashier/;
my %SCOPES = map { $_ => 1 } @SCOPES;

sub _write_db {
    return BOM::Database::AuthDB::rose_db;
}

=head2 $class->issue_token(%args)

Issues access token. Requires following arguments: client_id, login_id,
expiration_time, scopes.  Returns token.

=cut

sub _issue_token {
    my ($class, %args) = @_;
    my @scopes = grep { $SCOPES{$_} } @{$args{scopes}};
    ($args{client_id} ||= $args{client}) if $args{client};
    my $token = BOM::Platform::Authorization::Token->new(%args)->save;
    return unless $token;
    return $token->token;
}

sub issue_token {
    my ($class, %args) = @_;
    return $class->_issue_token(%args);
}

=head2 $class->validate_token(%args)

Check if token is valid for the given scope. Requires following arguments:
token, client_id, scope. Returns hash reference. If token has been validated,
I<validated> element will be set to true, and I<login_id> hash will contain
login ID of the user for whom the token was issued. If validation has failed
the I<validated> will be false, and the I<reason> element will contain the
reason.

=cut

sub validate_token {
    my ($class, %args) = @_;
    my $grant = BOM::Platform::Authorization::Token->validate(%args);
    $grant->{validated} = $grant->{token} if $grant;
    return $grant || {reason => BOM::Platform::Authorization::Token->last_err};
}

=head2 $class->revoke_token(token => $token)

Revoke token

=cut

sub revoke_token {
    my ($class, %args) = @_;

    my $grant = BOM::Database::AutoGenerated::Rose::Auth::Grant->new(
        token => $args{token},
        db    => $class->_write_db,
    );
    if ($grant->load(speculative => 1)) {
        $grant->token(undef);
        $grant->save;
    }
    return;
}

=head2 $class->retrieve_token(%args)

Return token matching authorization code and mark code as used. Requires two
arguments: auth_code and client_id. Returns token in case of success or false
otherwise.

=cut

sub retrieve_token {
    my ($class, %args) = @_;

    my $db        = $class->_write_db;
    my $auth_code = BOM::Database::AutoGenerated::Rose::Auth::AuthCode->new(
        auth_code => $args{auth_code},
        db        => $db,
    );
    my ($loaded, $used);

    # get old value of used and set it to true in an atomic way
    $db->do_transaction(
        sub {
            if (
                $auth_code->load(
                    speculative => 1,
                    with        => ['grant'],
                    lock        => 'for update',
                ))
            {
                $loaded = 1;
                # mark auth code as used
                $used = $auth_code->used;
                $auth_code->used(1);
                $auth_code->save;
            }
        },
    );

    if ($loaded) {
        if ($auth_code->expires->epoch > time) {
            my $grant = $auth_code->grant;
            if ($used) {
                # authorization code already was used
                # revoke the token
                $grant->token(undef);
                $grant->save;
            } else {
                if ($grant->client_id == $args{client_id}) {
                    return $grant->token;
                }
            }
        }
    }

    return;
}

1;
