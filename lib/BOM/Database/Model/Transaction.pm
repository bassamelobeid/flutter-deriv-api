package BOM::Database::Model::Transaction;

use Moose;
use BOM::Database::AutoGenerated::Rose::Transaction;
extends 'BOM::Database::Model::Base';

has 'transaction_record' => (
    is      => 'rw',
    isa     => 'BOM::Database::AutoGenerated::Rose::Transaction',
    lazy    => 1,
    builder => '_build_transaction_record',
    handles => [BOM::Database::AutoGenerated::Rose::Transaction->meta->column_names],
);

sub _build_transaction_record {
    my $self = shift;
    return $self->_initialize_data_access_object('BOM::Database::AutoGenerated::Rose::Transaction',
        $self->_extract_related_attributes_for_transaction_class_hashref());
}

sub _extract_related_attributes_for_transaction_class_hashref {
    my $self = shift;

    my $result = $self->_extract_related_attributes_for_class_based_on_table_definition_hashref('BOM::Database::AutoGenerated::Rose::Transaction');
    if (defined $self->data_object_params and exists $self->data_object_params->{'transaction_id'}) {
        $result->{'id'} = $self->data_object_params->{'transaction_id'};
    }

    return $result;
}

sub save {
    my $self = shift;

    return $self->_save_orm_object({'record' => $self->transaction_record});
}

#sub delete
#{
#    my $self = shift;
#    my $args = shift;
#
#    $self->_delete_orm_object({'record' => $self->transaction_record});
#}

sub load {
    my $self = shift;
    my $args = shift;

    return $self->_load_orm_object({
            'record'      => $self->transaction_record,
            'load_params' => $args->{'load_params'}});
}

sub class_orm_record {
    my $self = shift;

    return $self->transaction_record;
}

no Moose;
__PACKAGE__->meta->make_immutable;

1;

=pod

=head1 NAME

BOM::Database::Model::Transaction

=head1 DESCRIPTION

=over 4

=item B<load>

  refer to parent

=item B<save>

  refer to parent

=item B<class_orm_record>

  refer to parent

=back

=head1 VERSION

0.1

=head1 AUTHOR

RMG Company

=cut

