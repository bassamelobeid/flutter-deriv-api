package BOM::Database::Model::DataCollection::QuantsBetVariables;

use Moose;
use BOM::Database::AutoGenerated::Rose::QuantsBetVariable;

extends 'BOM::Database::Model::Base';

has 'quants_bet_variables_record' => (
    is      => 'rw',
    isa     => 'Maybe[BOM::Database::AutoGenerated::Rose::QuantsBetVariable]',
    lazy    => 1,
    builder => '_build_quants_bet_variables_record',
    handles => [BOM::Database::AutoGenerated::Rose::QuantsBetVariable->meta->column_names],
);

sub _build_quants_bet_variables_record {
    my $self = shift;

    return $self->_initialize_data_access_object('BOM::Database::AutoGenerated::Rose::QuantsBetVariable',
        $self->_extract_related_attributes_for_quants_bet_variables_class_hashref());
}

sub _extract_related_attributes_for_quants_bet_variables_class_hashref {
    my $self = shift;

    my $result =
        $self->_extract_related_attributes_for_class_based_on_table_definition_hashref('BOM::Database::AutoGenerated::Rose::QuantsBetVariable');

    return $result;
}

sub save {
    my $self = shift;
    my $args = shift;

    $self->_save_orm_object({'record' => $self->quants_bet_variables_record});

    return;
}

# We need to ignore (ProhibitBuiltinHomonyms) for this specific method which
# basically overrides delete method of Rose::DB::Object and we can't help to
# just ignore perl ciritic for this line
#sub delete    ## no critic (ProhibitBuiltinHomonyms)
#{
#    my $self = shift;
#    my $args = shift;
#
#    $self->_delete_orm_object({'record' => $self->quants_bet_variables_record});
#
#    return;
#}

sub load {
    my $self = shift;
    my $args = shift;

    $self->_load_orm_object({
            'record'      => $self->quants_bet_variables_record,
            'load_params' => $args->{'load_params'}});

    return;
}

sub class_orm_record {
    my $self = shift;

    return $self->quants_bet_variables_record;
}

sub extract_parameters_from_line {
    my $self = shift;
    my $args = shift;
    my $line = $args->{'line'};

    my $result;
    #COMMENT:theo=1 trade=1 recalc=1 win=2 (0.5,buy) delta=0.002 vega=0 theta=0 gamma=0 intradaytime=0.856150104239055
    if ($line =~ /COMMENT.*[^A-Za-z]theo(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'theo'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]trade(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'trade'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]recalc(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'recalc'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]win(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'win'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]delta(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'delta'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]vega(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'vega'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]theta(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'theta'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]gamma(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'gamma'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]intradaytime(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'intradaytime'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]iv(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'iv'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z](?:spot| s)(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'spot'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]div(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'div'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]int(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'int'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]base_spread(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'base_spread'} = $1;
    }

    if ($line =~ /COMMENT.*[^A-Za-z]news_fct(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'news_fct'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]mrev_fct(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'mrev_fct'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]mrv_ind(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'mrv_ind'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]fwdst_fct(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'fwdst_fct'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]atmf_fct(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'atmf_fct'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]dscrt_fct(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'dscrt_fct'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]emp(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'emp'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]entry_spot(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'entry_spot'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]entry_spot_epoch(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'entry_spot_epoch'} = int($1);
    }
    if ($line =~ /COMMENT.*[^A-Za-z]exit_spot(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'exit_spot'} = $1;
    }
    if ($line =~ /COMMENT.*[^A-Za-z]exit_spot_epoch(?:=|\[)([^\s\]=]+)(?:\])?(\s|$)/i) {
        $result->{'exit_spot_epoch'} = int($1);
    }
    return $result;
}

no Moose;
__PACKAGE__->meta->make_immutable;

1;

=pod

=head1 NAME

BOM::Database::Model::DataCollection::QuantsBetVariables

=head1 DESCRIPTION

For every bet all extra variables that are there only for inspections by poeple or repricing bet before we move all the pricing info into DB will be placed here.

Numbers like Underlying Market Price (current_spot) , gamma, theo, ....

=over 4

=item B<load>

  refer to parent

=item B<save>

  refer to parent

=item B<class_orm_record>

  refer to parent

=item B<extract_parameters_from_line>

 refer to parent

=back

=head1 VERSION

0.1

=head1 AUTHOR

RMG Company

=cut

