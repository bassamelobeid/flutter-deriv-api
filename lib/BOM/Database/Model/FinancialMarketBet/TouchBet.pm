package BOM::Database::Model::FinancialMarketBet::TouchBet;

use Moose;
use BOM::Database::AutoGenerated::Rose::TouchBet;
extends 'BOM::Database::Model::FinancialMarketBetOpen';

has 'touch_bet_record' => (
    is      => 'rw',
    isa     => 'BOM::Database::AutoGenerated::Rose::TouchBet',
    lazy    => 1,
    builder => '_build_touch_bet_record',
    handles => [BOM::Database::AutoGenerated::Rose::TouchBet->meta->column_names],
);

sub _build_touch_bet_record {
    my $self = shift;
    if ($self->financial_market_bet_open_record->can('touch_bet') and $self->financial_market_bet_open_record->touch_bet) {
        return $self->financial_market_bet_open_record->touch_bet;
    } else {
        return $self->_initialize_data_access_object('BOM::Database::AutoGenerated::Rose::TouchBet',
            $self->_extract_related_attributes_for_touch_bet_class_hashref());
    }
}

around BUILDARGS => sub {
    my $orig  = shift;
    my $class = shift;

    # http://search.cpan.org/~doy/Moose-1.08/lib/Moose/Cookbook/Basics/Recipe10.pod
    # Because parent does not need to know about children, we will set two parameters by default here.
    if (@_ == 1 && ref $_[0]) {
        my $params = $_[0];
        if (exists $params->{'data_object_params'}) {
            if (exists $params->{'data_object_params'}->{'bet_class'}
                and $params->{'data_object_params'}->{'bet_class'} ne $BOM::Database::Model::Constants::BET_CLASS_TOUCH_BET)
            {
                Carp::croak "Error::WRONG_BET_CLASS [$0] bet_class for this class is wrong. However it can be set by default if it is not passed";
            }

            $params->{'data_object_params'}->{'bet_class'} = $BOM::Database::Model::Constants::BET_CLASS_TOUCH_BET;

        }

        return $class->$orig(@_);
    } else {
        return $class->$orig;
    }
};

sub _extract_related_attributes_for_touch_bet_class_hashref {
    my $self = shift;

    my $result = $self->_extract_related_attributes_for_class_based_on_table_definition_hashref('BOM::Database::AutoGenerated::Rose::TouchBet');

    return $result;
}

sub save {
    my $self = shift;
    my $args = shift;

    $self->SUPER::save($args);
    $self->touch_bet_record->financial_market_bet_id($self->financial_market_bet_open_record->id);
    return $self->_save_orm_object({'record' => $self->touch_bet_record});
}

sub load {
    my $self = shift;
    my $args = shift;

    $self->SUPER::load($args);
    return $self->_load_orm_object({
            'record'      => $self->touch_bet_record,
            'load_params' => $args->{'load_params'}});
}

sub class_orm_record {
    my $self = shift;

    return $self->touch_bet_record;
}

no Moose;
__PACKAGE__->meta->make_immutable;

1;

=pod

=head1 NAME

BOM::Database::Model::FinancialMarketBet::TouchBet

=head1 SYNOPSIS

 my $touch_bet = BOM::Database::Model::FinancialMarketBet::TouchBet->new(
    {
        'data_object_params'=> {
            'account_id' => $account->account_record->id,

            'underlying_symbol' => 'frxUSDJPY',
            'payout_price' => 200,
            'buy_price' => 20,
            'sell_price' => 0,
            'remark' => 'Remarkets ..',
            'start_time' => DateTime::Format::HTTP->parse_datetime( '2010-12-02 12:00:00' ),
            'expiry_time' => DateTime::Format::HTTP->parse_datetime( '2010-12-02 14:00:00' ),
            'is_expired' => 1,
            'is_sold' => 1,
            'bet_class' => 'touch_bet,
            'bet_type' => 'ONETOUCH',

            'relative_barrier' => '1.1',
            'absolute_barrier' => '1673.828',
            'prediction' => 'touch',
        },

        db => $connection_builder->db
    },
 );

=head1 DESCRIPTION

This class will encapsualte common characteristics attributes.

=head1 VERSION

0.1

=head1 AUTHOR

RMG Company

=cut

