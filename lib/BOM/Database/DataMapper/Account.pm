package BOM::Database::DataMapper::Account;

=head1 NAME

BOM::Database::DataMapper::Account

=head1 DESCRIPTION

This is a class that will collect general account queries.

=head1 VERSION

0.1

=cut

use Moose;
use BOM::Database::AutoGenerated::Rose::Account::Manager;
use BOM::Database::Model::Account;
use Format::Util::Numbers qw/roundnear/;
use Date::Utility;
use Try::Tiny;
extends 'BOM::Database::DataMapper::AccountBase';

has '_mapper_model_class' => (
    is       => 'ro',
    isa      => 'Str',
    init_arg => undef,
    default  => 'BOM::Database::Model::Account',
);

=head1 METHODS

=over

=item get_balance

get balance of account

=cut

sub get_balance {
    my $self = shift;

    my $account_record = BOM::Database::AutoGenerated::Rose::Account::Manager->get_account(
        query => [
            client_loginid => $self->client_loginid,
            currency_code  => $self->currency_code
        ],
        db => $self->db,
    );

    return 0 unless @$account_record;
    return sprintf '%.2f', roundnear .01, $account_record->[0]->balance;
}

=item C<get_currency>

    return currency for client

=cut

sub get_currency {
    my $self = shift;

    my $sql = q{
        SELECT
            currency_code
        FROM
            transaction.account
        WHERE
            client_loginid = ?
            AND is_default = TRUE
    };

    my $dbh = $self->db->dbh;
    my $sth = $dbh->prepare($sql);
    $sth->execute($self->client_loginid);

    my @result = $sth->fetchrow_array;
    if (@result) {
        return $result[0];
    }
    return;
}

=item get_seconds_from_last_modified

    get last transaction date of account

=cut

sub get_seconds_from_last_modified {
    my $self = shift;

    my $dbh = $self->db->dbh;

    my $sql = q{
        SELECT
            EXTRACT ('epoch' from NOW()) - EXTRACT ('epoch' from last_modified) as last_transaction_time_gap
        FROM
            transaction.account
        WHERE
            client_loginid = ?
            AND currency_code = ?
    };

    my $sth = $dbh->prepare($sql);
    $sth->execute($self->client_loginid, $self->currency_code);

    my $result;
    if ($result = $sth->fetchrow_hashref) {
        return $result->{'last_transaction_time_gap'};
    }

    return;
}

sub last_modified {
    my $self = shift;

    my $dbh = $self->db->dbh;

    my $sql = q{
        SELECT
            max(EXTRACT ('epoch' from last_modified)::BIGINT) as last_modified
        FROM
            transaction.account
        WHERE
            client_loginid = ?
    };

    my $sth = $dbh->prepare($sql);
    $sth->execute($self->client_loginid);

    my $result;
    if ($result = $sth->fetchrow_hashref) {
        return $result->{'last_modified'};
    }

    return;
}

sub payment_agent_total_transaction_in_current_day {
    my $self = shift;

    # Total transaction for the day
    my $query = [
        payment_gateway_code => 'payment_agent_transfer',
        payment_time         => {gt => \'current_date'}];

    my $pa_total_amount = $self->find_payment(
        query  => $query,
        select => 'sum(abs(amount)) as amount'
    );
    $pa_total_amount = scalar @$pa_total_amount ? $pa_total_amount->[0]->amount || 0 : 0;
}

no Moose;
__PACKAGE__->meta->make_immutable;

=back

=head1 AUTHOR

RMG Company

=head1 COPYRIGHT

(c) 2010 RMG Technology (Malaysia) Sdn Bhd

=cut

1;
