package BOM::Database::Rose::DB::Relationships;

use strict;
use warnings;

use BOM::Database::AutoGenerated::Rose::Account;
use BOM::Database::AutoGenerated::Rose::Client;
use BOM::Database::AutoGenerated::Rose::FinancialMarketBet;
use BOM::Database::AutoGenerated::Rose::Payment;
use BOM::Database::AutoGenerated::Rose::Transaction;
use BOM::Database::AutoGenerated::Rose::QuantsBetVariable;

# Declare 'manual' relationships that are not auto-code-generated by Rose::DB::Object::Loader.
# This happens for cross-schema relationships e.g. transaction.account -> betonmarkets.client

# This sub handles all the noisy stuff we do to declare the most common relationship type (1-many)
sub one_to_many {
    my ($parentClass, $parentTable, $parentKey, $childClass, $childTable, $childKey) = @_;
    my $fullParentClass = "BOM::Database::AutoGenerated::Rose::$parentClass";
    my $fullChildClass  = "BOM::Database::AutoGenerated::Rose::$childClass";
    my $parentMeta      = $fullParentClass->meta;
    my $childMeta       = $fullChildClass->meta;
    $parentMeta->add_relationship(
        $childTable => {
            type       => 'one to many',
            class      => $fullChildClass,
            column_map => {$parentKey => $childKey},
        });
    $parentMeta->initialize(replace_existing => 1);
    $childMeta->add_foreign_keys(
        $parentTable => {
            class       => $fullParentClass,
            key_columns => {$childKey => $parentKey},
        });
    $childMeta->initialize(replace_existing => 1);
    return;
}

sub one_to_one {
    my ($otherClass, $otherTable, $otherKey, $thisClass, $thisTable, $thisKey) = @_;
    my $fullOtherClass = "BOM::Database::AutoGenerated::Rose::$otherClass";
    my $fullThisClass  = "BOM::Database::AutoGenerated::Rose::$thisClass";
    my $thisMeta       = $fullThisClass->meta;
    my $otherMeta      = $fullOtherClass->meta;
    $thisMeta->add_relationship(
        $otherTable => {
            type       => 'one to one',
            class      => $fullOtherClass,
            column_map => {$thisKey => $otherKey},
        });
    $thisMeta->initialize(replace_existing => 1);
    $otherMeta->add_relationship(
        $thisTable => {
            type       => 'one to one',
            class      => $fullThisClass,
            column_map => {$otherKey => $thisKey},
        });
    $otherMeta->initialize(replace_existing => 1);
    return;
}

#            Class                 Table                   Key    =>  Class                 Table                   Key
one_to_many('Payment',            'payment',              'id',      'Transaction',        'transaction',          'payment_id');
one_to_many('Client',             'client',               'loginid', 'Account',            'account',              'client_loginid');
one_to_many('Account',            'account',              'id',      'Payment',            'payment',              'account_id');
one_to_many('Account',            'account',              'id',      'FinancialMarketBet', 'financial_market_bet', 'account_id');
one_to_many('FinancialMarketBet', 'financial_market_bet', 'id',      'Transaction',        'transaction',          'financial_market_bet_id');
one_to_many('FinancialMarketBet', 'financial_market_bet', 'id',      'QuantsBetVariable',  'quants_bet_variables', 'financial_market_bet_id');

one_to_one('Transaction', 'transaction', 'id', 'QuantsBetVariable', 'quants_bet_variables', 'transaction_id');

################################
# table-specific fixes..

my $meta = BOM::Database::AutoGenerated::Rose::Account->meta;
$meta->default_insert_changes_only(1);
$meta->default_update_changes_only(1);
$meta->column('balance')->delete_default;

$meta = BOM::Database::AutoGenerated::Rose::Transaction->meta;
$meta->default_insert_changes_only(1);
$meta->default_update_changes_only(1);
$meta->column('balance_after')->delete_default;

$meta = BOM::Database::AutoGenerated::Rose::Client->meta;
$meta->default_insert_changes_only(1);
$meta->default_update_changes_only(1);
$meta->column('binary_user_id')->delete_default;

1;

