package BOM::Database::Rose::DB::StringifyRules;

use strict;
use warnings;

use JSON;
use Try::Tiny;

sub BOM::Database::AutoGenerated::Rose::Account::stringify {
    my $self = shift;
    return sprintf "%s: %s %.2f as at %s%s",
        $self->client_loginid,
        $self->currency_code,
        $self->balance,
        ($self->last_modified || '?'),
        ($self->is_default ? ' (default)' : '');
}

sub BOM::Database::AutoGenerated::Rose::Client::stringify {
    my $self     = shift;
    my $statuses = join '/', map { uc $_->status_code } $self->client_status;
    my $name     = $self->first_name;
    $name .= ' ' if $name;
    $name .= $self->last_name;
    return sprintf "%s %s%s", $self->loginid, ($name || '?'), ($statuses ? " [$statuses]" : '');
}

sub BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure::stringify {
    my $self = shift;
    return sprintf "%s token %s on %s. PayForExposure %s, TokenRegistered %s, SignupOverride %s",
        $self->client_loginid,
        $self->myaffiliates_token,
        $self->exposure_record_date,
        ($self->pay_for_exposure              ? 'Y' : 'N'),
        ($self->myaffiliates_token_registered ? 'Y' : 'N'),
        ($self->signup_override               ? 'Y' : 'N');
}

sub BOM::Database::AutoGenerated::Rose::ClientAuthenticationDocument::stringify {
    my $self = shift;
    return sprintf "%s authenticated by %s via %s(%s) on %s",
        $self->client_loginid, $self->authentication_method_code, $self->document_type, $self->document_format, ($self->expiration_date || '?');
}

sub BOM::Database::AutoGenerated::Rose::ClientAuthenticationMethod::stringify {
    my $self = shift;
    return sprintf "%s %s %s (%s) on %s",
        $self->client_loginid, ($self->authentication_method_code || '?'), ($self->status || '?'),
        ($self->description || '?'), ($self->last_modified_date || '?');
}

sub BOM::Database::AutoGenerated::Rose::ClientLock::stringify {
    my $self = shift;
    return sprintf "%s %s (%s) at %s", $self->client_loginid, ($self->locked ? 'LOCKED' : 'not locked'), ($self->description || ''), $self->time;
}

sub BOM::Database::AutoGenerated::Rose::ClientPromoCode::stringify {
    my $self = shift;
    return sprintf "%s %s %s (%s) on %s",
        ($self->client_loginid || '?'), ($self->promotion_code || '?'), ($self->status || ''),
        ($self->checked_in_myaffiliates ? 'checked' : 'NOT checked'), ($self->apply_date || '?');
}

sub BOM::Database::AutoGenerated::Rose::ClientStatus::stringify {
    my $self = shift;
    return sprintf "%s has status %s (set by %s) on %s: %s",
        $self->client_loginid, $self->status_code, $self->staff_name,
        $self->last_modified_date, $self->reason;
}

sub BOM::Database::AutoGenerated::Rose::FinancialMarketBet::stringify {
    my $self = shift;
    return sprintf "at %s: %s (%s)", $self->purchase_time, ($self->short_code || '?'), ($self->is_sold ? '' : 'OPEN');
}

sub BOM::Database::AutoGenerated::Rose::LegacyPayment::stringify {
    my $self = shift;
    return sprintf "[%s]: %s", $self->payment, $self->legacy_type,;
}

sub BOM::Database::AutoGenerated::Rose::LoginHistory::stringify {
    my $self = shift;
    return sprintf "%s login %s on %s", $self->client_loginid, ($self->login_successful ? 'ok' : 'BAD'), $self->login_date;
}

sub BOM::Database::AutoGenerated::Rose::Payment::stringify {
    my $self = shift;
    return sprintf "Payment (%s) to Account[%s]: %s %s", $self->payment_gateway_code, $self->account, $self->payment_type_code, $self->amount,;
}

sub BOM::Database::AutoGenerated::Rose::PaymentAgent::stringify {
    my $self = shift;
    return sprintf "PmtAgent in %s: %s - %s (%s)",
        ($self->target_country     || '?'),
        ($self->payment_agent_name || '?'),
        ($self->client             || '?'),
        ($self->is_authenticated ? 'Authd' : 'NOT-AUTHD');
}

sub BOM::Database::AutoGenerated::Rose::PromoCode::stringify {
    my $self = shift;
    $self->{_json} ||= try { JSON::from_json($self->promo_code_config) } || {};
    return sprintf "%s (%s %s until %s)",
        $self->code, ($self->{_json}{currency} || '?'), ($self->promo_code_type || '?'), ($self->expiry_date || '?');
}

sub BOM::Database::AutoGenerated::Rose::SelfExclusion::stringify {
    my $self = shift;
    my @limits;
    push @limits, ("Max-Balance " . $self->max_balance)              if defined $self->max_balance;
    push @limits, ("Max-Turnover " . $self->max_turnover)            if defined $self->max_turnover;
    push @limits, ("Max-Open-Bets " . $self->max_open_bets)          if defined $self->max_open_bets;
    push @limits, ("Exclude-Until " . $self->exclude_until)          if defined $self->exclude_until;
    push @limits, ("Timeout-Until " . $self->timeout_until)          if defined $self->timeout_until;
    push @limits, ("Session-Limit " . $self->session_duration_limit) if defined $self->session_duration_limit;
    return sprintf "%s self-exclusion limits: (%s) set on %s", $self->client_loginid, join(', ', @limits), $self->last_modified_date;
}

sub BOM::Database::AutoGenerated::Rose::Transaction::stringify {
    my $self = shift;
    return sprintf "acct:%s %s fmb:%d for %f on %s",
        $self->account_id,
        $self->action_type,
        ($self->financial_market_bet_id || 0),
        $self->amount,
        $self->transaction_time;
}

sub BOM::Database::AutoGenerated::Rose::Users::BinaryUser::stringify {
    my $self = shift;
    return sprintf "%s (%sverified)", $self->email, ($self->email_verified ? '' : 'NOT ');
}

sub BOM::Database::AutoGenerated::Rose::Users::FailedLogin::stringify {
    my $self = shift;
    return sprintf "%s has %d login failure%s as at %s",
        $self->binary_user,
        $self->fail_count,
        ($self->fail_count == 1 ? '' : 's'),
        $self->last_attempt;
}

sub BOM::Database::AutoGenerated::Rose::Users::Loginid::stringify {
    my $self = shift;
    return $self->loginid;
}

1;

