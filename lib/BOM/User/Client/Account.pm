package BOM::User::Client::Account;

use strict;
use warnings;
use BOM::Database::AutoGenerated::Rose::Payment;
use BOM::Database::AutoGenerated::Rose::Transaction::Manager;
use Date::Utility;
use Moo;

has 'id' => (
    is => 'ro',
);

has 'client_loginid' => (
    is => 'ro',

);
has 'currency_code' => (
    is => 'ro',
);

#Not used anymore but left for compatibility.
has 'is_default' => (
    is => 'ro',
);

#Rose::DB object
has 'db' => (
    is => 'ro',
);

=head2

BUILD

When *C<new()> is called either retrieve an existing account from the DB or create one if required.

=cut

sub BUILD {
    my ($self, $args) = @_;

    my $db               = $args->{db};
    my $existing_account = $self->_refresh_object;
    return if $existing_account || !$args->{currency_code};

    # No current account but currency code supplied so we can create one
    my $result = $db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref(
                "SELECT add_account as id FROM transaction.add_account(?,?)",
                undef,
                $args->{client_loginid},
                $args->{currency_code});
        });

    $self->{id} = $result->{id};
    return;
}

=head2 _refresh_object

Private method that refreshes the attributes of the  Account object from the database.


Takes no Arguments


Returns 1 or 0,  1 indicating that the object was found in the database. 

=cut 

sub _refresh_object {
    my $self             = shift;
    my $existing_account = $self->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref("SELECT * FROM transaction.account WHERE client_loginid = ? AND  is_default = TRUE", undef,
                $self->{client_loginid});
        });

    if (defined $existing_account) {
        @{$self}{keys %$existing_account} = values %$existing_account;
        return 1;
    }
    return 0;

}

=head2 balance

Returns the balance of the account the balance is set by a DB trigger
therefore we always read it from the DB fresh as it could be 
out of date at any time. 

=cut

sub balance {
    my $self = shift;
    $self->_refresh_object;
    return $self->{balance};
}

=head2 add_payment

Adds a payment to account, 
B<!important> adding a payment does not update the balance of the account
You need to add a new transaction C<< payment->add_transaction(...) >> in order
for that to happen .

Takes the following arguments as named parameters

=over 4

=item amount => numeric
=item payment_gateway_code =>string
=item payment_type_code =>string
=item status => string
=item staff_loginid => string
=item remark =>string
   
=back 
Returns a L<BOM::Database::AutoGenerated::Rose::Payment> Object

=cut

sub add_payment {
    my $self           = shift;
    my $payment_params = shift;
    $payment_params->{account_id} = $self->id;
    my $payment = BOM::Database::AutoGenerated::Rose::Payment->new(%$payment_params, db => $self->db);
    $payment->save;
    return $payment;
}

=head2 total_withdrawals()

Finds the total amount of withdrawals, optionally from a specified period. 

Takes the following arguments. 

=over 4 

=item L<Date::Utility>  (optional)  the time from when the amount of withdrawals should be calculated

=back

Returns a floating point number representing the total amount of withdrawals

=cut 

sub total_withdrawals {
    my $self      = shift;
    my $time_from = shift || Date::Utility->new('1970-01-01 00:00:00');
    my $result    = $self->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref("SELECT total FROM payment.find_payment_withdrawals(?,?)", undef, $self->id, $time_from->datetime_yyyymmdd_hhmmss);
        });

    return ($result->{total} // 0);
}

=head2 find_transaction

proxy for the autogenerated Rose account->find_transaction

Takes the same arguments as L<https://metacpan.org/pod/Rose::DB::Object::Manager>

the most interesting one is C<query> as below

=over 4

=item  C<query> an arrayref with keys and values to search on (see link above)

=back

   C<<$transactions = $account->find_transaction(query=>[id=>3]);>>

returns  an Array of Transaction Objects.

=cut

sub find_transaction {
    my ($self, %attrs) = @_;
    my $transactions = BOM::Database::AutoGenerated::Rose::Transaction::Manager->get_transaction(%attrs, db => $self->db);
    return $transactions;
}

=head2 find_financial_market_bet

proxy for the auto generated Rose account->find_financial_market_bet

Takes the same arguments as L<https://metacpan.org/pod/Rose::DB::Object::Manager>

the most interesting one is C<query> as below

=over 4

=item  C<query> an arrayref with keys and values to search on (see link above)

=back

   C<<$find_financial_market_best = $account->find_financial_market_bet(query=>[id=>3]);>>

returns an Array of FinancialMarketBet Objects.

=cut

sub find_financial_market_bet {
    my ($self, %attrs) = @_;
    push @{$attrs{query}}, ('account_id' => $self->id);
    my $financial_market_bets = BOM::Database::AutoGenerated::Rose::FinancialMarketBet::Manager->get_financial_market_bet(%attrs, db => $self->db);
    return $financial_market_bets;
}
1;
