package BOM::User::Client::PaymentAgent;

use strict;
use warnings;

use BOM::User::Client;
use BOM::User;
use BOM::Database::DataMapper::PaymentAgent;
use Brands;
use List::MoreUtils qw(all);
use base 'BOM::Database::AutoGenerated::Rose::PaymentAgent';
## VERSION

# By drawing on Client's constructor we first prove the
# client record exists and we also benefit from the
# broker-savvy db connection handling there.
sub new {
    my ($class, @args) = @_;
    my $client = BOM::User::Client->new(@args) || return undef;
    my $self   = $client->payment_agent        || return undef;
    return bless $self, $class;
}

# Save to default writable place, unless explicitly set by caller..
sub save {
    my ($self, %args) = @_;
    $self->set_db(delete($args{set_db}) || 'write');
    return $self->SUPER::save(%args);
}

# Promote my client pointer to the smarter version of client..
# There are 2 versions of client, One is BOM::Database::AutoGenerated::Rose::Client, which will be returned if we don't overwrite the sub client here.
# Another is the BOM::User::Client, which is a smarter one and is a subclass of the previous one. Here we overwrite this sub to return the smarter one.
# TODO: will fix it when we remove Rose:DB::Object
sub client {
    my $self = shift;
    return bless $self->SUPER::client, 'BOM::User::Client';
}

=head2 get_payment_agents

Will deliver the list of payment agents based on the provided country, currency and broker code.

Takes the following parameters:

=over 4

=item C<$country_code> - L<2-character ISO country code|https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2> to restrict search (agents with no country will not be included)

=item C<$broker_code> - Two letter representation of broker. For example CR.

=item C<$currency> - Three letter currency code. For example USD.

=item C<$is_listed> - Indicate which payment agents you want to retrieve. whether they appear on binary site or not or both. For example ('t','f', NULL)

=back

Returns a  list of C<BOM::User::Client::PaymentAgent> objects.

=cut

sub get_payment_agents {
    my ($self, %args) = @_;

    my ($country_code, $broker_code, $currency, $is_listed) = @args{qw/ country_code broker_code currency is_listed/};

    die "Broker code should be specified" unless (defined($country_code) and defined($broker_code));
    my %query_args = (
        target_country => $country_code,
        is_listed      => $is_listed
    );
    $query_args{currency_code} = $currency if $currency;
    my $payment_agent_mapper = BOM::Database::DataMapper::PaymentAgent->new({broker_code => $broker_code});
    return $payment_agent_mapper->get_authenticated_payment_agents(%query_args);
}

=head2 set_countries

save countries against a payment agent

=over 4

=item C<@target_countries> - Array of country codes L<2-character ISO country code|https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>

=back

Returns 1

=cut

sub set_countries {
    my $self             = shift;
    my $target_countries = shift;
    my $login_id         = $self->client_loginid;

    my @suspended_countries = grep { BOM::User::is_payment_agents_suspended_in_country($_) } @$target_countries;
    return undef if (@suspended_countries);

    return undef unless ($self->_validate_country_code($target_countries));

    return undef unless ($self->_validate_same_landing_company($target_countries));

    $self->db->dbic->run(
        fixup => sub {
            my $authenticated_payment_agents_statement = $_->prepare("SELECT * FROM betonmarkets.set_payment_agent_countries(?,?)");
            $authenticated_payment_agents_statement->execute($login_id, $target_countries);
            return $authenticated_payment_agents_statement->fetchall_arrayref;
        });
    return 1;
}

=head2 get_countries

Will deliver countries saved against particular payment agent.

Returns a arrayref of country codes saved against a payment_agent.

=cut

sub get_countries {
    my $self     = shift;
    my $login_id = $self->client_loginid;
    return $self->db->dbic->run(
        fixup => sub {
            return $_->selectcol_arrayref('SELECT country FROM betonmarkets.get_individual_payment_agent_countries(?)', undef, $login_id);
        });
}

sub _validate_country_code {
    my ($self, $target_countries) = @_;
    my $countries_instance = Brands->new()->countries_instance;
    return all { defined $countries_instance->countries->country_from_code($_) } @$target_countries;
}

sub _validate_same_landing_company {
    my ($self, $target_countries) = @_;
    my $countries_instance = Brands->new()->countries_instance;

    return all {
        ($countries_instance->real_company_for_country($_) // '') eq $self->client->landing_company->short
    }
    @$target_countries;
}

1;
