package BOM::User::Client;
# ABSTRACT: binary.com client handling and business logic

use strict;
use warnings;

our $VERSION = '0.145';

use parent 'BOM::Database::AutoGenerated::Rose::Client';

no indirect;
use Syntax::Keyword::Try;
use Email::Address::UseXS;
use Email::Stuffer;
use Date::Utility;
use List::Util qw/all first min any/;
use Locale::Country::Extra;
use Format::Util::Numbers qw(roundcommon);
use Text::Trim qw(trim);
use BOM::Platform::Context qw (request);
use YAML::XS qw(LoadFile);
use Path::Tiny;
use Format::Util::Numbers qw/financialrounding formatnumber/;
use Date::Utility;
use ExchangeRates::CurrencyConverter qw/convert_currency in_usd/;
use JSON::MaybeXS ();
use Encode;

use Rose::DB::Object::Util qw(:all);
use Rose::Object::MakeMethods::Generic scalar => ['self_exclusion_cache'];

use LandingCompany::Registry;

use BOM::Platform::Account::Real::default;
use BOM::Database::ClientDB;
use BOM::User::Client::PaymentAgent;
use BOM::User::Client::Status;
use BOM::User::Client::Account;
use BOM::User::Phone;
use BOM::User::FinancialAssessment qw(is_section_complete decode_fa);
use BOM::User::Utility;
use BOM::Platform::Event::Emitter;
use BOM::Database::DataMapper::Account;
use BOM::Database::DataMapper::Payment;
use BOM::Database::DataMapper::Transaction;
use BOM::Database::AutoGenerated::Rose::Client::Manager;
use BOM::Database::AutoGenerated::Rose::SelfExclusion;
use BOM::Config;
use BOM::Config::RedisReplicated;
use BOM::Config::CurrencyConfig;

use BOM::User::Client::PaymentNotificationQueue;
use BOM::User::Client::PaymentTransaction::Doughflow;
use BOM::Database::ClientDB;

use BOM::Platform::Event::Emitter;

use Carp qw(croak);

use Log::Any qw($log);

# ideally we should have document category table
# but that does not exists so using constant type
use constant PROOF_OF_ADDRESS_DOCUMENT_TYPES => qw(
    proofaddress payslip bankstatement cardstatement
);

use constant PROOF_OF_IDENTITY_DOCUMENT_TYPES => qw(
    proofid driverslicense passport driving_licence national_identity_card
);

# poi document types no longer used
use constant PROOF_OF_IDENTITY_DOCUMENT_TYPES_DEPRECATED => qw(
    selfie_with_id vf_id vf_face_id
);

# this email address should not be added into brand as it is specific to internal system
my $SUBJECT_RE = qr/(New Sign-Up|Update Address)/;

my $META = __PACKAGE__->meta;    # rose::db::object::manager meta rules. Knows our db structure

my $json = JSON::MaybeXS->new;

sub rnew { return shift->SUPER::new(@_) }

sub new {
    my $class = shift;
    my $args = shift || die 'BOM::User::Client->new called without args';

    my $loginid = $args->{loginid};
    die "no loginid" unless $loginid;

    my $operation = delete $args->{db_operation};

    my $self = $class->SUPER::new(%$args);

    $self->set_db($operation) if $operation;

    $self->load(speculative => 1) || return undef;    # must exist in db

    return $self;
}

sub get_instance {
    my $args = shift;
    return __PACKAGE__->new($args);
}

#              real db column                                    =>  legacy name
$META->column('address_city')->method_name('get_set' => 'city');
$META->column('address_line_1')->method_name('get_set' => 'address_1');
$META->column('address_line_2')->method_name('get_set' => 'address_2');
$META->column('address_postcode')->method_name('get_set' => 'postcode');
$META->column('address_state')->method_name('get_set' => 'state');
$META->column('client_password')->method_name('get_set' => 'password');

my $date_inflator_ymdhms = sub {
    my $self = shift;
    my $val = shift // return undef;
    return $val unless ref($val);
    return $val->isa('DateTime') ? ($val->ymd . ' ' . $val->hms) : $val;
};

my $date_inflator_ymd = sub {
    my $self = shift;
    my $val = shift // return undef;
    return $val unless ref($val);
    return $val->isa('DateTime') ? $val->ymd : $val;
};

$META->column('date_of_birth')->add_trigger(inflate => $date_inflator_ymd);
$META->column('date_of_birth')->add_trigger(deflate => $date_inflator_ymd);
$META->column('date_joined')->add_trigger(inflate => $date_inflator_ymdhms);
$META->column('date_joined')->add_trigger(deflate => $date_inflator_ymdhms);

my %DEFAULT_VALUES = (
    cashier_setting_password => '',
    latest_environment       => '',
    restricted_ip_address    => '',
);

$META->column($_)->default($DEFAULT_VALUES{$_}) for sort keys %DEFAULT_VALUES;

# END OF METADATA -- do this after all 'meta' calls.
$META->initialize(replace_existing => 1);

sub save {
    my $self = shift;
    # old code can set these numeric columns to ''.  should have been undef.
    for my $col (qw/custom_max_acbal custom_max_daily_turnover custom_max_payout/) {
        my $val = $self->$col // next;
        $self->$col(undef) if $val eq '';    # if we get here, it's defined.
    }

    $self->set_db('write');
    my $r = $self->SUPER::save(cascade => 1);    # Rose
    return $r;
}

sub store_details {
    my ($self, $args) = @_;

    $self->aml_risk_classification('low') unless $self->is_virtual;

    $self->$_($args->{$_}) for sort keys %$args;

    # special cases.. force empty string if necessary in these not-nullable cols.  They oughta be nullable in the db!
    for (qw(citizen address_2 state postcode salutation)) {
        $self->$_ || $self->$_('');
    }

    # resolve Gender from Salutation
    if ($self->salutation and not $self->gender) {
        my $gender = (uc $self->salutation eq 'MR') ? 'm' : 'f';
        $self->gender($gender);
    }

    $self->gender('m') unless $self->gender;

    return undef;
}

sub register_and_return_new_client {
    my $class = shift;
    my $args  = shift;

    my $broker = $args->{broker_code} || die "can't register a new client without a broker_code";
    my $self = $class->rnew(broker => $broker);

    store_details($self, $args);

    $self->set_db('write');

    my $sql    = "SELECT nextval('sequences.loginid_sequence_$broker')";
    my $dbic   = $self->db->dbic;
    my @seqnum = $dbic->run(
        fixup => sub {
            my $sth = $_->prepare($sql);
            $sth->execute();
            return $sth->fetchrow_array();
        });

    $self->loginid("$broker$seqnum[0]");
    return $self->save;
}

sub full_name {
    my $self = shift;
    return $self->salutation . ' ' . $self->first_name . ' ' . $self->last_name;
}

sub landing_company {
    my $self = shift;
    return LandingCompany::Registry->get_by_broker($self->broker);
}

=head2 set_promotion

Description: Sets or Gets the promotion object. Linked to the table betonmarkets.client_promo_code
If the client does not have a promo_code object it will be created otherwise the existing one will be returned.
Takes no Arguments


Returns a L<BOM::Database::AutoGenerated::Rose::ClientPromoCode>

=cut

sub set_promotion {
    my ($self) = @_;
    unless ($self->get_db eq 'write') {
        $self->set_db('write');
        $self->client_promo_code(undef);    # empty Rose's read-only version..
    }
    # get the existing one or make a dummy one..
    if (my $obj = $self->client_promo_code) {
        return $obj;
    }
    if (LandingCompany::Registry::get_currency_type($self->currency) eq 'crypto') {
        die "Promo code cannot be added to crypto currency accounts\n";
    }
    my %args = (
        broker         => $self->broker,
        client_loginid => $self->loginid,
        status         => 'NOT_CLAIM',
        mobile         => '',
        apply_date     => Date::Utility->new->db_timestamp,
        db             => $self->db,
    );

    my $obj = BOM::Database::AutoGenerated::Rose::ClientPromoCode->new(%args);
    return $self->client_promo_code($obj);
}

# support legacy calls to these get/set shortcuts from Client to the promo_code record
sub promo_code {
    my ($self, $promo_code) = @_;
    if ($promo_code) {
        my $dbic   = $self->db->dbic;
        my $result = $dbic->run(
            fixup => sub {
                $_->selectrow_hashref('SELECT * FROM betonmarkets.promo_code WHERE code = ?', undef, ($promo_code),);
            });
        die "invalid promocode $promo_code\n" if (!$result);
        return $self->set_promotion->promotion_code($promo_code);
    }
    return ($self->client_promo_code || return)->promotion_code;
}

sub promo_code_status {
    my $self = shift;
    return $self->set_promotion->status(@_) if @_;
    return ($self->client_promo_code || return)->status;
}

sub promo_code_apply_date {
    my $self = shift;
    return $self->set_promotion->apply_date(@_) if @_;
    return ($self->client_promo_code || return)->apply_date;
}

sub promo_code_checked_in_myaffiliates {
    my $self = shift;
    return $self->set_promotion->checked_in_myaffiliates(@_) if @_;
    return ($self->client_promo_code || return)->checked_in_myaffiliates;
}

sub by_promo_code {
    my ($class, %args) = @_;
    my $broker = $args{broker_code} || die 'by_promo_code needs a broker_code';
    my $db = $class->rnew(broker => $broker)->db;
    my $clients = BOM::Database::AutoGenerated::Rose::Client::Manager->get_client(
        db           => $db,
        with_objects => ['client_promo_code'],
        query        => [%args],
        sort_by      => 't1.broker_code, t1.loginid'
    );
    # turn BPDPR::Client objects into (much smarter) Client objects
    return map { bless $_, $class } @$clients;
}

sub by_args {
    my ($class, %query) = @_;
    my $broker = $query{broker_code} || die 'by_args needs a broker_code';
    my %opts = (
        db      => $class->rnew(broker => $broker)->db,
        sort_by => 'broker_code, loginid'
    );
    if (my $limit = delete $query{limit}) {
        $opts{limit} = $limit;
    }
    my $clients = BOM::Database::AutoGenerated::Rose::Client::Manager->get_client(%opts, query => [%query]);
    # turn BPDPR::Client objects into (much smarter) Client objects
    return [map { bless $_, $class } @$clients];
}

sub get_objects_from_sql {
    my ($class, %args) = @_;
    my $broker = delete $args{broker_code} || die 'get_objects_from_sql needs a broker_code';
    $args{db} ||= $class->rnew(broker => $broker)->db;
    my $clients = BOM::Database::AutoGenerated::Rose::Client::Manager->get_objects_from_sql(%args);
    # turn BPDPR::Client objects into (much smarter) Client objects
    return [map { bless $_, $class } @$clients];
}

sub is_virtual { return shift->broker =~ /^VR/ }

sub has_funded { return shift->first_funded_date ? 1 : 0 }

sub get_authentication {
    my $self            = shift;
    my $method          = shift;
    my $column          = shift;
    my $authentications = {map { $_->authentication_method_code => $_ } $self->client_authentication_method};
    my $obj             = $authentications->{$method} || return undef;
    return $column ? $obj->$column : $obj;
}

sub set_authentication {
    my $self   = shift;
    my $method = shift;
    unless ($self->get_db eq 'write') {
        $self->set_db('write');
        $self->client_authentication_method(undef);    # throw out my read-only versions..
    }
    return $self->get_authentication($method) || do {
        $self->add_client_authentication_method({
            authentication_method_code => $method,
            status                     => 'pending'
        });
        $self->status->clear_allow_document_upload;
        $self->get_authentication($method);
        }
}

=head2 risk_level

Get the risk level of clients, based on:

- SR (Social Responsibility): Always high for clients that have breached thresholds
and have no financial assessment

- AML (Anti-Money Laundering): Applies for clients under all landing companies

=cut

sub risk_level {
    my $client = shift;

    my $risk = $client->aml_risk_classification // '';

    # use `low`, `standard`, `high` as prepending `manual override` string is for internal purpose
    $risk =~ s/manual override - //;

    if ($client->landing_company->social_responsibility_check_required && !$client->financial_assessment) {
        $risk = 'high'
            if BOM::Config::RedisReplicated::redis_events()->get($client->loginid . '_sr_risk_status');
    }

    return $risk;
}

=head2 is_financial_assessment_complete

Check if the client has filled out the financial assessment information:

- For non-MF, only the the financial information (FI) is required and risk level is high.
- For MF, both the FI and trading experience is required, regardless of rish level.

=cut

sub is_financial_assessment_complete {
    my $self = shift;

    my $sc                   = $self->landing_company->short;
    my $financial_assessment = decode_fa($self->financial_assessment());

    my $is_FI = is_section_complete($financial_assessment, 'financial_information');

    if ($sc ne 'maltainvest') {
        return 0 if ($self->risk_level() eq 'high' and not $is_FI);
        return 1;
    }

    my $is_TE = is_section_complete($financial_assessment, 'trading_experience');

    return 0 unless ($is_FI and $is_TE);

    return 1;
}

=head2 documents_expired

documents_expired returns a boolean indicating if this client (or any related clients)
have any POI documents (passport, proofid, driverslicense, vf_id, vf_face_id) which have expired.

=cut

sub documents_expired {
    my $self = shift;

    my @siblings = $self->user->clients(include_disabled => 1);

    for my $sibling (@siblings) {

        next if $sibling->is_virtual;

        next if !($sibling->is_document_expiry_check_required());

        return 1 if $sibling->_get_documents_expiry_by_date();
    }
    return 0;
}

=head2 is_any_document_expiring_by_date

Returns a boolean indicating if this client (or any related clients)
have any POI documents (passport, proofid, driverslicense, vf_id, vf_face_id) which
have expired or the expiration is before a specific date.

Takes one argument:

=over 4

=item * $date_limit

If this argument is not specified, the sub which check for documents which have expired
(i.e. have an expiration date yesterday or earlier).
If this argument is specified, the sub will check for documents whose expiration
date is earlier than the specified date.

=back

=cut

sub is_any_document_expiring_by_date {
    my ($self, $date_limit) = @_;

    return 0 if $self->is_virtual;

    $date_limit //= Date::Utility->new();

    return 0 + !!($self->_get_documents_expiry_by_date($date_limit));
}

sub _get_documents_expiry_by_date {
    my ($self, $date_limit) = @_;

    $date_limit //= Date::Utility->new();

    my @query_params = ($self->loginid, $date_limit->db_timestamp);
    my $dbic_code = sub {
        my $query = $_->prepare('SELECT * FROM betonmarkets.get_expired_documents_loginids($1::TEXT, $2::DATE)');
        $query->execute(@query_params);
        return $query->fetchrow_arrayref();
    };

    return $self->db->dbic->run(fixup => $dbic_code);
}

=head2 documents_uploaded

Return all the uploaded documents for the current client.
Ignores that are in uploading state

Returns

=over 4

=item * A hashref containing list of different document types

    {
        proof_of_identity => {
            documents => {
                file_name1 => {},
                file_name2 => {},
            },
            is_expired => 0,
            minimum_expiration_date => epoch,
        },
        proof_of_address => {
            documents => {
                file_name1 => {},
                file_name2 => {},
            },
            is_expired => 0,
            minimum_expiration_date => epoch,
        },
        others => {
            documents => {
                file_name1 => {},
                file_name2 => {},
            },
            is_expired => 0,
            minimum_expiration_date => epoch,
        },
    }

=back

=cut

sub documents_uploaded {
    my $self = shift;

    my $doc_structure = sub {
        my $doc = shift;

        return {
            expiry_date => $doc->expiration_date ? $doc->expiration_date->epoch : undef,
            type        => $doc->document_type,
            format      => $doc->document_format,
            id          => $doc->document_id,
            status      => $doc->status,
        };
    };

    my %documents = ();

    my @siblings = $self->user->clients(include_disabled => 1);

    for my $each_sibling (@siblings) {
        next if $each_sibling->is_virtual;

        foreach my $single_document ($each_sibling->client_authentication_document) {
            # uploading document can lead to any success or failure
            # so better to not consider that
            next if defined $single_document->status and $single_document->status eq 'uploading';

            my $type = 'other';
            $type = 'proof_of_identity' if (first { $_ eq $single_document->document_type } PROOF_OF_IDENTITY_DOCUMENT_TYPES);
            $type = 'proof_of_address'  if (first { $_ eq $single_document->document_type } PROOF_OF_ADDRESS_DOCUMENT_TYPES);

            $documents{$type}{documents}{$single_document->file_name} = $doc_structure->($single_document);

            my $expires = $documents{$type}{documents}{$single_document->file_name}{expiry_date};
            next unless $expires;

            my $existing_expiry_date_epoch = $documents{$type}{minimum_expiry_date} // $expires;
            my $minimum_expiry_date = min($expires, $existing_expiry_date_epoch);

            $documents{$type}{minimum_expiry_date} = $minimum_expiry_date;
            $documents{$type}{is_expired} = Date::Utility->new->epoch > $minimum_expiry_date ? 1 : 0;
        }
    }

    if (scalar(keys %documents) and exists $documents{proof_of_identity}) {
        $documents{proof_of_identity}{is_pending} = 1 unless $self->status->age_verification;
    }

    # set document status for authentication
    # status - needs_action and under_review
    if (scalar(keys %documents) and exists $documents{proof_of_address}) {
        if (($self->authentication_status // '') eq 'needs_action') {
            $documents{proof_of_address}{is_rejected} = 1;
        } elsif (not $self->fully_authenticated) {
            $documents{proof_of_address}{is_pending} = 1;
        }
    }

    return \%documents;
}

sub has_valid_documents {
    my $self = shift;

    my $documents = $self->documents_uploaded();

    # no documents
    return 0 unless scalar(keys %$documents);

    # if any of the document is expired then documents are invalid
    return 0 if any { $documents->{$_}{is_expired} } keys %$documents;

    return 1;
}

=head2 fully_authenticated

For reference a client is termed fully authenticated with following parameters :

CR - POI + POA
MX - Prove ID / (POI + POA)
MLT - POI + POA
MF - POI + POA + Selfie in Onfido

=cut

sub fully_authenticated {
    my $self = shift;

    for my $method (qw/ID_DOCUMENT ID_NOTARIZED ID_ONLINE/) {
        my $auth = $self->get_authentication($method);
        return 1 if $auth and $auth->status eq 'pass';
    }

    return 0;
}

sub authentication_status {
    my ($self) = @_;

    my $online = $self->get_authentication('ID_ONLINE');

    return 'online' if $online and $online->status eq 'pass';

    my $notarized = $self->get_authentication('ID_NOTARIZED');

    return 'notarized' if $notarized and $notarized->status eq 'pass';

    my $id_auth = $self->get_authentication('ID_DOCUMENT');

    return 'no' unless $id_auth;

    my $id_auth_status = $id_auth->status;

    return 'scans' if $id_auth_status eq 'pass';

    return $id_auth_status;
}

sub set_exclusion {
    my $self = shift;
    unless ($self->get_db eq 'write') {
        $self->set_db('write');
    }
    # return the existing one..
    if (my $obj = $self->self_exclusion) {
        $obj->db($self->db);
        $self->self_exclusion_cache([$obj]);
        return $obj;
    }
    # or make a new one
    $self->self_exclusion(my $obj = BOM::Database::AutoGenerated::Rose::SelfExclusion->new());
    $self->self_exclusion_cache([$obj]);
    return $self->self_exclusion;
}

# make this relationship return its smarter version too
sub get_payment_agent {
    my $self = shift;
    my $obj  = $self->payment_agent || return undef;
    my $pa   = bless $obj, 'BOM::User::Client::PaymentAgent';
    return $pa;
}

# return a (new or existing) writeable BOM::User::Client::PaymentAgent
sub set_payment_agent {
    my $self = shift;
    unless ($self->get_db eq 'write') {
        $self->set_db('write');
    }
    # return the existing one..
    if (my $obj = $self->get_payment_agent) {
        $obj->db($self->db);
        return $obj;
    }
    my %args = (
        client_loginid => $self->loginid,
        db             => $self->db
    );
    $self->payment_agent(BOM::Database::AutoGenerated::Rose::PaymentAgent->new(%args));
    return $self->get_payment_agent;
}

sub get_self_exclusion {
    my $self = shift;

    my $excl = $self->self_exclusion_cache;
    return $excl->[0] if $excl;

    $excl = $self->self_exclusion;
    $self->self_exclusion_cache([$excl]);
    return $excl;
}

sub get_limits_for_max_deposit {
    my $self = shift;

    my $excl = $self->get_self_exclusion;
    return undef unless $excl;

    my $max_deposit = $excl->max_deposit;
    my $begin_date  = $excl->max_deposit_begin_date;
    my $end_date    = $excl->max_deposit_end_date;
    my $today       = Date::Utility->new;

    undef $end_date if $end_date and Date::Utility->new($end_date)->is_before($today);
    undef $begin_date  unless $end_date;
    undef $max_deposit unless $end_date;

    # No limits if any of the fields are missing
    return undef unless $max_deposit and $begin_date and $end_date;

    return +{
        max_deposit => $max_deposit,
        begin       => $begin_date->date,
        end         => $end_date->date
    };
}

sub get_limit_for_account_balance {
    my $self = shift;

    my @maxbalances = ();
    my $max_bal     = BOM::Config::client_limits()->{max_balance};
    my $curr        = $self->currency;
    push @maxbalances, $self->is_virtual ? $max_bal->{virtual}->{$curr} : $max_bal->{real}->{$curr};

    if ($self->get_self_exclusion and $self->get_self_exclusion->max_balance) {
        push @maxbalances, $self->get_self_exclusion->max_balance;
    }

    return List::Util::min(@maxbalances);
}

sub get_limit_for_daily_turnover {
    my $self = shift;

    # turnover maxed at 500K of any currency.
    my @limits = (BOM::Config::client_limits()->{maximum_daily_turnover}{$self->currency});
    if ($self->get_self_exclusion && $self->get_self_exclusion->max_turnover) {
        push @limits, $self->get_self_exclusion->max_turnover;
    }

    return List::Util::min(@limits);
}

sub get_limit_for_daily_losses {
    my $self = shift;

    my $excl = $self->get_self_exclusion;
    if ($excl && $excl->max_losses) {
        return $excl->max_losses;
    }
    return undef;
}

sub get_limit_for_7day_turnover {
    my $self = shift;

    my $excl = $self->get_self_exclusion;
    if ($excl && $excl->max_7day_turnover) {
        return $excl->max_7day_turnover;
    }
    return undef;
}

sub get_limit_for_7day_losses {
    my $self = shift;

    my $excl = $self->get_self_exclusion;
    if ($excl && $excl->max_7day_losses) {
        return $excl->max_7day_losses;
    }
    return undef;
}

sub get_limit_for_30day_turnover {
    my $self = shift;

    my $excl = $self->get_self_exclusion;
    if ($excl && $excl->max_30day_turnover) {
        return $excl->max_30day_turnover;
    }
    return undef;
}

sub get_limit_for_30day_losses {
    my $self = shift;

    my $excl = $self->get_self_exclusion;
    if ($excl && $excl->max_30day_losses) {
        return $excl->max_30day_losses;
    }
    return undef;
}

sub get_limit_for_open_positions {
    my $self = shift;

    my @limits = BOM::Config::client_limits()->{max_open_bets_default};

    my $excl = $self->get_self_exclusion;
    if ($excl && $excl->max_open_bets) {
        push @limits, $excl->max_open_bets;
    }

    return List::Util::min(@limits);
}

# return undef or an exclusion date string
sub get_self_exclusion_until_date {
    my $self = shift;

    my $excl = $self->get_self_exclusion;
    return undef unless $excl;

    my $exclude_until = $excl->exclude_until;
    my $timeout_until = $excl->timeout_until;
    my $today         = Date::Utility->new;
    # Don't uplift exclude_until date for clients under Binary (Europe) Ltd,
    # Binary (IOM) Ltd, and Binary Investments (Europe) Ltd upon expiry.
    # This is in compliance with Section 3.5.4 (5e) of the United Kingdom Gambling
    # Commission licence conditions and codes of practice
    # United Kingdom Gambling Commission licence conditions and codes of practice is
    # applicable to clients under Binary (Europe) Ltd & Binary (IOM) Ltd only. Change is also
    # applicable to clients under Binary Investments (Europe) Ltd for standardisation.
    # (http://www.gamblingcommission.gov.uk/PDF/LCCP/Licence-conditions-and-codes-of-practice.pdf)
    if ($self->landing_company->short !~ /^(?:iom|malta|maltainvest)$/) {
        # undef if expired
        undef $exclude_until
            if $exclude_until and Date::Utility->new($exclude_until)->is_before($today);
    }

    undef $timeout_until if $timeout_until and Date::Utility->new($timeout_until)->is_before($today);

    return undef unless $exclude_until || $timeout_until;

    if ($exclude_until && $timeout_until) {
        my $exclude_until_dt = Date::Utility->new($exclude_until);
        my $timeout_until_dt = Date::Utility->new($timeout_until);

        return $exclude_until_dt->date if $exclude_until_dt->epoch < $timeout_until_dt->epoch;
        return $timeout_until_dt->datetime_yyyymmdd_hhmmss_TZ;
    }

    return Date::Utility->new($exclude_until)->date if $exclude_until;
    return Date::Utility->new($timeout_until)->datetime_yyyymmdd_hhmmss_TZ;
}

sub get_limit_for_payout {
    my $self = shift;

    my $max_payout = BOM::Config::client_limits()->{max_payout_open_positions};

    return $max_payout->{$self->currency};
}

=head2 get_today_transfer_summary

Returns today (GMT timezone ) money transfers summary for the user based on the given type
default payment type is: 'internal_transfer'

=cut

sub get_today_transfer_summary {
    my ($self, $transfer_type) = @_;
    $transfer_type //= 'internal_transfer';
    my $dbic = $self->db->dbic;
    return $dbic->run(
        fixup => sub {
            $_->selectrow_hashref("SELECT * from payment.get_today_account_transfer_summary(?, ?);", undef, $self->account->id, $transfer_type);
        });
}

sub get_limit {
    my $self = shift;
    my $args = shift || die 'get_limit needs args';
    my $for  = $args->{for} || die 'get_limit needs a "for" arg';

    $for = 'get_limit_for_' . $for;
    return $self->$for;
}

sub currency {
    my $self = shift;

    return 'USD' if $self->is_virtual;

    if (my $account = $self->default_account) {
        return $account->currency_code();
    }

    return 'GBP' if $self->residence eq 'gb';
    return 'AUD' if $self->landing_company->short eq 'svg' and $self->residence eq 'au';
    return $self->landing_company->legal_default_currency;
}

=head2 local_currency

Returns the 3-character currency code matching the client's residence.

=over 4

=item * C<$country> - optional 3-character ISO country code used to override the country
for the currency mapping, for cases where you want to use citizenship or a specific country

=back

=cut

sub local_currency {
    my ($self, $country) = @_;
    $country //= $self->residence;

    return undef unless $country;

    return BOM::Config::CurrencyConfig::local_currency_for_country($country);
}

sub has_deposits {
    my $self = shift;
    my $args = shift;

    return $self->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref("SELECT * from betonmarkets.has_first_deposit(?, ?);", undef, $self->loginid, $args->{exclude});
        })->{has_first_deposit};
}

sub is_first_deposit_pending {
    my $self = shift;
    # we need to ignore free gift as its payment done manually by marketing
    return !$self->is_virtual && !$self->has_deposits({exclude => ['free_gift']});
}

sub has_mt5_deposits {
    my $self   = shift;
    my $mt5_id = shift;

    return $self->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref("SELECT * from betonmarkets.has_first_mt5_deposit(?);", undef, $mt5_id);
        })->{has_first_mt5_deposit};
}

sub first_funded_currency { return shift->_ffd->{first_funded_currency} }
sub first_funded_amount   { return shift->_ffd->{first_funded_amount} }
sub first_funded_date     { return shift->_ffd->{first_funded_date} }

sub _ffd {    # first_funded_details
    my $self           = shift;
    my $ffd            = {};
    my $payment_mapper = BOM::Database::DataMapper::Payment->new({client_loginid => $self->loginid});
    if (my $ff = $payment_mapper->first_funding) {
        $ffd->{first_funded_date}     = Date::Utility->new($ff->payment_time->epoch);
        $ffd->{first_funded_amount}   = sprintf '%.2f', $ff->amount;
        $ffd->{first_funded_currency} = $ff->account->currency_code();
    }
    return $ffd;
}

# The following 2 subroutines are proxies to
# the real account sub routine and can be removed
# when the calls are refactored.

sub set_default_account {
    my $self     = shift;
    my $currency = shift;
    return $self->account($currency);
}

sub default_account {
    my $self = shift;
    return $self->account();
}

=head2 account


C<< $account = $client->account($currency) >>

If one does not exist it creates an account entry assigns it a currency symbol
and marks it as default.  If there is already a default currency set it makes
no changes.

Takes the following parameters.

=over 4

=item * C<currency> - (optional) A string representing 3 character currency as defined in L<ISO 4217|https://en.wikipedia.org/wiki/ISO_4217>. An account will be created based on the given string, if it does not exist.
=back

=back

Returns C<Account> - An Account Object of type BOM::User::Client::Account

=cut

sub account {
    my $self     = shift;
    my $currency = shift;

    my $account = BOM::User::Client::Account->new(
        client_loginid => $self->loginid,
        currency_code  => $currency,
        db             => $self->db,
    );

    #calls to Account new will always return some sort of object because that's how moo works,
    #so to maintain backward compatibility we return undef if no currency_code exists showing
    #an empty account.
    return undef if !defined $account->currency_code();

    return $account;
}

sub open_bets {
    my $self    = shift;
    my $account = $self->default_account || return undef;
    my $fmbs    = $account->find_financial_market_bet(query => [is_sold => 0]);
    return @$fmbs;
}

=head1 CUSTOMER SERVICE RELATED FUNCTIONS

These are for interfacing with customer service facing applications (like email
queues or CRM applications).

=head2 add_note($subject, $content)

Adds a note for a customer record.  This is supposed to integrate with whatever
CS is doing, and returns 1 on success or 0 on failure.

Currently this is simply an emailer which sends the email to the helpdesk
system.  Since we go through localhost, we die if there is an error.  This
might happen if somehow we are sending invalid SMTP commands or the like.

As the implementation changes the exceptions may change as well, but the basic
guarantee is that if there is a serious system error that prevents this from
working going forward with any input, it should die.

=cut

sub add_note {
    my ($self, $subject, $content) = @_;

    # send to different email based on the subject of the email, as the helpdesk system handles different subject and email differently.
    my $email_to = ($subject =~ /$SUBJECT_RE/) ? 'support_new_account' : 'support';
    $email_to = request()->brand->emails($email_to);
    my $email_from = request()->brand->emails('system_generated');

    # We want to record who this note is for, but many legacy places already include client ID.
    # If you're reading this, please check for those and remove the condition.
    my $loginid = $self->loginid;
    $subject = $loginid . ': ' . $subject unless $subject =~ /\Q$loginid/;
    return Email::Stuffer->from($email_from)->to($email_to)->subject($subject)->text_body($content)->send_or_die;
}

=pod

=head2 get_promocode_dependent_limit

get the limits based on promocode

=cut

sub get_promocode_dependent_limit {
    my ($client) = @_;

    my $payment_mapper = BOM::Database::DataMapper::Payment->new({
        'client_loginid' => $client->loginid,
        'currency_code'  => $client->currency,
    });

    my $total_free_gift_deposits            = $payment_mapper->get_total_free_gift_deposit();
    my $total_free_gift_rescind_withdrawals = $payment_mapper->get_total_free_gift_rescind_withdrawal();

    my $free_gift_deposits = $total_free_gift_deposits - $total_free_gift_rescind_withdrawals;

    my $frozen_free_gift = 0;
    my $turnover_limit   = 0;

    my $cpc = $client->client_promo_code;
    if ($cpc && $cpc->status !~ /^(CANCEL|REJECT)$/) {

        my $pc = $cpc->promotion;
        try {
            $pc->{_json} ||= JSON::MaybeXS->new->decode($pc->promo_code_config)
        }
        catch {
            $log->debugf('Unable to parse promo code config: %s', $pc->promo_code_config);
        }

        if ($pc->promo_code_type eq 'FREE_BET') {

            my $min_turnover = $pc->{_json}{min_turnover};
            my $amount       = $pc->{_json}{amount};

            my $made_actual_deposit = $payment_mapper->get_total_deposit() - $amount;
            if ($made_actual_deposit) {
                $frozen_free_gift = $free_gift_deposits;
            } else {
                my $account_mapper = BOM::Database::DataMapper::Account->new({
                    'client_loginid' => $client->loginid,
                    'currency_code'  => $client->currency,
                });
                $frozen_free_gift = $account_mapper->get_balance();
            }

            $turnover_limit = 25 * $amount;

            # matched bets
            if (defined($min_turnover) and length($min_turnover) > 0) {
                $frozen_free_gift = 0;
            }

            my $txn_data_mapper = BOM::Database::DataMapper::Transaction->new({
                client_loginid => $client->loginid,
                currency_code  => $client->currency,
            });

            if (roundcommon(0.01, $txn_data_mapper->get_turnover_of_account) >= $turnover_limit) {
                $frozen_free_gift = 0;
            }
        }
    }

    return {
        frozen_free_gift         => $frozen_free_gift,
        free_gift_turnover_limit => $turnover_limit,
    };
}

=pod

=head2 get_withdrawal_limits

get withdraw limits

=cut

sub get_withdrawal_limits {
    my $client = shift;

    my $withdrawal_limits = $client->get_promocode_dependent_limit();

    my $max_withdrawal = 0;
    if ($client->default_account) {
        my $balance = $client->default_account->balance;
        $max_withdrawal = List::Util::max(0, $balance - $withdrawal_limits->{'frozen_free_gift'});
    }

    $withdrawal_limits->{'max_withdrawal'} = $max_withdrawal;

    return $withdrawal_limits;
}

=head2 user

    my $user = $client->user;
returns the user associated with the client : C<BOM::User>

=cut

sub user {
    my $self = shift;

    my $id = $self->binary_user_id;
    my $user;

    # Use binary_user_id to get the user
    $user = BOM::User->new(id => $id) if $id;
    # Fall back to loginid if binary_user_id does not work
    $user ||= BOM::User->new(loginid => $self->loginid);
    # Fall back to email if loginid does not work
    # in case that the user object is created but the client has not been registered into it.
    $user ||= BOM::User->new(email => $self->email);

    return $user;
}

=head2 is_available

return false if client is disabled or is duplicated account

=cut

sub is_available {
    my $self = shift;
    foreach my $status (qw(disabled duplicate_account)) {
        return 0 if $self->status->$status();
    }
    return 1;
}

sub real_account_siblings_information {
    my ($self, %args) = @_;
    my $include_disabled = $args{include_disabled} // 1;
    my $include_self     = $args{include_self}     // 1;

    my $user = $self->user;
    # return empty if we are not able to find user, this should not
    # happen but added as additional check
    return {} unless $user;

    my @clients = $user->clients(include_disabled => $include_disabled);

    # filter out virtual clients
    @clients = grep { not $_->is_virtual } @clients;

    my $siblings;
    foreach my $cl (@clients) {
        my $acc = $cl->default_account;

        $siblings->{$cl->loginid} = {
            loginid              => $cl->loginid,
            landing_company_name => $cl->landing_company->short,
            currency => $acc ? $acc->currency_code() : '',
            balance => $acc ? formatnumber('amount', $acc->currency_code(), $acc->balance) : "0.00",
            }
            unless (!$include_self && ($cl->loginid eq $self->loginid));
    }

    return $siblings;
}

sub is_tnc_approval_required {
    my $self = shift;

    return 0 if $self->is_virtual;
    return 0 unless $self->landing_company->tnc_required;

    my $current_tnc_version = BOM::Config::Runtime->instance->app_config->cgi->terms_conditions_version;
    my $client_tnc_status   = $self->status->tnc_approval;

    return 1 if (not $client_tnc_status or ($client_tnc_status->{reason} ne $current_tnc_version));

    return 0;
}

sub user_id {
    my $self = shift;
    return $self->binary_user_id // $self->user->{id};
}

sub status {
    my $self = shift;
    if (not $self->{status}) {
        $self->set_db('write') unless $self->get_db eq 'write';
        $self->{status} = BOM::User::Client::Status->new({
            client_loginid => $self->loginid,
            dbic           => $self->db->dbic
        });
    }

    return $self->{status};
}

sub is_pa_and_authenticated {
    my $self = shift;
    return 0 unless my $pa = $self->get_payment_agent();
    return $pa->is_authenticated ? 1 : 0;
}

sub is_same_user_as {
    my ($self, $other_client) = @_;

    return 0 unless $self;

    return 0 unless $other_client;

    return $self->binary_user_id == $other_client->binary_user_id ? 1 : 0;
}

=head2 get_mt5_details

returns hashref contains information we need for MT5 clients

=cut

sub get_mt5_details {
    my $self = shift;
    return {
        name    => $self->first_name . ' ' . $self->last_name,
        email   => $self->email,
        address => $self->address_1,
        phone   => $self->phone,
        state   => $self->state,
        city    => $self->city,
        zipCode => $self->postcode,
        country => Locale::Country::Extra->new()->country_from_code($self->residence),
    };
}

=head2 missing_requirements

Returns a list of missing entries of fields of a given requirement (defaults to signup requirement).

=cut

sub missing_requirements {
    my $self = shift;
    my $requirement = shift // "signup";

    my $requirements = $self->landing_company->requirements->{$requirement};
    my @missing;

    for my $detail (@$requirements) {
        push(@missing, $detail) unless $self->$detail;
    }

    return @missing;
}

=head2 is_region_eu

return 1 or 0 according to client's landing company or the residence for VRT client.

=cut

sub is_region_eu {
    my ($self) = @_;

    if ($self->is_virtual) {

        my $countries_instance = request()->brand->countries_instance;
        my $company            = $countries_instance->real_company_for_country($self->residence);

        return LandingCompany::Registry->new->get($company)->is_eu;
    } else {
        return $self->landing_company->is_eu;
    }

}

=head2 get_open_contracts

Returns the list of open contracts for a given client

=cut

sub get_open_contracts {
    my $client = shift;

    return BOM::Database::ClientDB->new({
            client_loginid => $client->loginid,
            operation      => 'replica',
        })->getall_arrayref('select * from bet.get_open_bets_of_account(?,?,?)', [$client->loginid, $client->currency, 'false']);
}

=head2 increment_social_responsibility_values

Pass in an hashref and increment the social responsibility values in redis

=cut

sub increment_social_responsibility_values {
    my ($client, $sr_hashref) = @_;
    my $loginid = $client->loginid;

    my $hash_name  = 'social_responsibility';
    my $event_name = $loginid . '_sr_check';

    my $redis = BOM::Config::RedisReplicated::redis_events_write();

    foreach my $attribute (keys %$sr_hashref) {
        my $field_name = $loginid . '_' . $attribute;
        my $value      = $sr_hashref->{$attribute};

        $redis->hincrbyfloat($hash_name, $field_name, $value);
    }

    # This is only set once; there is no point to queue again and again
    # We only queue if the client is at low-risk only (low-risk means it is not in the hash)
    BOM::Platform::Event::Emitter::emit('social_responsibility_check', {loginid => $loginid})
        if (!$redis->get($loginid . '_sr_risk_status') && $redis->hsetnx($hash_name, $event_name, 1));

    return undef;
}

=head2 is_verification_required

Check if client needs account verifcation
(both proof of identity and proof of address)

=begin comment

These are the current regulations for when do we
need to ask client to submit proof of identity (POI)
and proof of address (POA)

    Labuan
      POI: Upon signup
      POA: Upon signup
    Vanuatu
      POI: Upon signup
      POA: Upon signup
    CR
      POI: High risk, withdrawals above 8k
      POA: High risk, withdrawals above 8k
    MF
      POI: Upon signup
      POA: Upon signup
    MLT
      POI: Upon first successful deposit
      POA: Upon first successful deposit
    MX
      POI: If ProveID fails or insufficient scores / high risk status
      POA: If ProveID fails or insufficient scores / high risk status

Currently both requirements are same so currently the sub has no
separate logic for them.

=end comment
=cut

sub is_verification_required {
    my ($self, %args) = @_;

    return 0 if $self->is_virtual;

    return 0 if $self->fully_authenticated and $self->status->age_verification;

    if ($args{check_authentication_status}) {
        return 1 if ($self->authentication_status // '') eq 'needs_action';
        return 1 if ($self->residence eq 'gb' and not $self->get_authentication('ID_ONLINE'));
    }

    # applicable for all landing companies
    return 1 if ($self->aml_risk_classification // '') eq 'high';

    return 1 if ($self->landing_company->short =~ /^(?:malta|iom)$/ and $self->residence ne 'gb' and $self->has_deposits());

    return 1 if ($self->residence eq 'gb' and not $self->status->age_verification and $self->status->unwelcome);

    return 1 if $self->landing_company->short eq 'maltainvest';

    # we need to check if mt5 group is for
    # labuan - regulated one, if yes then it needs authentication
    return 1 if $self->user->has_mt5_regulated_account();

    return 0;
}

=head2 is_document_expiry_check_required

Check if we need to validate for expired documents

=cut

sub is_document_expiry_check_required {
    my $self = shift;

    return 1 if $self->landing_company->documents_expiration_check_required();

    return 1 if ($self->aml_risk_classification // '') eq 'high';

    return 0;
}

=head2 is_document_expiry_check_required_mt5

Check if we need to validate for expired documents

In addition to is_document_expiry_check_required it
checks if user has mt5 regulated account

Separate sub is needed as don't want to block normal
cashier for client if they have mt5 regulated accounts

=cut

sub is_document_expiry_check_required_mt5 {
    my $self = shift;

    return 1 if $self->is_document_expiry_check_required();

    return 1 if $self->user->has_mt5_regulated_account();

    return 0;
}

=head2 increment_qualifying_payments

Pass in a hashref and increment the qualifying payment check values, which
is either deposit or withdrawals.

If no key is present, a new key is set with an expiry of 30 days (Regulation as at 14th August, 2019)
Otherwise, increment existing key

=cut

sub increment_qualifying_payments {
    my ($client, $args) = @_;
    my $loginid = $client->loginid;

    my $redis     = BOM::Config::RedisReplicated::redis_events();
    my $redis_key = $loginid . '_' . $args->{action} . '_qualifying_payment_check';

    my $payment_check_limits = BOM::Config::payment_limits()->{qualifying_payment_check_limits}->{$client->landing_company->short};

    if ($redis->exists($redis_key)) {
        # abs() is used, as withdrawal transactions have negative amount
        $redis->incrbyfloat($redis_key => abs($args->{amount}));
    } else {
        $redis->set(
            $redis_key => $args->{amount},
            EX         => 86400 * $payment_check_limits->{for_days});
    }

    my $event_name = $loginid . '_qualifying_payment_check';
    BOM::Platform::Event::Emitter::emit('qualifying_payment_check', {loginid => $loginid}) if $redis->setnx($event_name, 1);

    return undef;
}

=pod

=head2 format_input_details

format the input fields for new_account and set_settings and backoffice

=over 4

=item * $args

Hashref of the input fields

=back

Return {
    error   => C<error_code>
}

=cut

sub format_input_details {
    my ($self, $args) = @_;

    my %format = (
        first_name => sub { trim(shift) },
        last_name  => sub { trim(shift) },
        phone      => sub { BOM::User::Phone::format_phone(shift) || die "InvalidPhone\n" },
        date_of_birth => sub {
            eval { Date::Utility->new(shift)->date } // die "InvalidDateOfBirth\n";
        },
    );

    try {
        $args->{$_} = $format{$_}->($args->{$_}) for grep { exists $format{$_} } keys %$args;
        return undef;
    }
    catch {
        chomp(my $err = $@);
        return {error => $err || 'UnknownError'};
    }
}

=pod

=head2 validate_common_account_details

common client details validation for new_account and set_settings and backoffice

=over 4

=item * $args

Hashref of the input fields

=back

Return {
    error   => C<error_code>
    details => C<detail info>
}

=cut

sub validate_common_account_details {
    my ($client, $args) = @_;

    my $residence = $client->residence;
    try {
        if ($args->{date_of_birth}) {
            _validate_dob($args->{date_of_birth}, $residence);
        }

        die "NeedBothSecret\n" if (($args->{secret_answer} // $client->secret_answer) xor($args->{secret_question} // $client->secret_question));

        die "InvalidPlaceOfBirth\n" if ($args->{place_of_birth} and not Locale::Country::code2country($args->{place_of_birth}));

        my $brand = request()->brand;

        die "InvalidCitizenship\n"
            if ($args->{'citizen'} && !defined $brand->countries_instance->countries->country_from_code($args->{'citizen'}));

        die "invalid UK postcode\n" if ($residence eq 'gb' and not($args->{address_postcode} // $client->address_postcode));

        die "invalid PO Box\n"
            if (($args->{address_line_1} || '') =~ /p[\.\s]+o[\.\s]+box/i
            or ($args->{address_line_2} || '') =~ /p[\.\s]+o[\.\s]+box/i);

        die "No promotion code was provided\n" if (trim($args->{promo_code_status}) and not(trim($args->{promo_code}) // $client->promo_code));

        return undef;
    }
    catch {
        chomp(my $err = $@);

        return {error => $err || 'UnknownError'};
    }
}

sub _validate_dob {
    my ($dob, $residence) = @_;

    my $dob_date = eval { Date::Utility->new($dob) };
    die "InvalidDateOfBirth\n" unless $dob_date;

    my $countries_instance = request()->brand->countries_instance;

    # Get the minimum age from the client's residence
    my $min_age = $countries_instance && $countries_instance->minimum_age_for_country($residence);
    die "InvalidResidence\n" unless $min_age;

    my $minimum_date = Date::Utility->new->minus_time_interval($min_age . 'y');
    die "BelowMinimumAge\n" if $dob_date->is_after($minimum_date);

    return undef;
}

=pod

=head2 validate_fields_immutable

check if any fields_immutable is changed

=over 4

=item * $args

Hashref of the input fields

=back

Return {
    error   => C<error_code>
    details => C<field>
}

=cut

sub validate_fields_immutable {
    my ($self, $args) = @_;

    #fields not allow to change once been set
    my @fields_immutable =
        qw/place_of_birth date_of_birth salutation first_name last_name citizen account_opening_reason secret_answer secret_question/;

    for my $field (@fields_immutable) {
        #if the input field value is differnt from self setting, means it is been changed
        if ($args->{$field} and $self->$field and ($args->{$field} ne $self->$field)) {
            if ($self->landing_company->is_field_changeable_before_auth($field)) {
                return {
                    error   => 'NoChangeAfterAuth',
                    details => $field
                } if $self->fully_authenticated();
            } else {
                return {
                    error   => 'ImmutableField',
                    details => $field
                };
            }
        }
    }
    return undef;
}

=pod

=head2 check_duplicate_account

check if the input fields match any exists account

=over 4

=item * $args

Hashref of the input fields

=back

Return undef if there is not need to check for duplicate account or if there is no duplicate account found for the given user information

Return {
    error   => C<error_code>
    details => C<dup_account_details>
}

=cut

sub check_duplicate_account {
    my ($client, $args) = @_;

    # Get target broker code either from $args or client itself
    my $target_broker = $args->{broker_code} // $client->broker_code;

    # If client is going to update his virtual account there is no need to check for duplicate account
    return undef if $target_broker =~ BOM::User::VIRTUAL_REGEX();

    # Get what details we need to check signup has different detail than BO check
    my $duplicate_check = $args->{checks} // ['first_name', 'last_name', 'date_of_birth', 'phone'];
    if (any { $args->{$_} and $args->{$_} ne $client->$_ } @$duplicate_check) {

        my $dup_details = {
            email          => $client->email,
            exclude_status => ['duplicate_account', 'disabled'],
        };
        $dup_details->{$_} = $args->{$_} || $client->$_ for @$duplicate_check;
        #name + dob is one group to check, phone is another independent condition
        #current logic is we only check phone when it is changed
        delete $dup_details->{phone} unless $args->{phone} and $args->{phone} ne $client->phone;
        my @dup_account_details = BOM::Database::ClientDB->new({broker_code => $target_broker})->get_duplicate_client($dup_details);

        return {
            error   => 'DuplicateAccount',
            details => \@dup_account_details
        } if scalar @dup_account_details;
    }
    return undef;
}

=head1 METHODS - P2P cashier

=cut

use constant {
    # For some currency pairs we need to have limit so big for example: VND/BTC
    # Also this limit may need to be adjusted in future.
    P2P_RATE_LOWER_LIMIT => 0.000001,    # We need it because 0.000001 < 0.1**6 is true
    P2P_RATE_UPPER_LIMIT => 10**9,
    P2P_RATE_PRECISION   => 6,

    P2P_MAXIMUM_ACTIVE_ADVERTS     => 10,
    P2P_COUNTERYPARTY_TYPE_MAPPING => {
        buy  => 'sell',
        sell => 'buy',
    },
};

=head2 p2p_advertiser_create

Attempts to register client as an advertiser.
Returns the advertiser info or dies with error code.

=cut

sub p2p_advertiser_create {
    my ($client, %param) = @_;

    die +{error_code => 'AlreadyRegistered'} if $client->_p2p_advertisers(loginid => $client->loginid)->[0];

    die +{error_code => 'AdvertiserNameRequired'} unless trim($param{name});

    return $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref('SELECT * FROM p2p.advertiser_create(?, ?, ?, ?, ?)',
                undef, $client->loginid, @param{qw/name default_advert_description payment_info contact_info/});
        });
}

=head2 p2p_advertiser_info

Returns advertiser info of param{id} otherwise current client.

=cut

sub p2p_advertiser_info {
    my ($client, %param) = @_;

    my $advertiser;
    if (exists $param{id}) {
        $advertiser = $client->_p2p_advertisers(id => $param{id})->[0];
    } else {
        $advertiser = $client->_p2p_advertisers(loginid => $client->loginid)->[0];
    }

    return unless $advertiser;
    return $client->_advertiser_details($advertiser);
}

=head2 p2p_advertiser_update

Updates the client advertiser info with fields in %param.
Returns latest advertiser info.

=cut

sub p2p_advertiser_update {
    my ($client, %param) = @_;

    my $advertiser_info = $client->p2p_advertiser_info;
    die +{error_code => 'AdvertiserNotRegistered'} unless $advertiser_info;
    die +{error_code => 'AdvertiserNotApproved'} unless $advertiser_info->{is_approved} or defined $param{is_approved};

    if (exists $param{name}) {
        $param{name} = trim($param{name});
        die +{error_code => 'AdvertiserNameRequired'} unless $param{name};
    }

    # Return the current information of the advertiser if nothing changed
    return $advertiser_info unless grep { exists $advertiser_info->{$_} and $param{$_} ne $advertiser_info->{$_} } keys %param;

    my $update = $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref(
                'SELECT * FROM p2p.advertiser_update(?, ?, ?, ?, ?, ?, ?)',
                undef,
                $advertiser_info->{id},
                @param{qw/is_approved is_listed name default_advert_description payment_info contact_info/});
        });

    return $client->_advertiser_details($update);
}

=head2 p2p_advertiser_adverts

Returns a list of adverts belonging to current client

=cut

sub p2p_advertiser_adverts {
    my ($client, %param) = @_;

    my $advertiser_info = $client->_p2p_advertisers(loginid => $client->loginid)->[0];
    die +{error_code => 'AdvertiserNotRegistered'} unless $advertiser_info;

    my ($limit, $offset) = @param{qw/limit offset/};
    die +{error_code => 'InvalidListLimit'}  if defined $limit  && $limit <= 0;
    die +{error_code => 'InvalidListOffset'} if defined $offset && $offset < 0;

    my $list = $client->_p2p_adverts(%param, advertiser_id => $advertiser_info->{id});
    return $client->_advert_details($list);
}

=head2 p2p_advert_create

Creates an advert with %param with client as advertiser.
Returns new advert or dies with error code.

=cut

sub p2p_advert_create {
    my ($client, %param) = @_;

    my $advertiser_info = $client->_p2p_advertisers(loginid => $client->loginid)->[0];
    die +{error_code => 'AdvertiserNotRegistered'} unless $advertiser_info;
    die +{error_code => 'AdvertiserNotApproved'}   unless $advertiser_info->{is_approved};

    $param{account_currency} = $client->currency;

    _validate_advert_amounts(%param);

    my $active_adverts_count = $client->_p2p_adverts(
        advertiser_loginid => $client->loginid,
        is_active          => 1,
    )->@*;
    die +{error_code => 'AdvertMaxExceeded'} if $active_adverts_count >= P2P_MAXIMUM_ACTIVE_ADVERTS;

    $param{country} //= $client->residence;

    $param{local_currency} //= $client->local_currency || die +{error_code => 'NoLocalCurrency'};

    if ($param{rate} < P2P_RATE_LOWER_LIMIT) {
        die +{
            error_code     => 'RateTooSmall',
            message_params => [sprintf('%.' . P2P_RATE_PRECISION . 'f', P2P_RATE_LOWER_LIMIT)]};
    }

    if ($param{rate} > P2P_RATE_UPPER_LIMIT) {
        die +{
            error_code     => 'RateTooBig',
            message_params => [sprintf('%.02f', P2P_RATE_UPPER_LIMIT)],
        };
    }

    my $min_price = $param{rate} * $param{min_order_amount};
    if (financialrounding('amount', $param{local_currency}, $min_price) == 0) {
        die +{error_code => 'MinPriceTooSmall'};
    }

    die +{error_code => 'AdvertPaymentContactInfoNotAllowed'}
        if $param{type} eq 'buy' && (trim($param{payment_info}) || trim($param{contact_info}));

    die +{error_code => 'AdvertPaymentInfoRequired'}
        if $param{type} eq 'sell' && !trim($param{payment_info});

    die +{error_code => 'AdvertContactInfoRequired'}
        if $param{type} eq 'sell' && !trim($param{contact_info});

    my $advert = $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref(
                'SELECT * FROM p2p.advert_create(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                undef,
                $advertiser_info->{id},
                @param{
                    qw/type account_currency local_currency country amount rate min_order_amount max_order_amount description payment_method payment_info contact_info/
                });
        });

    return $client->_advert_details([$advert])->[0];
}

=head2 p2p_advert_info

Get a single advert by $id.

=cut

sub p2p_advert_info {
    my ($client, %param) = @_;
    my $id = $param{id} // return;
    my $list = $client->_p2p_adverts(id => $id);
    return $client->_advert_details($list)->[0];
}

=head2 p2p_advert_list

Get adverts for client view.
Inactive adverts, unlisted or unapproved advertisers, and max < min are excluded.

=cut

sub p2p_advert_list {
    my ($client, %param) = @_;

    my ($limit, $offset) = @param{qw/limit offset/};
    die +{error_code => 'InvalidListLimit'}  if defined $limit  && $limit <= 0;
    die +{error_code => 'InvalidListOffset'} if defined $offset && $offset < 0;

    if ($param{counterparty_type}) {
        $param{type} = P2P_COUNTERYPARTY_TYPE_MAPPING->{$param{counterparty_type}};
    }

    my $list = $client->_p2p_adverts(
        %param,
        is_active              => 1,
        can_order              => 1,
        advertiser_is_approved => 1,
        advertiser_is_listed   => 1,
    );
    return $client->_advert_details($list, $param{amount});
}

=head2 p2p_advert_update

Updates the advert of $param{id} with fields in %param.
Client must be advert owner.
Cannot delete if there are open orders.
Returns latest advert info or dies with error code.

=cut

sub p2p_advert_update {
    my ($client, %param) = @_;

    my $id = delete $param{id} or die +{error_code => 'AdvertNotFound'};
    my $advert_info = $client->_p2p_adverts(id => $id)->[0] or die +{error_code => 'AdvertNotFound'};

    die +{error_code => 'PermissionDenied'} if $advert_info->{advertiser_loginid} ne $client->loginid;

    # return current advert details if nothing changed
    return $client->_advert_details([$advert_info])->[0]
        unless $param{delete}
        or grep { exists $advert_info->{$_} and $param{$_} ne $advert_info->{$_} } keys %param;

    if ($param{delete}) {
        my $open_orders = $client->_p2p_orders(
            advert_id => $id,
            status => ['pending', 'buyer-confirmed'],
        );
        die +{error_code => 'OpenOrdersDeleteAdvert'} if @$open_orders;
    }

    my $update = $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref('SELECT * FROM p2p.advert_update(?, ?, ?, ?, ?, ?, ?)',
                undef, $id, @param{qw/is_active delete description payment_method payment_info contact_info/});
        });

    return $client->_advert_details([$update])->[0];
}

=head2 p2p_order_create

Creates an order for advert $param{advert_id} with %param for client.
Advert must be active. Advertiser must be active and authenticated.
Only one active order per advert per client is allowed.
Returns new order or dies with error code.
This will move funds from advertiser to escrow.

=cut

sub p2p_order_create {
    my ($client, %param) = @_;

    my ($advert_id, $amount, $expiry, $payment_info, $contact_info, $source) = @param{qw/advert_id amount expiry payment_info contact_info source/};

    $expiry //= BOM::Config::Runtime->instance->app_config->payments->p2p->order_timeout;

    my $advert_info = $client->_p2p_adverts(id => $advert_id)->[0];

    die +{error_code => 'AdvertNotFound'}       unless $advert_info;
    die +{error_code => 'AdvertIsDisabled'}     unless $advert_info->{is_active};
    die +{error_code => 'InvalidOrderCurrency'} unless $advert_info->{account_currency} eq $client->currency;
    die +{error_code => 'InvalidAdvertOwn'} if $advert_info->{advertiser_loginid} eq $client->loginid;

    die +{
        error_code => 'OrderMaximumExceeded',
        message_params =>
            [$advert_info->{account_currency}, formatnumber('amount', $advert_info->{account_currency}, $advert_info->{max_order_amount}),]}
        if ($advert_info->{max_order_amount} && $amount > $advert_info->{max_order_amount})
        || $amount > $advert_info->{amount}
        || $amount > $advert_info->{remaining};

    die +{
        error_code => 'OrderMinimumNotMet',
        message_params =>
            [$advert_info->{account_currency}, formatnumber('amount', $advert_info->{account_currency}, $advert_info->{min_order_amount}),]}
        if $amount < ($advert_info->{min_order_amount} // 0);

    my $advertiser_info = $client->_p2p_advertisers(id => $advert_info->{advertiser_id})->[0];
    die +{error_code => 'AdvertiserNotFound'}    unless $advertiser_info;
    die +{error_code => 'AdvertiserNotListed'}   unless $advertiser_info->{is_listed};
    die +{error_code => 'AdvertiserNotApproved'} unless $advertiser_info->{is_approved};

    if ($advert_info->{type} eq 'buy') {
        die +{error_code => 'InsufficientBalance'} if $client->account->balance < $amount;

        die +{error_code => 'OrderPaymentInfoRequired'} if !trim($param{payment_info});
        die +{error_code => 'OrderContactInfoRequired'} if !trim($param{contact_info});
    } elsif ($advert_info->{type} eq 'sell') {
        my $advertiser = BOM::User::Client->new({loginid => $advert_info->{advertiser_loginid}});
        die +{error_code => 'MaximumExceeded'} if $advertiser->account->balance < $amount;
        die +{error_code => 'OrderPaymentContactInfoNotAllowed'} if $payment_info or $contact_info;
        ($payment_info, $contact_info) = $advert_info->@{qw/payment_info contact_info/};
    } else {
        die 'Invalid advert type ' . ($advert_info->{type} // 'undef') . ' for advert ' . $advert_info->{id};
    }

    my $escrow = $client->p2p_escrow;

    die +{error_code => 'EscrowNotFound'} unless $escrow;

    my $open_orders = $client->_p2p_orders(
        advert_id => $advert_id,
        loginid   => $client->loginid,
        status => ['pending', 'buyer-confirmed'],
    );

    die +{error_code => 'OrderAlreadyExists'} if @{$open_orders};

    my $txn_time = Date::Utility->new->datetime;
    my $order    = $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref('SELECT * FROM p2p.order_create(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                undef, $advert_id, $client->loginid, $escrow->loginid, $amount, $expiry, $payment_info, $contact_info, $source, $client->loginid,
                undef, $txn_time);
        });

    return $client->_order_details([$order])->[0];
}

=head2 p2p_order_info

Return a single order of $param{id}

=cut

sub p2p_order_info {
    my ($client, %param) = @_;

    my $id = $param{id} // return;
    my $list = $client->_p2p_orders(id => $id);
    return $client->_order_details($list)->[0];
}

=head2 p2p_order_list

Get orders filtered by %param.

=cut

sub p2p_order_list {
    my ($client, %param) = @_;

    $param{loginid} = $client->loginid;

    my ($limit, $offset) = @param{qw/limit offset/};
    die +{error_code => 'InvalidListLimit'}  if defined $limit  && $limit <= 0;
    die +{error_code => 'InvalidListOffset'} if defined $offset && $offset < 0;

    my $list = $client->_p2p_orders(%param);
    return $client->_order_details($list);
}

=head2 p2p_order_confirm

Confirms the order of $param{id} and returns updated order.
Client = client, type = buy: order is buyer-confirmed
Client = client, type = sell: order is completed
Client = advertiser, type = buy: order is completed
Client = advertiser, type = sell: order is buyer-confirmed
Otherwise dies with error code.

=cut

sub p2p_order_confirm {
    my ($client, %param) = @_;

    my $id = $param{id} // die +{error_code => 'OrderNotFound'};
    my $order_info = $client->_p2p_orders(id => $id)->[0];
    die +{error_code => 'OrderNotFound'} unless $order_info;
    die +{error_code => 'OrderNoEditExpired'} if $order_info->{is_expired};

    my $ownership_type = _order_ownership_type($client, $order_info);

    my $method = $client->can('_' . $ownership_type . '_' . $order_info->{type} . '_confirm');
    die +{error_code => 'PermissionDenied'} unless $method;

    return $client->$method($order_info, $param{source});
}

=head2 p2p_order_cancel

Cancels the order of $param{id}.
Order must belong to the buyer.
Order must be in pending status.
This will move funds from escrow to seller.

=cut

sub p2p_order_cancel {
    my ($client, %param) = @_;

    my $id = $param{id} // die +{error_code => 'OrderNotFound'};
    my $order = $client->_p2p_orders(id => $id)->[0];

    die +{error_code => 'OrderNotFound'} unless $order;
    die +{error_code => 'OrderNoEditExpired'}    if $order->{is_expired};
    die +{error_code => 'OrderAlreadyCancelled'} if $order->{status} eq 'cancelled';

    my $ownership_type = _order_ownership_type($client, $order);

    die +{error_code => 'PermissionDenied'}
        unless ($ownership_type eq 'client' and $order->{type} eq 'buy')
        or ($ownership_type eq 'advertiser' and $order->{type} eq 'sell');
    die +{error_code => 'PermissionDenied'} unless $order->{status} eq 'pending';

    my $escrow    = $client->p2p_escrow;
    my $timed_out = 0;                     # order will have cancelled status

    my $txn_time = Date::Utility->new->datetime;
    return $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref('SELECT * FROM p2p.order_cancel(?, ?, ?, ?, ?, ?)',
                undef, $id, $escrow->loginid, $param{source}, $client->loginid, $timed_out, $txn_time);
        });
}

=head2 expire_p2p_order

Expire order in different states.
Method returns order data in case if state of order was changed.

=cut

sub p2p_expire_order {
    my ($client, %param) = @_;

    my $id = $param{id} // die "no id provided to p2p_expire_order";
    my $order = $client->_p2p_orders(id => $id)->[0];
    die +{error_code => 'OrderNotFound'} unless $order;

    my $status = $order->{status};

    return unless $status =~ /^(pending|buyer-confirmed)$/;

    my $escrow = $client->p2p_escrow;
    die +{error_code => 'EscrowNotFound'} unless $escrow;

    my $txn_time  = Date::Utility->new->datetime;
    my $timed_out = 1;                              # order will have timed-out status

    return $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref('SELECT * FROM p2p.order_cancel(?, ?, ?, ?, ?, ?)',
                undef, $order->{id}, $escrow->loginid, $param{source}, $param{staff}, $timed_out, $txn_time);
        });
}

=head2 p2p_escrow

Gets the configured escrow account for clients currency and landing company.

=cut

sub p2p_escrow {
    my ($client) = @_;
    my ($broker, $currency) = ($client->broker_code, $client->currency);
    my @escrow_list = BOM::Config::Runtime->instance->app_config->payments->p2p->escrow->@*;

    foreach my $loginid (@escrow_list) {
        try {
            my $escrow = BOM::User::Client->new({loginid => $loginid});

            return $escrow if $escrow && $escrow->broker eq $broker && $escrow->currency eq $currency;
        }
        catch {
            next;    # TODO: ideally, we should never have an error here, we should maybe log it?
        }
    }

    return undef;
}

=head1 Private P2P methods

=head2 _p2p_advertisers

Returns a list of advertisers filtered by id and/or loginid.

=cut

sub _p2p_advertisers {
    my ($client, %param) = @_;

    return $client->db->dbic->run(
        fixup => sub {
            $_->selectall_arrayref('SELECT * FROM p2p.advertiser_list(?, ?)', {Slice => {}}, @param{qw/id loginid/});
        });
}

=head2 _p2p_adverts

Gets adverts from DB

=cut

sub _p2p_adverts {
    my ($client, %param) = @_;

    my ($limit, $offset) = @param{qw/limit offset/};
    die +{error_code => 'InvalidListLimit'}  if defined $limit  && $limit <= 0;
    die +{error_code => 'InvalidListOffset'} if defined $offset && $offset < 0;

    $client->db->dbic->run(
        fixup => sub {
            $_->selectall_arrayref(
                'SELECT * FROM p2p.advert_list(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                {Slice => {}},
                @param{
                    qw/id account_currency advertiser_id advertiser_loginid is_active type can_order advertiser_is_listed advertiser_is_approved limit offset/
                });
        }) // [];
}

=head2 _p2p_orders

Gets orders from DB.
$param{loginid} will match on advert advertiser loginid or order client loginid.
$param{status} if provided must by an arrayref.

=cut

sub _p2p_orders {
    my ($client, %param) = @_;

    croak 'Invalid status format'
        if defined $param{status}
        && ref $param{status} ne 'ARRAY';

    my ($limit, $offset) = @param{qw/limit offset/};
    die +{error_code => 'InvalidListLimit'}  if defined $limit  && $limit <= 0;
    die +{error_code => 'InvalidListOffset'} if defined $offset && $offset < 0;

    return $client->db->dbic->run(
        fixup => sub {
            $_->selectall_arrayref(
                'SELECT * FROM p2p.order_list(?, ?, ?, ?, ?, ?)',
                {Slice => {}},
                @param{qw/id advert_id loginid status limit offset/});
        }) // [];
}

=head2 _order_ownership_type

Returns whether client is the buyer or seller of the order.

=cut

sub _order_ownership_type {
    my ($client, $order_info) = @_;

    return 'client' if $order_info->{client_loginid} eq $client->loginid;

    return 'advertiser' if $order_info->{advertiser_loginid} eq $client->loginid;

    return '';
}

=head2 _client_buy_confirm

Sets order client confirmed = true and status = buyer-confirmed.

=cut

sub _client_buy_confirm {
    my ($client, $order_info) = @_;

    die +{error_code => 'OrderAlreadyConfirmed'} if $order_info->{status} =~ /^(buyer-confirmed|completed)$/;

    die +{error_code => 'InvalidStateForConfirmation'} if $order_info->{status} ne 'pending';

    return $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref('SELECT * FROM p2p.order_confirm_client(?, ?)', undef, $order_info->{id}, 1);
        });
}

=head2 _advertiser_buy_confirm

Sets order advertiser_confirmed = true and completes the order in a single transaction.
Completing the order moves funds from escrow to client.

=cut

sub _advertiser_buy_confirm {
    my ($client, $order_info, $source) = @_;

    die +{error_code => 'OrderAlreadyConfirmed'}       if $order_info->{status} eq 'completed';
    die +{error_code => 'InvalidStateForConfirmation'} if $order_info->{status} ne 'buyer-confirmed';

    my $escrow   = $client->p2p_escrow;
    my $txn_time = Date::Utility->new->datetime;
    return $client->db->dbic->txn(
        fixup => sub {
            $_->do('SELECT * FROM p2p.order_confirm_advertiser(?, ?)', undef, $order_info->{id}, 1);
            return $_->selectrow_hashref('SELECT * FROM p2p.order_complete(?, ?, ?, ?, ?)',
                undef, $order_info->{id}, $escrow->loginid, $source, $client->loginid, $txn_time);
        });
}

=head2 _client_sell_confirm

Sets order client_confirmed = true and completes the order in a single transaction.
Completing the order moves funds from escrow to advertiser.

=cut

sub _client_sell_confirm {
    my ($client, $order_info, $source) = @_;

    die +{error_code => 'OrderAlreadyConfirmed'}       if $order_info->{status} eq 'completed';
    die +{error_code => 'InvalidStateForConfirmation'} if $order_info->{status} ne 'buyer-confirmed';

    my $escrow   = $client->p2p_escrow;
    my $txn_time = Date::Utility->new->datetime;
    return $client->db->dbic->txn(
        fixup => sub {
            $_->do('SELECT * FROM p2p.order_confirm_client(?, ?)', undef, $order_info->{id}, 1);
            return $_->selectrow_hashref('SELECT * FROM p2p.order_complete(?, ?, ?, ?, ?)',
                undef, $order_info->{id}, $escrow->loginid, $source, $client->loginid, $txn_time);
        });
}

=head2 _advertiser_sell_confirm

Sets order advertiser confirmed = true and status = buyer-confirmed

=cut

sub _advertiser_sell_confirm {
    my ($client, $order_info) = @_;

    die +{error_code => 'OrderAlreadyConfirmed'}       if $order_info->{status} =~ /^(buyer-confirmed|completed)$/;
    die +{error_code => 'InvalidStateForConfirmation'} if $order_info->{status} ne 'pending';

    return $client->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref('SELECT * FROM p2p.order_confirm_advertiser(?, ?)', undef, $order_info->{id}, 1);
        });

}

=head2 _advertiser_details

Prepares advertiser fields for client display.
Takes and returns single advertiser.

=cut

sub _advertiser_details {
    my ($client, $advertiser) = @_;

    return +{
        id                         => $advertiser->{id},
        name                       => $advertiser->{name},
        client_loginid             => $advertiser->{client_loginid},
        created_time               => Date::Utility->new($advertiser->{created_time})->epoch,
        is_approved                => $advertiser->{is_approved},
        is_listed                  => $advertiser->{is_listed},
        default_advert_description => $advertiser->{default_advert_description} // '',
        (
            $client->loginid eq $advertiser->{client_loginid}    # only advertiser themself can see these fields
            ? (
                payment_info => $advertiser->{payment_info} // '',
                contact_info => $advertiser->{contact_info} // '',
                )
            : ()
        ),
    };
}

=head2 _advert_details

Prepares advert fields for client display.
Takes and returns an arrayref of advert.

=cut

sub _advert_details {
    my ($client, $list, $amount) = @_;

    my @results;
    my $max_order = BOM::Config::Runtime->instance->app_config->payments->p2p->limits->maximum_order;

    for my $advert (@$list) {
        my $effective_max =
            List::Util::min($advert->{remaining}, $advert->{max_order_amount}, convert_currency($max_order, 'USD', $advert->{account_currency}));

        my $result = {
            account_currency  => $advert->{account_currency},
            country           => $advert->{country},
            created_time      => Date::Utility->new($advert->{created_time})->epoch,
            description       => $advert->{description} // '',
            id                => $advert->{id},
            is_active         => $advert->{is_active},
            local_currency    => $advert->{local_currency},
            payment_method    => $advert->{payment_method},
            type              => $advert->{type},
            counterparty_type => P2P_COUNTERYPARTY_TYPE_MAPPING->{$advert->{type}},
            price             => financialrounding('amount', $advert->{local_currency}, $advert->{rate} * ($amount // 1)),
            price_display     => formatnumber('amount', $advert->{local_currency}, $advert->{rate} * ($amount // 1)),
            rate              => $advert->{rate},
            rate_display      => _p2p_rate_format($advert->{rate}),
            min_order_amount_limit         => financialrounding('amount', $advert->{account_currency}, $advert->{min_order_amount}),
            min_order_amount_limit_display => formatnumber('amount',      $advert->{account_currency}, $advert->{min_order_amount}),
            max_order_amount_limit         => financialrounding('amount', $advert->{account_currency}, $effective_max),
            max_order_amount_limit_display => formatnumber('amount',      $advert->{account_currency}, $effective_max),
            (
                $client->loginid eq $advert->{advertiser_loginid}    # only advert owner can see these fields
                ? (
                    payment_info => $advert->{payment_info} // '',
                    contact_info => $advert->{contact_info} // '',
                    amount                   => financialrounding('amount', $advert->{account_currency}, $advert->{amount}),
                    amount_display           => formatnumber('amount',      $advert->{account_currency}, $advert->{amount}),
                    min_order_amount         => financialrounding('amount', $advert->{account_currency}, $advert->{min_order_amount}),
                    min_order_amount_display => formatnumber('amount',      $advert->{account_currency}, $advert->{min_order_amount}),
                    max_order_amount         => financialrounding('amount', $advert->{account_currency}, $advert->{max_order_amount}),
                    max_order_amount_display => formatnumber('amount',      $advert->{account_currency}, $advert->{max_order_amount}),
                    remaining_amount         => financialrounding('amount', $advert->{account_currency}, $advert->{remaining}),
                    remaining_amount_display => formatnumber('amount',      $advert->{account_currency}, $advert->{remaining}),
                    )
                : ()
            ),
            advertiser_details => {
                id   => $advert->{advertiser_id},
                name => $advert->{advertiser_name},
            },
        };

        push @results, $result;
    }

    return \@results;
}

=head2 _order_details

Prepares order fields for client display.
Takes and returns an arrayref of orders.

=cut

sub _order_details {
    my ($client, $list) = @_;
    my @results;

    for my $order (@$list) {
        my $result = +{
            account_currency   => $order->{account_currency},
            created_time       => Date::Utility->new($order->{created_time})->epoch,
            payment_info       => $order->{payment_info} // '',
            contact_info       => $order->{contact_info} // '',
            expiry_time        => Date::Utility->new($order->{expire_time})->epoch,
            id                 => $order->{id},
            is_incoming        => $client->loginid eq $order->{advertiser_loginid} ? 1 : 0,
            local_currency     => $order->{local_currency},
            amount             => financialrounding('amount', $order->{account_currency}, $order->{amount}),
            amount_display     => formatnumber('amount', $order->{account_currency}, $order->{amount}),
            price              => financialrounding('amount', $order->{local_currency}, $order->{advert_rate} * $order->{amount}),
            price_display      => formatnumber('amount', $order->{local_currency}, $order->{advert_rate} * $order->{amount}),
            rate               => $order->{advert_rate},
            rate_display       => _p2p_rate_format($order->{advert_rate}),
            status             => $order->{status},
            type               => $order->{type},
            advertiser_details => {
                id   => $order->{advertiser_id},
                name => $order->{advertiser_name},
            },
            advert_details => {
                id             => $order->{advert_id},
                description    => $order->{advert_description} // '',
                type           => $order->{advert_type},
                payment_method => $order->{advert_payment_method},
            },
        };

        push @results, $result;
    }

    return \@results;
}

=head2 _validate_advert_amounts

Validates advert amounts for p2p_advert_create.

=cut

sub _validate_advert_amounts {
    my %param = @_;

    if (my @invalid_fields = grep { ($param{$_} // 0) <= 0 } (qw(amount max_order_amount min_order_amount rate))) {
        die +{
            error_code => 'InvalidNumericValue',
            details    => {fields => \@invalid_fields},
        };
    }

    die +{error_code => 'MaximumExceeded'}
        if in_usd($param{amount}, uc $param{account_currency}) > BOM::Config::Runtime->instance->app_config->payments->p2p->limits->maximum_advert;

    my $maximum_order = BOM::Config::Runtime->instance->app_config->payments->p2p->limits->maximum_order;
    if (in_usd($param{max_order_amount}, uc $param{account_currency}) > $maximum_order) {
        die +{
            error_code     => 'MaxPerOrderExceeded',
            message_params => [$param{account_currency}, convert_currency($maximum_order, 'USD', $param{account_currency})],
        };
    }

    die +{error_code => 'InvalidMinMaxAmount'} unless $param{min_order_amount} <= $param{max_order_amount};
    die +{error_code => 'InvalidMaxAmount'}    unless $param{max_order_amount} <= $param{amount};

    return;
}

sub _p2p_rate_format {
    # We take Precision from constant but cut off tailing zeros
    return sprintf('%0.0' . P2P_RATE_PRECISION . 'f', shift()) =~ s/(?<=\.\d{2})(\d*?)0*$/$1/r;
}

=head1 METHODS - Payments

=cut

sub validate_payment {
    my ($self, %args) = @_;
    my $currency = $args{currency} || die "no currency\n";
    my $amount   = $args{amount}   || die "no amount\n";
    my $action_type = $amount > 0 ? 'deposit' : 'withdrawal';
    my $account = $self->default_account || die "no account\n";
    my $accbal  = $account->balance;
    my $acccur  = $account->currency_code();
    my $absamt  = abs($amount);

    die "Client\'s cashier is locked.\n"
        if $self->status->cashier_locked;

    die "Client is disabled.\n"
        if $self->status->disabled;

    die "Payment currency [$currency] not client currency [$acccur].\n"
        if $currency ne $acccur;

    if ($action_type eq 'deposit') {
        die "Deposits blocked for this Client.\n"
            if $self->status->unwelcome;

        if (    $self->landing_company->short eq 'malta'
            and $self->is_first_deposit_pending
            and ($args{payment_type} // '') eq 'affiliate_reward')
        {
            $self->{mlt_affiliate_first_deposit} = 1;
        }

        my $max_balance = $self->get_limit({'for' => 'account_balance'});
        die "Balance would exceed $max_balance limit [$currency] [" . $self->loginid . "] \n"
            if ($amount + $accbal) > $max_balance;

        if ($self->landing_company->short eq 'iom') {
            my $max_deposit_limits = $self->get_limits_for_max_deposit();

            # Call get_total_deposit and validate against limits
            if ($max_deposit_limits) {
                my $deposit_over_period = $self->db->dbic->run(
                    ping => sub {
                        my $sth = $_->prepare('SELECT payment.get_total_deposit(?,?,?,?)');
                        $sth->execute(
                            $self->loginid,
                            $max_deposit_limits->{begin},
                            $max_deposit_limits->{end},
                            "{mt5_transfer}"    # exclude mt5 transfers
                        );
                        return $sth->fetchrow_arrayref()->[0];
                    });
                die
                    "Deposit exceeds limit [$max_deposit_limits->{max_deposit}]. Aggregated deposit over period [$deposit_over_period]. Current amount [$amount]."
                    if ($deposit_over_period + $amount) > $max_deposit_limits->{max_deposit};
            }
        }
    }

    if ($action_type eq 'withdrawal') {
        die "Withdrawal is disabled.\n"
            if $self->status->withdrawal_locked;

        die "Missing personal details required for withdrawal.\n"
            if ($self->missing_requirements('withdrawal'));

        die "Withdrawal amount [$currency $absamt] exceeds client balance [$currency $accbal].\n"
            if financialrounding('amount', $currency, $absamt) > financialrounding('amount', $currency, $accbal);

        if (my $frozen = $self->get_withdrawal_limits->{frozen_free_gift}) {
            my $unfrozen = financialrounding('amount', $currency, $accbal - $frozen);
            die sprintf "Withdrawal is [%s %s] but balance [%s] includes frozen bonus [%s].\n", $currency,
                formatnumber('amount', $currency, $absamt), formatnumber('amount', $currency, $accbal), formatnumber('amount', $currency, $frozen)
                if financialrounding('amount', $currency, $absamt) > financialrounding('amount', $currency, $unfrozen);
        }

        return 1 if $self->fully_authenticated;
        # disable withdrawal limit for rpc/internal_transfer_exclude_limit
        return 1 if $args{internal_transfer};

        my $lc = $self->landing_company->short;
        my $lc_limits;
        my $withdrawal_limits = BOM::Config::payment_limits()->{withdrawal_limits};
        $lc_limits = $withdrawal_limits->{$lc};
        die "Invalid landing company - $lc\n" unless $lc_limits;

        # for CR & CH only check for lifetime limits (in client's currency)
        if ($lc =~ /^(?:svg|champion)$/) {
            # Withdrawals to date
            my $wd_epoch    = $account->total_withdrawals();
            my $lc_currency = $lc_limits->{currency};

            # If currency is not the same as the lc's currency, convert withdrawals so far and withdrawal amount
            if ($currency ne $lc_currency) {
                $wd_epoch = convert_currency($wd_epoch, $currency, $lc_currency) if $wd_epoch > 0;
                $absamt   = convert_currency($absamt,   $currency, $lc_currency) if $absamt > 0;
            }

            # total withdrawal inclusive of this one
            my $total_wd = financialrounding('amount', $currency, $wd_epoch + $absamt);
            my $wd_left  = financialrounding('amount', $currency, $lc_limits->{lifetime_limit} - $wd_epoch);

            if (financialrounding('amount', $currency, $absamt) > financialrounding('amount', $currency, $wd_left)) {
                if ($currency ne $lc_currency) {
                    die sprintf "Withdrawal amount [%s %s] exceeds withdrawal limit [%s %s].\n", $currency,
                        formatnumber('amount', $currency, convert_currency($absamt, $lc_currency, $currency)),
                        $currency, formatnumber('amount', $currency, convert_currency($wd_left, $lc_currency, $currency));
                } else {
                    die sprintf "Withdrawal amount [%s %s] exceeds withdrawal limit [%s %s].\n", $currency,
                        formatnumber('amount', $currency, $absamt),
                        $currency, formatnumber('amount', $currency, $wd_left);
                }
            }

            if ($total_wd >= financialrounding('amount', $currency, $lc_limits->{lifetime_limit})) {
                BOM::Platform::Event::Emitter::emit('withdrawal_limit_reached', {loginid => $self->loginid});
            }

        } else {
            my $for_days = $lc_limits->{for_days};
            my $since    = Date::Utility->new->minus_time_interval("${for_days}d");

            # Obtains limit in EUR
            my $wd_eur_since_limit = $lc_limits->{limit_for_days};
            my $wd_eur_epoch_limit = $lc_limits->{lifetime_limit};

            # Obtains payments over the lifetime of the account
            my $wd_epoch = $account->total_withdrawals();

            # Obtains payments over the last x days
            my $wd_since = $account->total_withdrawals($since);

            # Converts payments over lifetime of the account and the last x days into EUR
            my $wd_eur_since = convert_currency($wd_since, $currency, 'EUR');
            my $wd_eur_epoch = convert_currency($wd_epoch, $currency, 'EUR');

            # Amount withdrawable over the last x days in EUR
            my $wd_eur_since_left = $wd_eur_since_limit - $wd_eur_since;

            # Amount withdrawable over the lifetime of the account in EUR
            my $wd_eur_epoch_left = $wd_eur_epoch_limit - $wd_eur_epoch;

            # Withdrawable amount left between the two amounts - The smaller is used
            my $wd_eur_left = List::Util::min($wd_eur_since_left, $wd_eur_epoch_left);

            # Withdrawable amount is converted from EUR to clients' currency and rounded
            my $wd_left = financialrounding('amount', $currency, convert_currency($wd_eur_left, 'EUR', $currency));

            if (financialrounding('amount', $currency, $absamt) > financialrounding('amount', $currency, $wd_left)) {
                # lock cashier and unwelcome if its MX (as per compliance, check with compliance if you want to remove it)
                if ($lc eq 'iom') {
                    $self->status->multi_set_clear({
                        set        => ['cashier_locked', 'unwelcome'],
                        staff_name => 'system',
                        reason     => 'Exceeds withdrawal limit',
                    });
                }
                my $msg = "Withdrawal amount [%s %s] exceeds withdrawal limit [EUR %s]";
                my @values = ($currency, formatnumber('amount', $currency, $absamt), formatnumber('amount', $currency, $wd_eur_left));
                if ($currency ne 'EUR') {
                    $msg = "$msg (equivalent to %s %s)";
                    push @values, $currency, formatnumber('amount', $currency, $wd_left);
                }
                die sprintf "$msg.\n", @values;
            }
        }

    }

    return 1;
}

sub deposit_virtual_funds {
    my ($self, $source, $remark) = @_;
    $self->is_virtual || die "not a virtual client\n";

    my $currency = 'USD';
    my $amount   = 10000;

    my $trx = $self->payment_legacy_payment(
        currency     => $currency,
        amount       => $amount,
        payment_type => 'virtual_credit',
        remark => $remark // 'Virtual money credit to account',
        source => $source,
    );
    return ($currency, $amount, $trx);
}

#######################################
# PAYMENT HANDLERS
# These Payment handlers are each named as payment_{payment_gateway_code}
# where each {payment_gateway_code} is a subclass of payment and is a 1-to-1 table.

# 'smart_payment' is a one-stop shop which will validate, and choose the appropriate
# payment_gateway, based on the payment_type.  Its skip_validation flag is only for
# some legacy tests which assume that the balance already got out of range somehow.
#######################################

sub smart_payment {
    my ($self, %args) = @_;
    my $payment_type = $args{payment_type} || die "no payment_type";
    my $payment_gateway_code = $args{payment_gateway_code};

    $self->validate_payment(%args) unless delete $args{skip_validation};

    # each 'payment_type' implies a 'payment_gateway'..
    my %gateway_map = (
        affiliate_reward    => 'affiliate_reward',
        external_cashier    => 'doughflow',
        free_gift           => 'free_gift',
        adjustment          => 'legacy_payment',
        adjustment_purchase => 'legacy_payment',
        adjustment_sale     => 'legacy_payment',
        crypto_cashier      => 'legacy_payment',
        test_account        => 'legacy_payment',
        commission_paid     => 'legacy_payment',
        dormant_fee         => 'payment_fee',
        payment_fee         => 'payment_fee',
        bank_money_transfer => 'bank_wire',
        arbitrary_markup    => 'arbitrary_markup',
        cash_transfer       => 'western_union',      # ! need to fix in db first
    );

    $payment_gateway_code ||= $gateway_map{$payment_type}
        || die "unsupported payment_type: $payment_type";
    my $payment_handler = "payment_$payment_gateway_code";
    return $self->$payment_handler(%args);
}

sub payment_legacy_payment {
    my ($self, %args) = @_;

    my $currency     = $args{currency}     || die "no currency";
    my $amount       = $args{amount}       || die "no amount";
    my $remark       = $args{remark}       || die "no remark";
    my $payment_type = $args{payment_type} || die "no payment_type";
    my $staff        = $args{staff}        || 'system';

    # these are only here to support some tests which set up historic payments :(
    my $payment_time     = delete $args{payment_time};
    my $transaction_time = delete $args{transaction_time};
    my $source           = delete $args{source};

    my $action_type = $amount > 0 ? 'deposit' : 'withdrawal';
    my $account = $self->set_default_account($currency);

    die "cannot deal in $currency; clients currency is " . $account->currency_code() if $account->currency_code() ne $currency;

    my ($trx) = $account->add_payment_transaction({
            amount               => $amount,
            payment_gateway_code => 'legacy_payment',
            payment_type_code    => $payment_type,
            status               => 'OK',
            staff_loginid        => $staff,
            remark               => $remark,
            account_id           => $account->id,
            source               => $source,
            ($payment_time     ? (payment_time     => $payment_time)     : ()),
            ($transaction_time ? (transaction_time => $transaction_time) : ()),
        },
        {});    # <- TODO: legacy_payment table is redundant

    BOM::User::Client::PaymentNotificationQueue->add(
        source        => 'legacy',
        currency      => $currency,
        loginid       => $self->loginid,
        type          => $action_type,
        amount        => $amount,
        payment_agent => $self->payment_agent ? 1 : 0,
    );

    return $trx;
}

sub payment_account_transfer {
    my ($fmClient, %args) = @_;

    my $toClient = delete $args{toClient} || die "no toClient";
    my $currency = delete $args{currency} || die "no currency";
    my $amount   = delete $args{amount}   || die "no amount";
    my $to_amount = delete $args{to_amount};
    # fees can be zero as well
    my $fees = delete $args{fees} // die "no fees";
    my $staff    = delete $args{staff}    || 'system';
    my $toStaff  = delete $args{toStaff}  || $staff;
    my $fmStaff  = delete $args{fmStaff}  || $staff;
    my $remark   = delete $args{remark};
    my $toRemark = delete $args{toRemark} || $remark || ("Transfer from " . $fmClient->loginid);
    my $fmRemark = delete $args{fmRemark} || $remark || ("Transfer to " . $toClient->loginid);
    my $source             = delete $args{source};
    my $is_agent_to_client = delete $args{is_agent_to_client} // 0;
    my $lc_lifetime_limit  = delete $args{lc_lifetime_limit};
    my $lc_for_days        = delete $args{lc_for_days};
    my $lc_limit_for_days  = delete $args{lc_limit_for_days};

    # if client has no default account then error out
    my $fmAccount = $fmClient->default_account || die "Client does not have a default account\n";
    my $toAccount = $toClient->default_account || die "toClient does not have a default account\n";

    my $inter_db_transfer;
    $inter_db_transfer = delete $args{inter_db_transfer} if (exists $args{inter_db_transfer});
    my $gateway_code = delete $args{gateway_code} || 'account_transfer';

    my $from_curr = $fmClient->account->currency_code();
    my $to_curr   = $toClient->account->currency_code();

    if ($to_curr ne $from_curr and not defined $to_amount) {
        die "to_amount is required if from_currency and to_currency are different";
    } elsif ($to_curr eq $from_curr) {
        $to_amount = $amount;
    }

    $to_amount = financialrounding('amount', $to_curr, $to_amount);

    my $emit_transfer_event = sub {
        my $args = shift;

        my $event_properties = {
            from_account       => $fmClient->loginid,
            is_from_account_pa => 0 + !!($fmClient->is_pa_and_authenticated),
            to_account         => $toClient->loginid,
            is_to_account_pa   => 0 + !!($toClient->is_pa_and_authenticated),
            from_currency      => $from_curr,
            to_currency        => $to_curr,
            from_amount        => $amount,
            to_amount          => $to_amount,
            source             => $source,
            fees               => $fees,
            gateway_code       => $gateway_code,
            id                 => $args->{id},
            time               => $args->{transaction_time}};

        BOM::Platform::Event::Emitter::emit(
            'transfer_between_accounts',
            {
                loginid    => $fmClient->loginid,
                properties => $event_properties
            });
    };

    my $dbic = $fmClient->db->dbic;
    unless ($inter_db_transfer) {
        # here we rely on ->set_default_account above
        # which makes sure the `write` database is used.
        my $response;
        my $records = $dbic->run(
            # Error handling for code below is tricky; it returns a string for normal DB  errors,
            # and an array ref for custom DB errors (starts with "BI").
            ping => sub {
                my $sth = $_->prepare(
                    'SELECT (v_from_trans).id, (v_from_trans).transaction_time FROM payment.payment_account_transfer(?,?,?,?,?,?,?, ?,?,?,?,?,?, ?,?,?)'
                );
                $sth->execute(
                    $fmClient->loginid,  $toClient->loginid, $currency,    $amount, $to_amount, $fmStaff,
                    $toStaff,            $fmRemark,          $toRemark,    $source, $fees,      $gateway_code,
                    $is_agent_to_client, $lc_lifetime_limit, $lc_for_days, $lc_limit_for_days
                );
                return $sth->fetchall_arrayref({});
            });
        if (scalar @{$records}) {
            $response->{transaction_id} = $records->[0]->{id};

            $emit_transfer_event->($records->[0]);
        }

        return $response;
    }

    # TODO: Interclient transfers ("Transfer Between Accounts") lacks
    #       atomicity and is unsafe; we could potentially debit from one
    #       account and fail to credit into the other. We need to
    #       investigate a safe implementation or drop it altogether.
    my ($fmTrx) = $fmAccount->add_payment_transaction({
        amount               => -$amount,
        payment_gateway_code => $gateway_code,
        payment_type_code    => 'internal_transfer',
        status               => 'OK',
        staff_loginid        => $fmStaff,
        remark               => $fmRemark,
        account_id           => $fmAccount->id,
        staff_loginid        => $fmStaff,
        source               => $source,
        transfer_fees        => $fees,
    });

    # Enforce list context for consistency with the above - for some reason
    # we don't do anything with the result though
    (undef) = $toAccount->add_payment_transaction({
        amount               => $to_amount,
        payment_gateway_code => $gateway_code,
        payment_type_code    => 'internal_transfer',
        status               => 'OK',
        staff_loginid        => $toStaff,
        remark               => $toRemark,
        account_id           => $toAccount->id,
        staff_loginid        => $toStaff,
        source               => $source,
    });

    $emit_transfer_event->($fmTrx);

    return {transaction_id => $fmTrx->transaction_id};
}

sub payment_doughflow {
    # Doughflow payments may charge payment fees in cases where
    # clients deposit, did not trade and want their money back.
    # To ensure the atomicity of both the doughflow payment and its
    # corresponding payment fee, a seperate DB function that makes 2
    # calls to add_payment_transaction is used.
    #
    # add_doughflow_payment returns a superset of add_payment_transaction,
    # adding fee_transaction_id and fee_payment_id, so existing code can
    # expect the same outputs as other payment methods in this file.
    my ($self, %args) = @_;

    my $currency     = $args{currency}     || die "no currency";
    my $amount       = $args{amount}       || die "no amount";
    my $remark       = $args{remark}       || die "no remark";
    my $payment_type = $args{payment_type} || 'external_cashier';
    my $staff        = $args{staff}        || 'system';
    my $payment_fee  = $args{payment_fee};

    my $action_type = $amount > 0 ? 'deposit' : 'withdrawal';
    my $account = $self->set_default_account($currency);

    my %doughflow_values = map { $_ => $args{$_} }
        grep { BOM::Database::AutoGenerated::Rose::Doughflow->meta->column($_) }
        keys %args;
    $doughflow_values{transaction_type}  ||= $action_type;
    $doughflow_values{trace_id}          ||= 0;
    $doughflow_values{created_by}        ||= $staff;
    $doughflow_values{payment_processor} ||= 'unspecified';

    my @bind_params =
        ($account->id, $amount, $payment_type, $staff, $remark, Encode::encode_utf8($json->encode(\%doughflow_values)), $payment_fee,);

    my $trx = $self->db->dbic->run(
        fixup => sub {
            $_->selectrow_hashref("SELECT t.* from payment.add_doughflow_payment(?,?,?,?,?,?,?) t", undef, @bind_params);
        });

    BOM::User::Client::PaymentNotificationQueue->add(
        # Note that this was being passed in as a parameter, but always overridden.
        # This is probably a bug: either the parameter was wrong, or we should
        # use that source to define the gateway.
        source        => 'doughflow',
        currency      => $currency,
        loginid       => $self->loginid,
        type          => $action_type,
        amount        => $amount,
        payment_agent => $self->payment_agent ? 1 : 0,
    );
    return BOM::User::Client::PaymentTransaction::Doughflow->new(%$trx);
}

sub payment_free_gift {
    my ($self, %args) = @_;

    my $currency     = $args{currency}     || die "no currency";
    my $amount       = $args{amount}       || die "no amount";
    my $remark       = $args{remark}       || die "no remark";
    my $payment_type = $args{payment_type} || 'free_gift';
    my $staff        = $args{staff}        || 'system';
    my $source       = $args{source};

    my $account = $self->set_default_account($currency);

    my ($trx) = $account->add_payment_transaction({
            amount               => $amount,
            payment_gateway_code => 'free_gift',
            payment_type_code    => $payment_type,
            status               => 'OK',
            staff_loginid        => $staff,
            remark               => $remark,
            account_id           => $account->id,
            source               => $source,
        },
        {reason => $remark}    # <- TODO: This is redundant; we are already storing remark in payments table.
    );

    return $trx;
}

sub payment_mt5_transfer {
    my ($self, %args) = @_;

    my $currency     = $args{currency}     || die "no currency";
    my $amount       = $args{amount}       || die "no amount";
    my $remark       = $args{remark}       || die "no remark";
    my $payment_type = $args{payment_type} || 'mt5_transfer';
    my $staff        = $args{staff}        || 'system';
    my $fees         = $args{fees};
    my $source       = $args{source};

    my $account = $self->set_default_account($currency);

    my ($trx) = $account->add_payment_transaction({
        amount               => $amount,
        payment_gateway_code => 'account_transfer',
        payment_type_code    => $payment_type,
        status               => 'OK',
        staff_loginid        => $staff,
        remark               => $remark,
        account_id           => $account->id,
        source               => $source,
        transfer_fees        => $fees,
    });

    return $trx;
}

sub payment_payment_fee {
    my ($self, %args) = @_;

    my $currency     = $args{currency}     || die "no currency";
    my $amount       = $args{amount}       || die "no amount";
    my $remark       = $args{remark}       || die "no remark";
    my $payment_type = $args{payment_type} || 'payment_fee';
    my $staff        = $args{staff}        || 'system';
    my $source       = $args{source};

    my $account = $self->set_default_account($currency);

    my ($trx) = $account->add_payment_transaction({
            amount               => $amount,
            payment_gateway_code => 'payment_fee',
            payment_type_code    => $payment_type,
            status               => 'OK',
            staff_loginid        => $staff,
            remark               => $remark,
            account_id           => $account->id,
            source               => $source,
        },
        {});    # <- TODO: we currently don't charge payment_fee; this table is redundant.

    return $trx;
}

sub payment_bank_wire {
    my ($self, %args) = @_;

    my $currency = delete $args{currency} || die "no currency";
    my $amount   = delete $args{amount}   || die "no amount";
    my $staff    = delete $args{staff}    || 'system';
    my $remark   = delete $args{remark}   || '';
    my $source   = delete $args{source};

    my $action_type = $amount > 0 ? 'deposit' : 'withdrawal';
    my $account = $self->set_default_account($currency);

    my %bank_wire_values = map { $_ => $args{$_} }
        grep { BOM::Database::AutoGenerated::Rose::BankWire->meta->column($_) }
        keys %args;

    my ($trx) = $account->add_payment_transaction({
            amount               => $amount,
            payment_gateway_code => 'bank_wire',
            payment_type_code    => 'bank_money_transfer',
            status               => 'OK',
            staff_loginid        => $staff,
            remark               => $remark,
            account_id           => $account->id,
            source               => $source,
        },
        \%bank_wire_values
    );

    BOM::User::Client::PaymentNotificationQueue->add(
        source        => 'bankwire',
        currency      => $currency,
        loginid       => $self->loginid,
        type          => $action_type,
        amount        => $amount,
        payment_agent => $self->payment_agent ? 1 : 0,
    );

    return $trx;
}

sub payment_affiliate_reward {
    my ($self, %args) = @_;

    my $currency     = $args{currency}     || die "no currency";
    my $amount       = $args{amount}       || die "no amount";
    my $remark       = $args{remark}       || die "no remark";
    my $payment_type = $args{payment_type} || 'affiliate_reward';
    my $staff        = $args{staff}        || 'system';
    my $source       = $args{source};

    my $account = $self->set_default_account($currency);

    my ($trx) = $account->add_payment_transaction({
            amount               => $amount,
            payment_gateway_code => 'affiliate_reward',
            payment_type_code    => $payment_type,
            status               => 'OK',
            staff_loginid        => $staff,
            remark               => $remark,
            account_id           => $account->id,
            source               => $source,
        },
        {});    # <- TODO: affiliate_reward table is redundant

    if (exists $self->{mlt_affiliate_first_deposit} and $self->{mlt_affiliate_first_deposit}) {
        $self->status->set('cashier_locked', 'system', 'MLT client received an affiliate reward as first deposit');

        delete $self->{mlt_affiliate_first_deposit};
    }

    return $trx;
}

sub payment_western_union {
    my ($self, %args) = @_;

    my $currency     = $args{currency}     || die "no currency";
    my $amount       = $args{amount}       || die "no amount";
    my $remark       = $args{remark}       || die "no remark";
    my $payment_type = $args{payment_type} || 'cash_transfer';
    my $staff        = $args{staff}        || 'system';
    my $source       = $args{source};

    my $action_type = $amount > 0 ? 'deposit' : 'withdrawal';
    my $account = $self->set_default_account($currency);

    my %wu_values = map { $_ => $args{$_} }
        grep { BOM::Database::AutoGenerated::Rose::WesternUnion->meta->column($_) }
        keys %args;
    $wu_values{mtcn_number}     ||= '';
    $wu_values{payment_country} ||= '';

    my ($trx) = $account->add_payment_transaction({
            amount               => $amount,
            payment_gateway_code => 'western_union',
            payment_type_code    => $payment_type,
            status               => 'OK',
            staff_loginid        => $staff,
            remark               => $remark,
            account_id           => $account->id,
            source               => $source,
        },
        \%wu_values
    );

    BOM::User::Client::PaymentNotificationQueue->add(
        source        => 'westernunion',
        currency      => $currency,
        loginid       => $self->loginid,
        type          => $action_type,
        amount        => $amount,
        payment_agent => $self->payment_agent ? 1 : 0,
    );

    return $trx;
}

sub payment_arbitrary_markup {
    my ($self, %args) = @_;

    my $currency     = $args{currency}     || die "no currency";
    my $amount       = $args{amount}       || die "no amount";
    my $remark       = $args{remark}       || die "no remark";
    my $payment_type = $args{payment_type} || 'arbitrary_markup';
    my $staff        = $args{staff}        || 'system';
    my $source       = $args{source};

    my $account = $self->set_default_account($currency);

    my ($trx) = $account->add_payment_transaction({
        amount               => $amount,
        payment_gateway_code => 'arbitrary_markup',
        payment_type_code    => $payment_type,
        status               => 'OK',
        staff_loginid        => $staff,
        remark               => $remark,
        account_id           => $account->id,
        source               => $source,
    });

    return $trx;
}

=head2 copy_status_to_siblings

Copies the given status from the current client to its siblings that haven't set with it before and returns the loginid of the updated clients.

Returns an arrayref containing the loginids of the clients that have been updated.

=cut

sub copy_status_to_siblings {
    my ($self, $status_code, $staff_name) = @_;

    $status_code                or die 'No status code provided';
    $staff_name                 or die 'No staff name provided';
    $self->status->$status_code or die $self->loginid . ": Can't copy $status_code to its siblings because it hasn't been set yet";

    return $self->db->dbic->run(
        fixup => sub {
            $_->selectrow_arrayref('SELECT betonmarkets.copy_client_status_to_siblings(?,?,?)', undef, $self->loginid, $status_code, $staff_name);
        })->[0] // [];
}

=head2 clear_status_and_sync_to_siblings

Removes the given status from the current client and from its siblings, and returns the loginid of the updated clients.

Returns an array containing the loginids of the clients that have been updated.

=cut

sub clear_status_and_sync_to_siblings {
    my ($self, $status_code) = @_;

    $status_code or die 'No status code provided';

    return $self->db->dbic->run(
        ping => sub {
            $_->selectrow_arrayref('SELECT betonmarkets.clear_client_status_sync_all(?,?)', undef, $self->loginid, $status_code);
        })->[0] // [];
}

=head2 get_sibling_loginids_without_status

Returns the login id of all landing company siblings of the current client that haven't set with the given status code

=cut

sub get_sibling_loginids_without_status {
    my ($self, $status_code) = @_;

    $status_code or die 'No status code provided';

    return $self->db->dbic->run(
        fixup => sub {
            $_->selectrow_arrayref('SELECT betonmarkets.get_sibling_loginids_without_client_status(?,?)', undef, $self->loginid, $status_code);
        })->[0] // [];
}

=head2 siblings

Returns an array containing all the landing company siblings of the current client. Does NOT include the current one.

=cut

sub siblings {
    my $self = shift;
    my @siblings = grep { $_->loginid ne $self->loginid } $self->user->clients_for_landing_company($self->landing_company->short);
    return \@siblings;
}

=head2 has_siblings

Returns true if the current client landing company siblings, false otherwise.

=cut

sub has_siblings {
    my $self = shift;

    return scalar(@{$self->siblings()}) > 0;
}

1;
