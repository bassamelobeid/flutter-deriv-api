import 'base_model.dart';

/// Portfolio model class
class PortfolioModel extends BaseModel {
  /// Constructor
  PortfolioModel({this.contracts});

  /// Instance from JSON
  factory PortfolioModel.fromJson(Map<String, dynamic> json) => PortfolioModel(
    contracts: json['contracts'] != null
        ? json['contracts']
        .map<Contracts>((dynamic entry) => Contracts.fromJson(entry))
        .toList()
        : null,
  );

  // Properties
  /// List of open positions.
  final List<Contracts> contracts;

  /// ToJson
  PortfolioModel copyWith({
    List<Contracts> contracts,
  }) =>
      PortfolioModel(contracts: contracts ?? this.contracts);
}

/// Autogenerated from Contracts

///
class Contracts {
  /// Constructor
  Contracts(
      {this.appId,
        this.buyPrice,
        this.contractId,
        this.contractType,
        this.currency,
        this.dateStart,
        this.expiryTime,
        this.longcode,
        this.payout,
        this.purchaseTime,
        this.symbol,
        this.transactionId});

  /// Instance from JSON
  factory Contracts.fromJson(Map<String, dynamic> json) => Contracts(
    appId: json['app_id'],
    buyPrice: json['buy_price'],
    contractId: json['contract_id'],
    contractType: json['contract_type'],
    currency: json['currency'],
    dateStart: json['date_start'],
    expiryTime: json['expiry_time'],
    longcode: json['longcode'],
    payout: json['payout'],
    purchaseTime: json['purchase_time'],
    symbol: json['symbol'],
    transactionId: json['transaction_id'],
  );

  // Properties
  /// ID of the application where this contract was purchased.
  final String appId;

  /// Buy price
  final double buyPrice;

  /// Internal contract identifier number (to be used in a 'proposal_open_contract' API call)
  final int contractId;

  /// Contract type
  final String contractType;

  /// Contract currency
  final String currency;

  /// Epoch of start date
  final int dateStart;

  /// Epoch of expiry time
  final int expiryTime;

  /// Contract description
  final String longcode;

  /// Payout price
  final double payout;

  /// Epoch of purchase time
  final int purchaseTime;

  /// Symbol code
  final String symbol;

  /// It is the transaction ID. Every contract (buy or sell) and every payment has a unique ID.
  final int transactionId;

  /// ToJson
  Contracts copyWith({
    String appId,
    double buyPrice,
    int contractId,
    String contractType,
    String currency,
    int dateStart,
    int expiryTime,
    String longcode,
    double payout,
    int purchaseTime,
    String symbol,
    int transactionId,
  }) =>
      Contracts(
          appId: appId ?? this.appId,
          buyPrice: buyPrice ?? this.buyPrice,
          contractId: contractId ?? this.contractId,
          contractType: contractType ?? this.contractType,
          currency: currency ?? this.currency,
          dateStart: dateStart ?? this.dateStart,
          expiryTime: expiryTime ?? this.expiryTime,
          longcode: longcode ?? this.longcode,
          payout: payout ?? this.payout,
          purchaseTime: purchaseTime ?? this.purchaseTime,
          symbol: symbol ?? this.symbol,
          transactionId: transactionId ?? this.transactionId);
}