<p>README:</p>
<ul>
    <li><b>partition range</b> : holds value from 0 to 1 in delta space. Multiple partitions could be specified with 0-0.25,0.25-1. On overlapping point, we take the maximum of the values. Partition range could be use to introduce bias in the commission structure. E.g. we could set 0-0.5 & and 0.5-1 partition range to different max & min adjustment levels.</li>
    <li><b>bias</b> : could be introduced to currency symbol or/and underlying symbol. Accepts value of long or short. If we are <i>long</i> on <i>USD</i>, all USD currency pairs will be affected. For frxUSDXXX pairs, we will apply the commission structure on CALL/CALLE. For frxXXXUSD pairs, we will apply the commission structure to PUT/PUTE. If you are <i>long</i> on <i>frxAUDJPY</i>, the commission structure will be applied to CALL/CALLE on frxAUDJPY.</li>
    <li><b>max adjustment</b> : maximum adjustment to markup</li>
    <li><b>min adjustment</b> : minimum adjustment to markup</li>
    <li><b>width</b> : width between the deltas having max adjustment (0.6 means delats of 0.2 and 0.8 will get max adjustment)</li>
    <li><b>centre offset</b> : offset the point of min adjustment from centre (0 means 0.5 delta point will be the min adjustment point)</li>
</ul>
<p><b>Add new custom commission with the tool below: </b></p>

<table id='custom_commission_form'>
    <tr><td>Mode</td><td> : <select onchange="fillForm(this.value, '[% static_config %]')"><option value="none">None</option><option value="medium">Medium</option><option value="high">High</option></select></td></tr>
    <tr><td>Name</td><td> : <input type="text" name="name"></td><td>Accepts only words and integers (required)</td></tr>
    <tr><td>Start Time</td><td> : <input type="text" name="start_time"></td><td>Accepts valid date utility format, e.g. epoch or '2017-09-14 10:00:30' (required)</td></tr>
    <tr><td>End Time</td><td> : <input type="text" name="end_time"></td><td>Accepts valid date utility format, e.g. epoch or '2017-09-14 10:00:30' (required)</td></tr>
    <tr><td>Currency Symbol</td><td> : <input type="text" name="currency_symbol"></td></tr>
    <tr><td>Underlying Symbol</td><td> : <input type="text" name="underlying_symbol"></td></tr>
    <tr><td>Bias</td><td> : <input type="text" name="bias"></td><td>Leave it empty if bias is not intended. Accepts values long or short</td></tr>
    <tr><td>Partition Range</td><td> : <input type="text" name="partition_range"></td><td>Partitions in delta space. E.g. 0-1 or 0-0.5,0.5-1 (required)</td></tr>
    <tr><td>Flat</td><td> : <input type="text" name="flat"></td><td>Boolean flag. If set to 1, the partition will be set to max adjustment. Set to 0 if we want to have variable commission structure across delta (required)</td></tr>
    <tr><td>Max adjustment</td><td> : <input type="text" name="cap_rate"></td><td>(required)</td></tr>
    <tr><td>Min adjustment</td><td> : <input type="text" name="floor_rate"></td></tr>
    <tr><td>Width</td><td> : <input type="text" name="width"></td></tr>
    <tr><td>Centre Offset</td><td> : <input type="text" name="centre_offset"></td></tr>
    <tr><td></td><td><button onclick="drawChart()">Chart it</button><button onclick="saveCustom()" style="margin-left: 20px;">Save</button></td><td class="result"></td></tr>
</table>

<div id='highchart'>
</div>

<div id='custom_commission_table'>
</div>

<script>
    function drawChart() {
        var el = \$('table#custom_commission_form');
        var result = el.find('.result');
        result.text('');
        \$.ajax({
                url: "[% upload_url | none %]",
                data: {
                    draw_chart: "1",
                    cap_rate: el.find('input[name="cap_rate"]').val(),
                    floor_rate: el.find('input[name="floor_rate"]').val(),
                    width: el.find('input[name="width"]').val(),
                    centre_offset: el.find('input[name="centre_offset"]').val(),
                    flat: el.find('input[name="flat"]').val(),
                    partition_range: el.find('input[name="partition_range"]').val()
                },
                success: function(data){
                    var config = \$.parseJSON(data);
                    if (config.error) {
                        result.text('Failed: '+ config.error).css('color', 'red');
                    } else {
                        var numbers = [];
                        for (i=0;i<config.data.length;i++) {
                            numbers[i] = parseFloat(config.data[i]);
                        }
                        \$('div#highchart').highcharts({
                            chart: {
                                height: 300,
                                width: 500
                            },
                            title: {
                                text: 'commission across delta'
                            },
                            xAxis: {
                                title: {text: 'delta'},
                                categories: config.delta
                            },
                            yAxis: {
                                title: {text: 'commission'},
                                min: 0,
                                max: 0.5
                            },
                            series: [{name: 'commission', data: numbers}]
                        });
                    }
                }
        });
    }
    function fillForm(value, static) {
        var static_obj = \$.parseJSON(static);
        var to_fill = static_obj[value];
        var el = \$('table#custom_commission_form');

        \$.each(to_fill, function(k,v) {
            el.find('input[name="'+k+'"]').val(v);
        });
    }
    function saveCustom() {
        var el = \$('table#custom_commission_form');
        var result = el.find('.result');
        result.text('processing...');
        \$.ajax({
                url: "[% upload_url | none %]",
                data: {
                    save_config: "1",
                    name: el.find('input[name="name"]').val(),
                    underlying_symbol: el.find('input[name="underlying_symbol"]').val(),
                    currency_symbol: el.find('input[name="currency_symbol"]').val(),
                    bias: el.find('input[name="bias"]').val(),
                    cap_rate: el.find('input[name="cap_rate"]').val(),
                    floor_rate: el.find('input[name="floor_rate"]').val(),
                    width: el.find('input[name="width"]').val(),
                    centre_offset: el.find('input[name="centre_offset"]').val(),
                    flat: el.find('input[name="flat"]').val(),
                    partition_range: el.find('input[name="partition_range"]').val(),
                    start_time: el.find('input[name="start_time"]').val(),
                    end_time: el.find('input[name="end_time"]').val()
                },
                success: function(data){
                    var config = \$.parseJSON(data);
                    if (config.error) {
                        result.text('Failed: '+ config.error).css('color', 'red').show();
                    } else {
                        appendTable('custom_commission_table',config);
                        result.hide();
                    }
                }
        });
    }
    function appendTable(id, config) {
        var table = \$('table#'+id);
        table.find('tr.none').remove();
        var to_append = '<tr id="'+config.name+'"><td>'+config.name+'</td><td>'+config.underlying_symbol+'</td><td>'+config.currency_symbol+'</td><td>'+config.bias+'</td><td>'+config.start_time+'</td><td>'+config.end_time+'</td><td>'+JSON.stringify(config.config)+'</td><td><button onclick="deleteConfig(\''+config.name+'\')">Delete</button></td><td class="result"></td></tr>';
        table.append(to_append);
    }
    function createTable(id, config) {
        var table = '<table id="'+id+'">';
        table += '<tr><td>Name</td><td>Underlying Symbol</td><td>Currency Symbol</td><td>Bias</td><td>Start</td><td>End</td><td>Config</td></tr>';

        if (config.length > 0) {
            for (var i=0; i < config.length; i++) {
                table += '<tr id="'+config[i].name+'"><td>'+config[i].name+'</td><td>'+config[i].underlying_symbol+'</td><td>'+config[i].currency_symbol+'</td><td>'+config[i].bias+'</td><td>'+config[i].start_time+'</td><td>'+config[i].end_time+'</td><td>'+JSON.stringify(config[i].config)+'</td><td><button onclick="deleteConfig(\''+config[i].name+'\')">Delete</button></td><td class="result"></td></tr>';
            }
        } else {
            table += '<tr class="none"><td>None</td></tr>';
        }

        table += '</table>';
        \$('div#'+id).html(table);
    }
    function deleteConfig (name) {
        var el = \$('tr#'+name);
        \$.ajax({
                url: "[% upload_url | none %]",
                data: {
                    delete_config: "1",
                    name: name
                },
                success: function(data){
                    var config = \$.parseJSON(data);
                    if (config.error) {
                        el.find('td.result').text('Failed: '+ config.error).css('color','red');
                    } else {
                        el.remove();
                    }
                }
        });
    }
    createTable('custom_commission_table', [% config | none %])
</script>

<style>
    table {
        border-collapse: collapse;
    }
    #custom_commission_table td {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 4px;
        vertical-align: top;
    }
</style>
