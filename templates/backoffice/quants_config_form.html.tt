<p>Limit type definitions:</p>
<ul>
    <li><b>Landing company wide limits (per landing company (client database))</b>
        <ul>
        <li>Global Potential Loss: sum of payout price - buy price of open contracts for a single database.</li>
        <li>Global Realized Loss: sum of sell price - buy price of closed contracts for a single database.</li>
        </ul>
    </li>
</ul>

<p>Risk Profile Guidelines (there's no strict enforcement on limit amount but please use the guidelines so that we don't end up with hundreds of different numbers):</p>

<ul>
    <li>no_business: 0 Max Payout Per Contract(PCP), 0 Daily Turnver Per Client(DT)</li>
    <li>extreme_risk: 100 (PCP), 1000 (DT)</li>
    <li>high_risk: 1000 (PCP), 5000 (DT)</li>
    <li>moderate_risk: 5000 (PCP), 50000 (DT)</li>
    <li>medium_risk: 20000 (PCP), 100000 (DT)</li>
    <li>low_risk: 50000 (PCP), 500000 (DT)</li>
</ul>

<p>Existing contract groups:</p>

<ul>
    [% FOREACH group IN existing_contract_groups %]
        <li>[% group.key %]: [% group.list %]</li>
    [% END %]
</ul>

<p>Existing market groups:</p>

<ul>
    [% FOREACH group IN existing_market_groups %]
        <li>[% group.key %]: <span style="font-family: monospace">[% group.list %]</span></li>
    [% END %]
</ul>

<div class="row scrollable">
<fieldset  [% IF disabled %] disabled title='no write access' [% END %]>
<table class="pretty small border nowrap">
    <thead>
    <tr>
        <th>Market</th>
        <th>Underlying<br />Symbol</th>
        <th>Expiry<br />Type</th>
        <th>Barrier<br />Type</th>
        <th>Contract<br />Group</th>
        <th>Landing<br />Company</th>
        <th>Limit Type</th>
        <th>Limit<br />Amount (USD)</th>
        <th>Comment</th>
        <th><span tooltip=
"Format is YYYY-MM-DD HH:MI e.g. 2018-01-02 09:00
You can also enter 'today 9'
Or just enter the time ('9') and the date defaults to today">Start time <span class="tooltip-blue">?</span></span></th>
        <th>End time</th>
    </tr>
    </thead>
    <tbody>
    <tr style="vertical-align: top;">
        <td><div id="market"></div></td>
        <td>
            <div id="underlying_symbol">
                <input type="text" name="underlying_symbol" size="10" data-lpignore="true" />
            </div>
        </td>
        <td><div id="expiry_type"></div></td>
        <td><div id="barrier_type"></div></td>
        <td><div id="contract_group"></div></td>
        <td><div id="landing_company"></div></td>
        <td>
            <select name="limit_type">
                [% FOREACH limit_type IN data.limit_types %]
                    <option value="[% limit_type.item(0) %]">[% limit_type.item(1) %]</option>
                [% END %]
            </select>
        </td>
        <td>
            <input type="text" name="limit_amount" size="12" data-lpignore="true" />
        </td>
        <td>
            <input type="text" name="comment" size="15" data-lpignore="true" />
        </td>
        <td style="text-align:center;">
            <input type="text" name="start_time" class="datepick" size="15" maxlength="19" pattern="^\d{4}-\d{2}-\d{2}( \d{2}:\d{2}:\d{2})?\$" data-lpignore="true" />
            <br /><span class="hint">Format: yyyy-mm-dd (HH:mm:ss)</span>
        </td>
        <td style="text-align:center;">
            <input type="text" name="end_time" class="datepick" size="15" maxlength="19" pattern="^\d{4}-\d{2}-\d{2}( \d{2}:\d{2}:\d{2})?\$" data-lpignore="true" />
            <br /><span class="hint">Format: yyyy-mm-dd (HH:mm:ss)</span>
         </td>
        <td>
            <button onClick="saveLimit()" type="button" class="btn btn--red">Save</button>
            <br><span class="save_result"></span>
        </td>
    </tr>
    </tbody>
</table>
</fieldset>
</div>

<h3>Landing company wide limits</h3>

<div id="per_landing_company" class="row"></div>

<h3>Pending market group switch</h3>
<p>Market group update and clean-up of expired records is by a cron that runs every minute. So, if you select a start time of 20:11:15, it will be updated at 20:12:00</p>

<div id="market_group_display" class="row"></div>

<script>

    var upload_url = "[% upload_url %]";

    function deleteMarketGroup(table_id, row_id) {
        var el = \$('table#'+table_id).find('tr#'+row_id);
        var result = el.find('td.result');
        result.text('processing ...');

        \$.ajax({
            url: upload_url,
            data: {
                delete_market_group: "1",
                market: el.find('td.market').attr('data_key'),
                landing_company: el.find('td.landing_company').attr('data_key'),
                start_time: el.find('td.start_time').attr('data_key'),
                end_time: el.find('td.end_time').attr('data_key'),
                symbol: el.find('td.symbol').attr('data_key')
            },
            success: function(data) {
                var config = \$.parseJSON(data);
                if (config.error) {
                    result.text(config.error).css('color', 'var(--color-red)');
                } else {
                    createDisplayTable(config.limit.records, config.limit.header, 'per_landing_company');
                    createDisplayTable(config.market_group.records, config.market_group.header, 'market_group_display');
                }
            }
        });
    }

    function deleteLimit(table_id, target_name, row_id) {
        var el = \$('table#'+table_id).find('tr#'+row_id);
        var result = el.find('td.result');
        result.text('processing ...');

        \$.ajax({
            url: upload_url,
            data: {
                delete_limit: "1",
                market: el.find('td.market').attr('data_key'),
                underlying_symbol: el.find('td.underlying_symbol').attr('data_key'),
                expiry_type: el.find('td.expiry_type').attr('data_key'),
                contract_group: el.find('td.contract_group').attr('data_key'),
                landing_company: el.find('td.landing_company').attr('data_key'),
                limit_type: target_name,
                barrier_type: el.find('td.barrier_type').attr('data_key'),
                type: el.find('td.type').attr('data_key'),
                start_time: el.find('td.start_time').attr('data_key'),
                end_time: el.find('td.end_time').attr('data_key'),
            },
            success: function(data) {
                var config = \$.parseJSON(data);
                if (config.error) {
                    result.text(config.error).css('color', 'var(--color-red)');
                } else {
                    createDisplayTable(config.data.records, config.data.header, 'per_landing_company');
                }
            }
        });
    }

    function createDisplayTable(data, header, id) {
        var table = '<table class="small border" id="'+id+'"><thead><tr>';

        for (var i=0; i < header.length; i++) {
            if (header[i][1] == 'Time Status') {
                continue;
            }
            if (header[i][1] == 'Start Time') {
                table += '<th><span tooltip="Times in green are currently active. Red indicates the limit has expired.">'+header[i][1]+'<span class="tooltip-blue">?</span></span></th>';
                continue;
            }
            table += '<th>'+header[i][1]+'</th>'
        }
        table += '<th></th>';
        table += '</tr></thead>';

        for (var i=0; i < data.length; i++) {
            table += '<tr id='+i+'>';
            var time_status = 0;
            var d = data[i];
            for (var idx in header) {
                var key = header[idx][0];
                var value = d[key] || {data_key: '', display_value: ''};
                if (header[idx][1] == 'Time Status') {
                    time_status = value.display_value;
                    continue;
                }
                table += '<td class="'+key+'" data_key="'+value.data_key+'">';
                if (key.substr(0,7) == 'global_' && \$.isNumeric(value.display_value)) {
                    table += '<button class="btn btn--red" onClick="deleteLimit(\''+id+'\',\''+key+'\','+i+')" type="button">Delete</button>  ';
                }
                // Special handling for start_time and end_time
                if (key.substr(-4) == 'time') {
                    table += ' &nbsp; '; // Don't let numbers squash together
                    if (key = 'start time' && time_status == 2) { table += '<font color="#006600">'; } // active
                    if (key = 'start time' && time_status == 3) { table += '<font color="#ff3300">'; } // expired
                    table += value.display_value;
                    if (key = 'end time' && time_status == 2 || time_status == 3) { table += '</font>'; }
                    table += ' &nbsp; </td>';
                }
                else {
                    table += value.display_value+'</td>';
                }
            }
            if (typeof(d['type']) != 'undefined') {
                table += '<td class="type" data_key="'+d['type'].data_key+'"></td>';
            }

            if (id == 'market_group_display') {
                table += '<td><button class="btn btn--red" onClick="deleteMarketGroup(\''+id+'\','+i+')" type="button">Delete</button></td><td class="result"></td>';
            }
            table += '</tr>'
        }

        table += '</table>';
        \$('div#'+id).html(table);
    }

    function createInputTable(data, id) {
        var table = '<table id="'+id+'">';

        for (var i=0; i<data.length; i++) {
            var input = data[i];
            if (input == 'new_market') {
                table += '<tr><td><input type="text" name="new_market" data-lpignore="true" /></td></tr>';
            } else {
                table += '<tr><td><input type="checkbox" name="'+id+'" value="'+input+'">'+input+'</input></td></tr>';
            }
        }

        table += '</table>';
        \$('div#'+id).html(table);
    }

    function saveLimit() {
        var el = \$("table.pretty");
        if (el) {
            var market = el.find('input[name="market"]:checked').serialize();
            var new_market = el.find('input[name="new_market"]').val();
            var underlying_symbol = el.find('input[name="underlying_symbol"]').val();
            var expiry_type = el.find('input[name="expiry_type"]:checked').serialize();
            var contract_group = el.find('input[name="contract_group"]:checked').serialize();
            var barrier_type = el.find('input[name="barrier_type"]:checked').serialize();
            var limit_type = el.find('select[name="limit_type"]').val();
            var limit_amount = el.find('input[name="limit_amount"]').val();
            var landing_company = el.find('input[name="landing_company"]:checked').serialize();
            var comment = el.find('input[name="comment"]').val();
            var start_time = el.find('input[name="start_time"]').val();
            var end_time = el.find('input[name="end_time"]').val();

            var result = el.find("span.save_result");

            //Both start_time and end_time should be empty or fill
            if((start_time === '' && end_time !== '') || (start_time !== '' && end_time === '')) {
                result.css('color', 'var(--color-red)');
                result.text('you should enter both `start time` and `end time`');
                return;
            }

            if(!isDatePickersValid()) return false;

            if(start_time !== '') {
                if(new Date(start_time) >= new Date(end_time)) {
                    result.css('color', 'var(--color-red)');
                    result.text('`start_time` should be less than `end_time`.');
                    return;
                }
            }

            result.text('processing ...');

            \$.ajax({
                url: upload_url,
                data: {
                    save_limit: "1",
                    market: market,
                    new_market: new_market,
                    underlying_symbol: underlying_symbol,
                    expiry_type: expiry_type,
                    contract_group: contract_group,
                    limit_type: limit_type,
                    limit_amount: limit_amount,
                    landing_company: landing_company,
                    barrier_type: barrier_type,
                    comment: comment,
                    start_time: start_time,
                    end_time: end_time,
                },
                success: function(data) {
                    var config = \$.parseJSON(data);
                    if (config.error) {
                        result.text(config.error).css('color', 'var(--color-red)');
                    } else {
                        result.text('saved').css('color', 'var(--color-green-2)');
                        createDisplayTable(config.limit.records, config.limit.header, 'per_landing_company');
                        createDisplayTable(config.market_group.records, config.market_group.header, 'market_group_display');
                    }
                }
            });
        }
    }

    createInputTable([% data.landing_companies | none %], 'landing_company');
    createInputTable([% data.markets | none %], 'market');
    createInputTable([% data.expiry_types | none %], 'expiry_type');
    createInputTable([% data.barrier_types | none %], 'barrier_type');
    createInputTable([% data.contract_groups | none %], 'contract_group');

    createDisplayTable([% existing_landing_company.records | none %], [% existing_landing_company.header | none %], 'per_landing_company');
    createDisplayTable([% existing_pending_market_group.records | none %], [% existing_pending_market_group.header | none %], 'market_group_display');

    \$(document).ready(function() {
        initDatePickers();
    });

    initDatePickers = function(){
        \$('.datepick')
        .not('.date-picker-inited')
        .datepicker({dateFormat: "yy-mm-dd 00:00:00"})
        .addClass('date-picker-inited');
    };

    isDatePickersValid = function(){
        var isValid = true;
        var invalidDateNames = [];
        \$('.datepick').each(function(){
            var date = \$(this).val().trim();

            // Ignore validation if field is empty and it's not required
            if(!date && !\$(this).prop('required')) return true;

            var valid = /^(\d{4}-\d{2}-\d{2}( \d{2}:\d{2}:\d{2})?)\$/.test(date);
            if(valid) {
                date = new Date(date);
                valid = date != 'Invalid Date';
            }
            isValid = isValid && valid;
            if(!valid) invalidDateNames.push(\$(this).prop('name'));
        });

        if(!isValid) {
            alert('Please match the correct format for the following fields: \n' + invalidDateNames.join('\n'));
        }

        return isValid;
    };
</script>
<style>
    .pretty td {
        border: 1px solid var(--color-grey-3);
        text-align: left;
        white-space: nowrap;
    }
    .inlineTable {
        display: inline-block;
        vertical-align: top;
    }
    span.hint {
        color: #fff;
        border-radius: 3px;
        display: inline-block;
        padding: 2px 6px;
        background-color: var(--color-green-2);
        border: none;
        margin: 4px;
    }
</style>
