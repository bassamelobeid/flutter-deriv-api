#!/etc/rmg/bin/perl
use strict;
use warnings;

use LWP::UserAgent;
use XML::Simple;
use BOM::Platform::Config;
use BOM::Database::AutoGenerated::Rose::MyaffiliatesTokenDetail;
use BOM::Database::ClientDB;

local $SIG{ALRM} = sub { die "alarm\n" };
alarm 1800;

my $connection_builder = BOM::Database::ClientDB->new({
    broker_code => 'FOG',
    operation   => 'collector',
});

my $sql = q{
    WITH all_tokens AS (
        SELECT
            distinct(t.myaffiliates_token) as myaffiliates_token
        FROM
            betonmarkets.production_servers() srv,

            LATERAL dblink(srv.srvname,
            $$
                SELECT * FROM
                (
                    SELECT myaffiliates_token FROM betonmarkets.client
                    UNION
                    SELECT myaffiliates_token FROM betonmarkets.client_affiliate_exposure
                ) t
            $$
            ) AS t(myaffiliates_token VARCHAR)
    )
    SELECT
        myaffiliates_token
    FROM
        all_tokens t
    WHERE
        NOT EXISTS (SELECT 1 FROM data_collection.myaffiliates_token_details WHERE token = t.myaffiliates_token)
};

my $myaffiliates_tokens = $connection_builder->db->dbic->run(
    fixup => sub {
        return $_->selectall_arrayref($sql, {Slice => {}});
    });
my $i    = 0;
my $ua   = LWP::UserAgent->new(ssl_opts => {verify_hostname => 0});
my $user = BOM::Platform::Config::third_party()->{myaffiliates}->{user};
my $pass = BOM::Platform::Config::third_party()->{myaffiliates}->{pass};
my $host = BOM::Platform::Config::third_party()->{myaffiliates}->{host};
$host =~ s/(https?:\/\/)(.*)/$1$user:$pass\@$2/g;

for my $row (@$myaffiliates_tokens) {
    my $token = $row->{myaffiliates_token};
    next if (not $token);
    print "$token\n";

    my $affiliate_record = BOM::Database::AutoGenerated::Rose::MyaffiliatesTokenDetail->new(
        db    => $connection_builder->db,
        token => $token,
    );
    if ($affiliate_record->load(speculative => 1)) {
        print ++$i, "already in db\n";
        next;
    }

    my ($content, $ignore);
    eval {
        print "processing [$token]\n";
        $content = $ua->get("$host/feeds.php?FEED_ID=4&TOKENS=" . $token)->decoded_content;

# A proper response, that is a response for a valid token resembles this:
# <TOKENS>
# <TOKEN PREFIX="R5lg0ti49c7Kto_EPcZApGNd7ZgqdRLk" USER_ID="12345" SETUP_ID="7" PLAN_ID="2" MEDIA_ID="0" BANNER_ID="1" CAMPAIGN_ID="1" AUTHCODE="0">
# <USER USERNAME="somebody@gmail.com" EMAIL="somebody@gmail.com" STATUS="denied"/>
# <SETUP SITE_ID="2" SITE_NAME="Binary.com" SITE_URL="http://www.binary.com" OPERATION_ID="1" PLAN_ID="2" OBJECT_ID="8" OBJECT_DESCRIPTION="Unknown [DO NOT DELETE ANY LINKS THAT USE THIS OBJECT AS THEY ARE USED BY OUR CODEBASE]">
# <OBJECT_DATA>
# <DATA VALUE="unknown [DO NOT DELETE ANY LINKS THAT USE THIS OBJECT AS THEY ARE USED BY OUR CODEBASE]"/>
# </OBJECT_DATA>
# </SETUP>
# </TOKEN>
# </TOKENS>

# An improper response, for say an invalid token, looks something like this, "something" being the key word as it may not be exactly this:
# <TOKENS>
# <TOKEN PREFIX="skdjkdjskjdkfjkdjfkjksjsdkjf" USER_ID="Error, Token contains the affiliate ID whom does not exist"/>
# </TOKENS>

        die "Couldn't get token [$token]!\n" unless defined $content;
        print "Parsing the content:\n";
        my $affiliate = XML::Simple::XMLin($content);

        $affiliate_record->user_id($affiliate->{'TOKEN'}->{'USER_ID'});
        $affiliate_record->username($affiliate->{'TOKEN'}->{'USER'}->{'USERNAME'});
        $affiliate_record->status($affiliate->{'TOKEN'}->{'USER'}->{'STATUS'});
        $affiliate_record->email($affiliate->{'TOKEN'}->{'USER'}->{'EMAIL'});
        
        if ($affiliate->{'TOKEN'}->{'USER_ID'}) {
            # Considering what may end up in 'USER_ID', we can stop here if there is anything besides digits
            die "Invalid token user_id: $affiliate->{'TOKEN'}->{'USER_ID'}" if $affiliate->{'TOKEN'}->{'USER_ID'} !~ /^[0-9]+$/;

            print "Start to fetch myaffiliate [", $affiliate->{'TOKEN'}->{'USER_ID'}, "]\n";
            $content = $ua->get("$host/feeds.php?FEED_ID=1&USER_ID=" . $affiliate->{'TOKEN'}->{'USER_ID'})->decoded_content;
            die "Couldn't get tags!\n" unless defined $content;

            print "Parsing the content:\n";
            my $user_tags   = '';
            my $parsed_tags = XML::Simple::XMLin($content)->{USER}->{USER_TAGS}->{TAG};
            if (ref $parsed_tags eq 'ARRAY') {
                foreach my $tag (@{$parsed_tags}) {
                    $user_tags .= ',' . $tag->{TAG_NAME};
                }
            } else {
                $user_tags = $parsed_tags->{TAG_NAME};
            }
            $affiliate_record->tags($user_tags);

            $affiliate_record->save();
        } else {
            print "Ignoring the affiliate, because its ID is empty [$content]\n";
            $ignore = 1;
        }
    };
    if ($@) {
        print STDERR "Error: [$@]: in parsing token[$token] from  [$content]\n";
    }

    print ++$i . " Done\n" if (not $ignore);
}
