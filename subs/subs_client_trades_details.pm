use strict;
use warnings;

use Moose;
use Try::Tiny;

use Date::Utility;
use BOM::Database::ClientDB;
use BOM::Database::DataMapper::Account;
use BOM::Database::Model::Account;
use BOM::Database::AutoGenerated::Rose::Transaction::Manager;
use BOM::Database::Model::FinancialMarketBet::Factory;
sub get_trades_details {
    my $args = shift;
    my $broker = $args->{broker};
    my $loginid = $args->{loginid};
    my $start_date = Date::Utility->new($args->{startdate});
    my $end_date = Date::Utility->new($args->{enddate})->plus_time_interval('1d');
    my $db = BOM::Database::ClientDB->new({
             broker_code => $broker,
        })->db;

    my $dma = BOM::Database::DataMapper::Account->new({
            client_loginid => $loginid,
            db             => $db,
     });
     my $currency = $dma->get_currency;

    my $account = BOM::Database::Model::Account->new({
             data_object_params => {
                 client_loginid => $loginid,
                 currency_code  => $currency
             },
             db => $db,
            });
        $account->load;
        my $transactions = BOM::Database::AutoGenerated::Rose::Transaction::Manager->get_transaction((
                sort_by => 't1.transaction_time ASC, t1.id ASC',
                query   => [
                    account_id       => $account->id,
                    transaction_time => {ge_le => [$start_date->db_timestamp, $end_date->db_timestamp]},
                    action_type      => 'buy',
                ],
                with_objects => ['financial_market_bet'],
                db           => $db,
            ));

    my (@output, $hdrs);

    foreach my $transaction(@{$transactions}){
       my $results = _build_report($transaction, $currency);
       push @output, $results;
       $hdrs->{$_} = 1 for keys %$results;
    }

    return $hdrs, @output;
}

=head2 _build_report

Returns an array reference of client's trade details

=cut

sub _build_report {
    my ($tn, $currency) = @_;

    my $fmb              = $tn->financial_market_bet;
    my $real_fmb = BOM::Database::Model::FinancialMarketBet::Factory->get(financial_market_bet_record => $fmb);
    my $orig = produce_contract($real_fmb, $currency);
    my $orig_2 = make_similar_contract($orig, {priced_at => 'start'});
    return {
         purchase_time           => $fmb->purchase_time,
         currency                => $currency,
         financial_market_bet_id => $tn->financial_market_bet_id,
         bet_type                => $fmb->bet_type,
         theo_price              => $orig_2->theo_price,
         buy_price               => $fmb->buy_price,
         payout_price            => $fmb->payout_price,
         sell_price              => $fmb->sell_price,
         start_time              => $fmb->start_time,
         underlying_symbol       => $fmb->underlying_symbol,
         final_value             => ($orig->is_expired) ? $orig->value : 'OPEN',
         sell_time               => $tn->transaction_time,
     };

}


1;
