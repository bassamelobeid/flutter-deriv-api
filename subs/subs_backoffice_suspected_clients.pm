#!/etc/rmg/perl
package main;

use strict;
use warnings;

use BOM::Database::AutoGenerated::Rose::Users::LoginHistory::Manager;
use BOM::Platform::User;
use Date::Utility;

sub get_logins_from_same_ips {
    my ($loginid, $from, $to) = @_;
#    my $client = Client::Account->new({loginid => $loginid});
#    return [] unless (defined($client));
#    my $user = BOM::Platform::User->new({email => $client->email});
#    XXX: find out how to use it here, and meanwhile:
    my $user = BOM::Platform::User->new({email => $loginid});

    my $start          = Date::Utility->new($from)->db_timestamp;
    my $end            = Date::Utility->new($to)->db_timestamp;
    my $suspect_logins = $user->find_login_history(history_date => {ge_le => [$start, $end]});
    my $ips            = {};
    foreach (@{$suspect_logins}) {
        $ips->{"%$1%"} = 1
            if ($_->environment =~ /(IP=\S+\s)/);
    }

    my $logins = BOM::Database::AutoGenerated::Rose::Users::LoginHistory::Manager->get_login_history(
        db              => BOM::Database::UserDB::rose_db(),
        require_objects => ['binary_user'],
        query           => [
            binary_user_id => {ne   => $user->id},
            successful     => 1,
            environment    => {like => [keys %$ips]},
            history_date => {ge_le => [$start, $end]}
        ],
        sort_by => 't1.history_date DESC'
    );

    my $suspected_logins = [];

    foreach (@{$logins}) {
        my @l;
        push @l, $_->loginid for ($_->binary_user->loginid);
        push @$suspected_logins,
            {
            logins => \@l,
            date   => $_->history_date,
            };
    }

    return $suspected_logins;
}

1;
