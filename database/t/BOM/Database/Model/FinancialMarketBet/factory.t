use Test::Most 0.22 (tests => 9);
use Test::NoWarnings;
use BOM::Database::ClientDB;
use BOM::Database::AutoGenerated::Rose::Client;
use BOM::Database::Model::Account;
use BOM::Database::Helper::FinancialMarketBet;
use BOM::Database::Model::FinancialMarketBet::Factory;
use BOM::Test::Data::Utility::UnitTestDatabase qw(:init);

my $db = BOM::Database::ClientDB->new({
        broker_code => 'CR',
    })->db;

# add client
my $client = BOM::Database::AutoGenerated::Rose::Client->new(
    loginid                  => 'CR220169',
    client_password          => 'godblesstheusa',
    email                    => 'grisha@pokrovskoe.ru',
    broker_code              => 'CR',
    residence                => 'USA',
    citizen                  => 'USA',
    salutation               => 'MR',
    first_name               => 'Grigory',
    last_name                => 'Novik',
    address_line_1           => 'Civic Center',
    address_line_2           => '303',
    address_city             => 'Beverly Hills',
    address_state            => 'LA',
    address_postcode         => '232323',
    phone                    => '+112123144',
    latest_environment       => 'FireFox',
    secret_question          => 'How many money do you have?',
    secret_answer            => "I'll kill you bread seller!",
    restricted_ip_address    => '',
    date_joined              => Date::Utility->new('2005-01-08')->date_yyyymmdd,
    gender                   => 'm',
    cashier_setting_password => '',
    fax                      => '',
    driving_license          => '',
);
$client->db($db);
$client->save;

# add account in USD
my $acc_usd = BOM::Database::Model::Account->new({
        data_object_params => {
            client_loginid => 'CR220169',
            currency_code  => 'USD',
            is_default     => 1,
        },
        db => $db,
    },
);
$acc_usd->save;
my $acc_id = $acc_usd->account_record->id;
my %account_data = (account_data => {client_loginid => $acc_usd->client_loginid, currency_code => $acc_usd->currency_code});

$client = BOM::Platform::Client->new({loginid => 'CR220169'});
$client->payment_free_gift(
    currency    => 'USD',
    amount      => 500,
    remark      => 'free gift',
);

# HigherLowerBet
my $hl_bet = BOM::Database::Model::FinancialMarketBet::HigherLowerBet->new({
        data_object_params => {
            account_id        => $acc_id,
            underlying_symbol => 'frxUSDJPY',
            payout_price      => 200,
            buy_price         => 20,
            remark            => 'Test Remark',
            purchase_time     => '2010-12-02 12:00:00',
            start_time        => '2010-12-02 12:00:00',
            expiry_time       => '2010-12-02 14:00:00',
            is_expired        => 1,
            bet_class         => 'higher_lower_bet',
            bet_type          => 'FLASHU',
            relative_barrier  => '1.1',
            absolute_barrier  => 1673.828,
            prediction        => 'up',
            short_code        => 'FLASHU_FRXUSDJPY_2_23_OCT_09_S30_05H4201',
        },
    },
);
my $hl_helper = BOM::Database::Helper::FinancialMarketBet->new({
    %account_data,
    bet => $hl_bet,
    db  => $db,
});
$hl_helper->buy_bet;
my $hl_id = $hl_bet->financial_market_bet_record->id;

my $bet = BOM::Database::Model::FinancialMarketBet::Factory->get(
    bet_id => $hl_id,
    db     => $db
);
isa_ok $bet, "BOM::Database::Model::FinancialMarketBet::HigherLowerBet";
is $bet->underlying_symbol, 'frxUSDJPY', "correct symbol";
my $fmb = BOM::Database::AutoGenerated::Rose::FinancialMarketBet->new(
    id => $hl_id,
    db => $db,
);
$fmb->load;
$bet = BOM::Database::Model::FinancialMarketBet::Factory->get(fmb_record => $fmb);
isa_ok $bet, "BOM::Database::Model::FinancialMarketBet::HigherLowerBet";

# LegacyBet
my $legacy_bet = BOM::Database::Model::FinancialMarketBet::LegacyBet->new({
        data_object_params => {
            account_id              => $acc_id,
            underlying_symbol       => 'frxUSDJPY',
            payout_price            => 200,
            buy_price               => 110,
            sell_price              => 0,
            remark                  => "Legacy",
            purchase_time           => '2002-12-02 12:00:00',
            start_time              => '2002-12-02 12:00:00',
            expiry_time             => '2002-12-02 14:00:00',
            is_expired              => 1,
            is_sold                 => 1,
            bet_class               => 'legacy_bet',
            bet_type                => 'DOUBLEDBL',
            absolute_higher_barrier => '1.1',
            absolute_lower_barrier  => '2.2',
            intraday_endhour        => '4.1',
            intraday_ifunless       => 'I',
            intraday_leg1           => 'L',
            intraday_leg2           => 'L',
            intraday_midhour        => '4',
            intraday_starthour      => '3.5',
            short_code              => 'DOUBLEDBL_FRXUSDJPY_2_23_OCT_09_S30_05H4201',
            sell_time               => '2010-12-02 14:00:10',
        },
    },
);
my $legacy_helper = BOM::Database::Helper::FinancialMarketBet->new({
    %account_data,
    bet => $legacy_bet,
    db  => $db,
});
$legacy_helper->buy_bet;
my $legacy_id = $legacy_bet->financial_market_bet_record->id;

$bet = BOM::Database::Model::FinancialMarketBet::Factory->get(
    bet_id => $legacy_id,
    db     => $db
);
isa_ok $bet, "BOM::Database::Model::FinancialMarketBet::LegacyBet";

# RangeBet
my $range_bet = BOM::Database::Model::FinancialMarketBet::RangeBet->new({
        data_object_params => {
            account_id              => $acc_id,
            underlying_symbol       => 'frxUSDJPY',
            payout_price            => 200,
            buy_price               => 20,
            sell_price              => 0,
            remark                  => 'Test Remark',
            purchase_time           => '2010-12-02 12:00:00',
            start_time              => '2010-12-02 12:00:00',
            expiry_time             => '2010-12-02 14:00:00',
            is_expired              => 1,
            is_sold                 => 1,
            bet_class               => 'range_bet',
            bet_type                => 'RANGE',
            absolute_higher_barrier => '865300',
            absolute_lower_barrier  => '857900',
            prediction              => 'in',
            short_code              => 'RANGE_FRXUSDJPY_5_1310631887_15_JUL_11_14356_14057',
            sell_time               => '2010-12-02 14:00:10',
        },
    },
);
my $range_helper = BOM::Database::Helper::FinancialMarketBet->new({
    %account_data,
    bet => $range_bet,
    db  => $db,
});
$range_helper->buy_bet;
my $range_id = $range_bet->financial_market_bet_record->id;

$bet = BOM::Database::Model::FinancialMarketBet::Factory->get(
    bet_id => $range_id,
    db     => $db
);
isa_ok $bet, "BOM::Database::Model::FinancialMarketBet::RangeBet";

# DigitBet
my $digit_bet = BOM::Database::Model::FinancialMarketBet::DigitBet->new({
        data_object_params => {
            account_id        => $acc_id,
            underlying_symbol => 'frxUSDJPY',
            payout_price      => 200,
            buy_price         => 20,
            sell_price        => 0,
            remark            => 'Test Remark',
            purchase_time     => '2010-12-02 12:00:00',
            start_time        => '2010-12-02 12:00:00',
            expiry_time       => '2010-12-02 14:00:00',
            is_expired        => 1,
            is_sold           => 1,
            bet_class         => 'digit_bet',
            bet_type          => 'DIGITMATCH',
            last_digit        => 9,
            prediction        => 'match',
            short_code        => 'DIGITMATCH_FRXUSDJPY_5_1310631887_15_JUL_11_9_0',
            sell_time         => '2010-12-02 14:00:10',
        },
    },
);
my $digit_helper = BOM::Database::Helper::FinancialMarketBet->new({
    %account_data,
    bet => $digit_bet,
    db  => $db,
});
$digit_helper->buy_bet;
my $digit_id = $digit_bet->financial_market_bet_record->id;

$bet = BOM::Database::Model::FinancialMarketBet::Factory->get(
    bet_id => $digit_id,
    db     => $db
);
isa_ok $bet, "BOM::Database::Model::FinancialMarketBet::DigitBet";

# TouchBet
my $touch_bet = BOM::Database::Model::FinancialMarketBet::TouchBet->new({
        data_object_params => {
            account_id        => $acc_id,
            underlying_symbol => 'frxUSDJPY',
            payout_price      => 222,
            buy_price         => 22,
            sell_price        => 222,
            remark            => "Touch",
            purchase_time     => '2010-12-02 12:00:00',
            start_time        => '2010-12-02 12:00:00',
            expiry_time       => '2010-12-02 14:00:00',
            is_expired        => 1,
            is_sold           => 1,
            bet_class         => 'touch_bet',
            bet_type          => 'ONETOUCH',
            relative_barrier  => '1.1',
            absolute_barrier  => '1673.828',
            prediction        => 'touch',
            short_code        => 'ONETOUCH_FRXUSDJPY_5_1310631887_15_JUL_11_14356_14057',
            sell_time         => '2010-12-02 14:00:10',
        },
    },
);
my $touch_helper = BOM::Database::Helper::FinancialMarketBet->new({
    %account_data,
    bet => $touch_bet,
    db  => $db,
});
$touch_helper->buy_bet;
my $touch_id = $touch_bet->financial_market_bet_record->id;

$bet = BOM::Database::Model::FinancialMarketBet::Factory->get(
    bet_id => $touch_id,
    db     => $db
);
isa_ok $bet, "BOM::Database::Model::FinancialMarketBet::TouchBet";

throws_ok { BOM::Database::Model::FinancialMarketBet::Factory->get(bet_id => 666_555_444_111, db => $db); } qr/No such .*FinancialMarketBet/,
    'Cannot create object for non-existing bet';
