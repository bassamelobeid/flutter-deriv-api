<script src="https://unpkg.com/@simplewebauthn/browser/dist/bundle/index.umd.min.js"></script>

<script>
    const { startAuthentication, browserSupportsWebAuthn } = SimpleWebAuthnBrowser;
    // Time for the authenticater to throw an error when device is not supported < ~50ms and time to cancel operation > ~250ms
    const DEVICE_NOT_SUPPORTED_TIMEOUT = 200; // Time in milliseconds

    document.addEventListener('DOMContentLoaded', async function () {
        if(browserSupportsWebAuthn()) {
            let growthbookEnabled = '<%= $growthbook_request_data->{IS_ENABLED} %>';
            if (growthbookEnabled === '0'){
                await renderPasskeysButtonAndStartAuthentication();
            }
            else{
                let GrowthBook = window.growthbook.GrowthBook;
                const gb = new GrowthBook({
                    apiHost: "https://cdn.growthbook.io",
                    clientKey: '<%= $growthbook_request_data->{CLIENT_KEY} %>',
                });
                let passkeyFeatureFlag = await setAttributesAndCheckFeatureFlag(gb);

                if(passkeyFeatureFlag){
                    await renderPasskeysButtonAndStartAuthentication();
                }
            }
        } 
    });

    async function renderPasskeysButtonAndStartAuthentication() {
        renderPasskeysForm();
        if (<%= $passkeys_available %>) {
            await startAuthenticationWithPasskeys();
        }
    }

    function renderPasskeysForm(){
        const passkeysForm = document.createElement('form');
        passkeysForm.method = 'POST';
        passkeysForm.id = 'passkeysForm';

        passkeysForm.innerHTML = `
            <div class="passkey">
                    <a class="button passkey-btn" id="btnPasskeys" href="#" rel="nofollow" title="Login with passkeys" role="button" aria-label="Login with passkeys" aria-haspopup="true">
                        <span>
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M3 20V17.2C3 16.6333 3.14583 16.1125 3.4375 15.6375C3.72917 15.1625 4.11667 14.8 4.6 14.55C5.63333 14.0333 6.68333 13.6458 7.75 13.3875C8.81667 13.1292 9.9 13 11 13C11.3333 13 11.6667 13.0125 12 13.0375C12.3333 13.0625 12.6667 13.1 13 13.15C12.9333 14.1167 13.1083 15.0292 13.525 15.8875C13.9417 16.7458 14.55 17.45 15.35 18V20H3ZM19 23L17.5 21.5V16.85C16.7667 16.6333 16.1667 16.2208 15.7 15.6125C15.2333 15.0042 15 14.3 15 13.5C15 12.5333 15.3417 11.7083 16.025 11.025C16.7083 10.3417 17.5333 10 18.5 10C19.4667 10 20.2917 10.3417 20.975 11.025C21.6583 11.7083 22 12.5333 22 13.5C22 14.25 21.7875 14.9167 21.3625 15.5C20.9375 16.0833 20.4 16.5 19.75 16.75L21 18L19.5 19.5L21 21L19 23ZM11 12C9.9 12 8.95833 11.6083 8.175 10.825C7.39167 10.0417 7 9.1 7 8C7 6.9 7.39167 5.95833 8.175 5.175C8.95833 4.39167 9.9 4 11 4C12.1 4 13.0417 4.39167 13.825 5.175C14.6083 5.95833 15 6.9 15 8C15 9.1 14.6083 10.0417 13.825 10.825C13.0417 11.6083 12.1 12 11 12ZM18.5 14C18.7833 14 19.0208 13.9042 19.2125 13.7125C19.4042 13.5208 19.5 13.2833 19.5 13C19.5 12.7167 19.4042 12.4792 19.2125 12.2875C19.0208 12.0958 18.7833 12 18.5 12C18.2167 12 17.9792 12.0958 17.7875 12.2875C17.5958 12.4792 17.5 12.7167 17.5 13C17.5 13.2833 17.5958 13.5208 17.7875 13.7125C17.9792 13.9042 18.2167 14 18.5 14Z" fill="#333333"/>
                            </svg>
                        </span>
                        <span class="passkey-text">Passkey</span>
                    </a>
            </div>
        
            <input type="hidden" name="publicKeyCredential" id="resp" />
            <input type="hidden" name="passkeys_login" id="passkeys_login" value="0" />
            <input type="hidden" name="csrf_token" value="<%= $csrf_token %>" />
        `;
        document.getElementById('passkeysContainer').appendChild(passkeysForm);
        document.getElementById('passkeys_login').value = "1";
        passkeyBtnClickEvent();
    }

    function passkeyBtnClickEvent(){
        document.getElementById('btnPasskeys').addEventListener('click', async function () {
            suppressCredentialErrors([
                document.getElementById('txtEmail'),
                document.getElementById('txtPass')
            ]);
            await startAuthenticationWithPasskeys();
        });
    }

    async function startAuthenticationWithPasskeys() {
        trackEvent("login_started", "passkeys", null);
        const optionsResponse =  await fetchOptionsFromServer();
        if(optionsResponse){
            const assertionResponse =  await startWebAuthentication(optionsResponse.publicKey);
            if(assertionResponse)
            {
                document.getElementById('resp').value = JSON.stringify(assertionResponse);
                let form = document.getElementById("passkeysForm");
                form.submit();
            }
        }
    }

    async function fetchOptionsFromServer() {
        try {
            const response = await fetch('api/v1/passkeys/login/options');
            const options = await response.json();
            if(options.message && options.error_code){
                showErrorPopUp(options.message, options.title);
            }
            else{
                return options;
            }
        } catch (error) {
            showErrorPopUp(error, "Error");
        }
    }

    async function startWebAuthentication(publicKey) {
        const startTime = performance.now();
        try {
            return await startAuthentication(publicKey);
        } catch (error) {
            const elapsedTime = performance.now() - startTime;
            // The Web Authentication API only returns a NotAllowedError code when the user cancels the operation or the device does not support WebAuthn.
            // As a workaround, we assume that the device does not support WebAuthn if the error is thrown within DEVICE_NOT_SUPPORTED_TIMEOUT,
            // as the operation of cancellation needs user interaction and takes more time.
            if (error.name === 'NotAllowedError' && elapsedTime < DEVICE_NOT_SUPPORTED_TIMEOUT) {
                showErrorPopUp("This device doesnâ€™t support passkeys. Choose a different login method.", "Passkey login unavailable");
            }
        }
    }

    async function setAttributesAndCheckFeatureFlag(gb) {
        try {
            let userInfo = get_user_info();
            const attributes= await gb.setAttributes({
                    country: userInfo.country_code,
                    client_ip: userInfo.client_ip,
                    browser: userInfo.browser,
                    user_agent: userInfo.user_agent,
                    domain: userInfo.domain,
                    app_id: userInfo.app_id
            });
            await gb.loadFeatures();
            return gb.isOn("web_passkeys");
        } catch (error) {
            console.error("Error setting attributes and checking feature flag:", error);
            return false;
        }
    }

    function get_user_info() {
        try {
            let escapedJsonString = ('<%= $user_request_details %>');
            let unescapedJsonString = escapedJsonString.replace(/&quot;/g, '"');
            let user_info = JSON.parse(unescapedJsonString);
            user_info.browser = (user_info.user_agent.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?/i) || [])[1] || '';
            return user_info;
        } catch (error) {
            console.error("Error parsing user info:", error);
            return {};
        }
    }

    let passkeysError = "<%= stash('passkeys_error') %>";
    if (passkeysError) {
        let passkeysErrorTitle = '<%= stash("passkeys_error_title") %>';
        showErrorPopUp(passkeysError, passkeysErrorTitle);
    }
</script>
