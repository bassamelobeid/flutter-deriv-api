#!/usr/bin/env perl 
use strict;
use warnings;

use feature qw(say);

use Path::Tiny;
use Getopt::Long;

=head1 NAME

C<binary-deps> - report list of dependencies for a given repository

=cut

GetOptions(
    'prs=s'    => \my $pr_file,
    'd|delete' => \my $delete
) or die 'invalid options';

my @pending = @ARGV or die 'needs a repo in the form regentmarkets/bom-platform';
my %pr;
if($pr_file) {
    for(path($pr_file)->lines_utf8({chomp => 1})) {
        $pr{$1} = $2 if m{^([\w-]+/[\w-]+) (\d+)$};
        warn "Added $2 for $1\n";
    }
}
my %deps;
while(my $next = shift @pending) {
    next if $deps{$next}++;
    my $repo_file = path('/home/git/' . $next)->child('repositories.yml');
    unless($repo_file->exists) {
        warn "No repositories found for $next\n";
        next
    }
    push @pending, $repo_file->lines_utf8({chomp => 1});
}

# Apply consistent ordering
say for sort keys %deps;

# this should be extracted from %deps rather than hardcoding
for my $org (qw(regentmarkets binary-com)) {
    my $it = path('/home/git')->child($org)->iterator;
    while(my $next = $it->()) {
        my $name = $next->basename;
        next unless $next->is_dir and $name =~ /^[a-zA-Z0-9-]+$/;

        my $item = $next->parent->basename . '/' . $name;
        if($deps{$item}) {
            system qw(git), ('--git-dir=' . $next . '/.git'), ('--work-tree=' . $next), qw(fetch origin) and die $!;
            if(my $id = $pr{$item}) {
                warn "Switching repository $item to PR $id\n";
                system qw(git), ('--git-dir=' . $next . '/.git'), ('--work-tree=' . $next), qw(fetch origin), "pull/$pr{$item}/head" and die $!;
                system qw(git), ('--git-dir=' . $next . '/.git'), ('--work-tree=' . $next), qw(checkout FETCH_HEAD) and die $!;
            } else {
                warn "Switching repository $item to master\n";
                system qw(git), ('--git-dir=' . $next . '/.git'), ('--work-tree=' . $next), qw(checkout master) and die $!;
                system qw(git), ('--git-dir=' . $next . '/.git'), ('--work-tree=' . $next), qw(pull --rebase --ff-only) and die $!;
            }
        } else {
            warn "Removing $item\n";
            $next->remove_tree if $delete;
        }
    }
}
