use strict;
use warnings;

use 5.010;
use Test::Most;
use Test::FailWarnings;
use Test::Warn;
use YAML::XS;

use BOM::Product::ContractFactory qw(produce_contract);
use Date::Utility;
use BOM::Market::Underlying;
use BOM::Test::Data::Utility::UnitTestMarketData;

#lets cover a whole week + next week's first day
my @expiry_dates = (
    Date::Utility->new('2016-05-09'), Date::Utility->new('2016-05-10'), Date::Utility->new('2016-05-11'), Date::Utility->new('2016-05-12'),
    Date::Utility->new('2016-05-13'), Date::Utility->new('2016-05-16'));

my $surfaces = YAML::XS::LoadFile('/home/git/regentmarkets/bom/t/BOM/Product/Volatility/vol_compare_data.yml');

my @expectations = (
    0.111354764321071,
    0.111354764321071,
    0.111354764321071,
    0.111354764321071,
    0.111354764321071,
    0.111354764321071,
    0.122814181732044,
    0.126670995272909,
    0.124484190377597,
    0.123147110533467,
    0.121797961368997,
    0.121006194881755,
    0.126088660250182,
    0.128187807396221,
    0.134859400108478,
    0.126004290845908,
    0.121049897661087,
    0.118307455191808,
    0.119644644350379,
    0.116737931320999,
    0.11632009021883,
    0.11509905208443,
    0.110134442838515,
    0.108808103483375,
    0.110878749531406,
    0.108429567701429,
    0.107263070739099,
    0.102660721056634,
    0.0976914889516043,
    0.094553607532771,
    0.167029499363049,
    0.142245542212915,
    0.145257033605941,
    0.144782897410288,
    0.113642831509515,
    0.105870210443622,
    0.00742096904971739,
    0.00742096904971739,
    0.00742096904971739,
    0.00742096904971739,
    0.00742096904971739,
    0.00742096904971739,
    0.00821761220429335,
    0.00821761220429335,
    0.00821761220429335,
    0.00821761220429335,
    0.00821761220429335,
    0.00821761220429335,
    0.0723245869513996,
    0.0777854673848598,
    0.0671586141115642,
    0.124372935692388,
    0.128230785373766,
    0.125954688061498,
    0.12468156555551,
    0.123528438425546,
    0.122948454930687,
    0.127478905444632,
    0.129078049326835,
    0.136159673656986,
    0.128079863090555,
    0.1236629772379,
    0.121250025093136,
    0.125462705301903,
    0.122422885238094,
    0.1222457054466,
    0.121370168685333,
    0.116598208357499,
    0.115543850468151,
    0.117627242930134,
    0.115027061409516,
    0.11425695339337,
    0.110555955719836,
    0.106533803612505,
    0.104105699568585,
    0.155916464120197,
    0.137261827176541,
    0.138855640594445,
    0.137122768565634,
    0.113407172448183,
    0.108622426459003,
    0.00742085555830805,
    0.00742085555830805,
    0.00742085555830805,
    0.00742085555830805,
    0.00742085555830805,
    0.00742085555830805,
    0.00821747988873898,
    0.00821747988873898,
    0.00821747988873898,
    0.00821747988873898,
    0.00821747988873898,
    0.00821747988873898,
    0.100036208510237,
    0.0953435130388462,
    0.0913912317604045,
    0.0841044798662381,
    0.0805185963053225,
    0.077524938619201,
    0.074980905043261,
    0.0757248875467851,
    0.0694343917185578,
    0.128547193692439,
    0.129763750754197,
    0.137159526984598,
    0.129668013229371,
    0.125654564524,
    0.123486951304537,
    0.12734491482238,
    0.124214263592307,
    0.124185726700559,
    0.123457861484431,
    0.119479836844849,
    0.118569439665074,
    0.122216822111883,
    0.119514177351895,
    0.118998892570641,
    0.115864226181436,
    0.112423099152163,
    0.110422247601435,
    0.148849984709335,
    0.134181888719933,
    0.134868009597406,
    0.132313392991137,
    0.113264701225446,
    0.110240006020032,
    0.0618841045457406,
    0.0618841045457406,
    0.0618841045457406,
    0.0618841045457406,
    0.0618841045457406,
    0.0618841045457406,
    0.0707071593871352,
    0.0707071593871352,
    0.0707071593871352,
    0.0707071593871352,
    0.0707071593871352,
    0.0707071593871352,
    0.107696967371953,
    0.10051437351707,
    0.0981452744872999,
    0.09206092143391,
    0.089934123371905,
    0.0884455292847748,
    0.0926738156994222,
    0.0932100514682042,
    0.0914468345831163,
    0.0893578484611132,
    0.0848970008070056,
    0.0825146214504921,
    0.0875319496102723,
    0.0821810363162897,
    0.0714299841500065,
    0.128786819553517,
    0.125587103072319,
    0.12567094206307,
    0.125054652530168,
    0.121671038152473,
    0.120867519785605,
    0.124228753541986,
    0.121504911538777,
    0.121286127067501,
    0.118443422140868,
    0.115241793204287,
    0.113561539639149,
    0.143945647751992,
    0.132088006521929,
    0.132141944982714,
    0.129007093499013,
    0.113168976085942,
    0.111304732620188,
    0.078062532796861,
    0.078062532796861,
    0.078062532796861,
    0.078062532796861,
    0.078062532796861,
    0.078062532796861,
    0.0892062826450082,
    0.0892062826450082,
    0.0892062826450082,
    0.0892062826450082,
    0.0892062826450082,
    0.0892062826450082,
    0.111327966634611,
    0.103001079905837,
    0.10135212550631,
    0.0957901392639347,
    0.0942885186142822,
    0.0934268155926712,
    0.097860800564246,
    0.0983482213682698,
    0.0976863220305645,
    0.0974182205383494,
    0.0950379277226449,
    0.0941750664898788,
    0.102000136159107,
    0.10008094954875,
    0.0951216002081579,
    0.091910325607144,
    0.0848788639341909,
    0.0808690433069755,
    0.0892008287331831,
    0.0833836621806577,
    0.0719096461886427,
    0.125768713643725,
    0.123028529948197,
    0.123033239388697,
    0.120408811936622,
    0.117385153059811,
    0.115942333701144,
    0.140337029064883,
    0.130571252465946,
    0.130159148383042,
    0.126592197598765,
    0.113100036323904,
    0.112058576643418,
    0.0871941470077299,
    0.0871941470077299,
    0.0871941470077299,
    0.0871941470077299,
    0.0871941470077299,
    0.0871941470077299,
    0.0996464648849776,
    0.0996464648849776,
    0.0996464648849776,
    0.0996464648849776,
    0.0996464648849776,
    0.0996464648849776,
    0.113449552933146,
    0.104463741433308,
    0.103227415719776,
    0.0979585664442883,
    0.0968062517032431,
    0.0962909854757074,
    0.100352481990371,
    0.100818142121525,
    0.100660112837468,
    0.101206870849883,
    0.0997215359920017,
    0.0994935344688939,
    0.106385526176124,
    0.105370680385805,
    0.101797302075851,
    0.100083616735834,
    0.0948456081183632,
    0.0922408738611867,
    0.101722417271323,
    0.0991107681496454,
    0.0948863652558333,
    0.0898494180792853,
    0.0860784786712962,
    0.0791645389268716,
    0.111748973107528,
    0.102282013713339,
    0.105587645934677,
    0.0881381046137047,
    0.0881381046137047,
    0.0881381046137047,
    0.0881381046137047,
    0.0881381046137047,
    0.0881381046137047,
    0.100704800450234,
    0.0933065404328528,
    0.0924219996545253,
    0.0879622806653772,
    0.0870640154326551,
    0.0867131594757851,
    0.0871939100336726,
    0.0875808673742442,
    0.087716139279336,
    0.0886167539644578,
    0.0878140769024908,
    0.087947154702377,
    0.0900703171079319,
    0.0896067397014101,
    0.087212807080712,
    0.0863911337578514,
    0.0827358504345732,
    0.0810974540168814,
    0.0836156813245152,
    0.0822906113211121,
    0.0804731041183219,
    0.0778114822664815,
    0.0762423818378665,
    0.0718815943964199,
    0.111738477040716,
    0.102263756764308,
    0.105570111609831,
    0.105672339507622,
    0.0975282960558667,
    0.102693223178213,
    0.00719558663202899,
    0.00719558663202899,
    0.00719558663202899,
    0.00719558663202899,
    0.00719558663202899,
    0.00719558663202899,
    0.00796803543454815,
    0.00796803543454815,
    0.00796803543454815,
    0.00796803543454815,
    0.00796803543454815,
    0.00796803543454815,
    0.0508666541024392,
    0.0774188019480362,
    0.0680447057684712,

);

my $counter = 0;

for my $expiry (@expiry_dates) {
    my $start_date = $expiry->minus_time_interval('8d');
    my $end_of_day = $expiry->plus_time_interval('23h59m59s');
    if ($end_of_day->day_of_week == 5) {
        $end_of_day = $expiry->plus_time_interval('21h');
    }

    my @dates;

    while ($start_date->is_before($end_of_day)) {
        push @dates, $start_date;
        $start_date = $start_date->plus_time_interval('4h');
    }

    foreach my $date (@dates) {
        price_contract($date, $end_of_day, $expectations[$counter]);
    }
}

sub price_contract {
    my ($date_start, $date_expiry, $expected_pricing_vol) = @_;

    return if ($date_expiry->epoch - $date_start->epoch < (12 * 60 * 60));
    die "Could not load volatility surface for " . $date_start->epoch if not defined $surfaces->{$date_start->epoch};

    BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
        'volsurface_delta',
        {
            recorded_date => $date_start,
            surface       => $surfaces->{$date_start->epoch}->{surface},
            symbol        => 'frxUSDJPY',
        });

    Quant::Framework::Utils::Test::create_doc(
        'currency',
        {
            symbol           => $_,
            recorded_date    => $date_start,
            chronicle_reader => BOM::System::Chronicle::get_chronicle_reader(),
            chronicle_writer => BOM::System::Chronicle::get_chronicle_writer(),
        }) for (qw/JPY USD JPY-USD/);

    my $c = produce_contract({
        bet_type     => 'CALL',
        underlying   => 'frxUSDJPY',
        barrier      => 'S0P',
        currency     => 'USD',
        payout       => 100,
        date_expiry  => $date_expiry,
        date_start   => $date_start,
        date_pricing => $date_start,
    });

    my $pricing_vol = $c->pricing_vol;

    is $pricing_vol, $expected_pricing_vol, "correct pricing_vol for " . $date_start->datetime . " to " . $date_expiry->datetime;
    $counter++;
}
done_testing;
