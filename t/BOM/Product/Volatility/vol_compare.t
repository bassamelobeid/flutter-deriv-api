use strict;
use warnings;

use 5.010;
use Test::Most;
use Test::FailWarnings;
use Test::Warn;
use YAML::XS;

use BOM::Product::ContractFactory qw(produce_contract);
use Date::Utility;
use BOM::Market::Underlying;
use BOM::Test::Data::Utility::UnitTestMarketData;

#lets cover a whole week + next week's first day
my @expiry_dates = (
    Date::Utility->new('2016-05-09'), Date::Utility->new('2016-05-10'), Date::Utility->new('2016-05-11'), Date::Utility->new('2016-05-12'),
    Date::Utility->new('2016-05-13'), Date::Utility->new('2016-05-16'));

my $surfaces     = YAML::XS::LoadFile('/home/git/regentmarkets/bom/t/BOM/Product/Volatility/vol_compare_data.yml');
my @expectations = (
    0.115613634773125,, 0.116699407410011, 0.117816350197698, 0.118965983697917, 0.120149934389414,
    0.121369944346505,   0.123473886322257,   0.128947357336417,   0.128365233156442,   0.128570145168327,   0.128689675610857,
    0.129431436871489,   0.125206647169326,   0.128888788838061,   0.137605396426659,   0.130102100418083,   0.126588774386389,
    0.125328633259117,   0.116964466904928,   0.116248666881588,   0.117700010847767,   0.118122713373845,   0.114389287354891,
    0.1144596893604,     0.108946781879554,   0.10956586649469,    0.111018137996465,   0.107368004341732,   0.102318020702803,
    0.0991618430035347,  0.137947145520284,   0.121024473495401,   0.124376931027656,   0.124475884448478,   0.101230114896816,
    0.0959510220026349,  0.00757437917514861, 0.00778198333102526, 0.00800896106081685, 0.00825850972456439, 0.00853461477765254,
    0.00884231809811579, 0.00724460224263711, 0.0075452572397698,  0.00789076437323234, 0.00829334267482528, 0.00877042045598026,
    0.009347884143221,   0.0723494468253172,  0.0852449157300443,  0.0822947226791736,  0.124866286269164,   0.130129702772941,
    0.129241732962012,   0.129309553065762,   0.129445326726474,   0.130207206006057,   0.128580711862874,   0.132086785250912,
    0.140878421907769,   0.133732945785293,   0.130481326401865,   0.129464644739279,   0.124306944259738,   0.123081184348559,
    0.124589014387369,   0.125323787645648,   0.121928283486405,   0.122466407740436,   0.11668968595111,    0.116424375040136,
    0.117742755182725,   0.115229697846509,   0.111920646598312,   0.110360042886688,   0.135203188021698,   0.122089483720795,
    0.124391024395771,   0.123526247225865,   0.105446668618756,   0.102872963264362,   0.0459489688916187,  0.046937261726361,
    0.0479921942348002,  0.0491216087845775,  0.0503347037900448,  0.0516423508875501,  0.00824604747736454, 0.00848055720716514,
    0.00873682412645959, 0.0090184237166531,  0.00932981104067912, 0.00967661992399475, 0.0864252321264496,  0.0923074184117928,
    0.091183591652117,   0.0865889835848276,  0.0852132259927771,  0.0819972197271902,  0.0750066784052735,  0.082986724639559,
    0.0850833872849943,  0.129369820450608,   0.132205226874038,   0.141094164679279,   0.134487453019025,   0.131537004640507,
    0.130606245151438,   0.12816613225166,    0.126573644282302,   0.128052306078893,   0.128857925366941,   0.125856289534569,
    0.126514813884744,   0.121916403021296,   0.121038184702008,   0.122227484635593,   0.120369379792772,   0.118039615101481,
    0.117320755957257,   0.133341477011178,   0.122783306855972,   0.12439894946107,    0.122917296338115,   0.107997338004852,
    0.106892932581922,   0.0749425554873612,  0.0762237633991837,  0.0775730081390103,  0.0789965327921445,  0.0805014130693876,
    0.0820957057451813,  0.0536367421064963,  0.0547903871396408,  0.0560218213965027,  0.0573401993591445,  0.0587562584378857,
    0.0602826892135075,  0.101488213126742,   0.100126329509015,   0.100244922531733,   0.0965572170702481,  0.0968623480511736,
    0.0972160754660971,  0.0837697824448593,  0.0900721972548627,  0.0925691528813631,  0.0933234585630715,  0.088776745826565,
    0.0869212638959049,  0.0875620380241707,  0.0900620104680125,  0.087528779456953,   0.129398359075312,   0.12753995699081,
    0.128943789816582,   0.129665917315065,   0.127210870645975,   0.127771517176396,   0.126424631023091,   0.125149858516327,
    0.126361882385206,   0.124840415534933,   0.12294118410548,    0.122642486743122,   0.131994776308324,   0.12327091487403,
    0.124403576393134,   0.122493307145827,   0.109707543889735,   0.10952475966612,    0.0891767551597367,  0.0904417894102539,
    0.0917622308467298,  0.0931422459498483,  0.0945864534543511,  0.0960999894880086,  0.0877401389634086,  0.0892401323771939,
    0.0908197809343816,  0.092486393821425,   0.0942482550336647,  0.0961147971615297,  0.108234041867567,   0.103655770133688,
    0.104101345713654,   0.100525192601154,   0.101144983102909,   0.102251236764188,   0.0936996681318697,  0.0978997790866509,
    0.100324695123518,   0.102689339230414,   0.101989053553748,   0.103406776151059,   0.0948656786451655,  0.0974329920649369,
    0.0961191250493431,  0.0967514008511757,  0.0902014199657547,  0.0866190866342882,  0.0892314887528486,  0.091379979018691,
    0.0881165508413298,  0.130227310237285,   0.128738998887633,   0.130093940458169,   0.128677881089827,   0.126824494837509,
    0.126667304421623,   0.131324108932281,   0.123708459147686,   0.124541905694309,   0.122512856037966,   0.111040128822858,
    0.111248816595367,   0.0971534348677158,  0.0983529593535137,  0.0995980377354207,  0.100891628331006,   0.102236965602314,
    0.103637594206569,   0.10280993172025,    0.104300065864171,   0.105856927667547,   0.10748565069601,    0.109191939012964,
    0.110982151370685,   0.1116965494059,     0.105465795301624,   0.10602707502451,    0.102450543545756,   0.103157642974104,
    0.10452840456263,    0.0978530253913755,  0.101097205311615,   0.103348040944178,   0.106107377118399,   0.106386418237007,
    0.108378207058829,   0.102666522446744,   0.104933795046333,   0.10424996540124,    0.105633259612854,   0.102171958811071,
    0.101774053395503,   0.094259973092181,   0.0963687307866618,  0.0947801608645298,  0.0926145317822086,  0.091164030204083,
    0.0827335493826894,  0.135376049809487,   0.129069057777235,   0.139227910069111,   0.0911569092274852,  0.0920129178438543,
    0.0928935013295518,  0.0937998585195419,  0.0947332717556782,  0.0956951145174677,  0.1002204881625,     0.0936589280818024,
    0.0938359625659936,  0.0903375622234448,  0.0905451627964758,  0.0913689227814181,  0.0865357883285416,  0.0882262846234929,
    0.089549202593603,   0.091611683360623,   0.091861386667122,   0.0932262943124998,  0.0892659219365865,  0.0902252611500158,
    0.0891269772552082,  0.0896713346665668,  0.0870492872026083,  0.0866334098942294,  0.0824085238934122,  0.0827421987847395,
    0.0822036373357723,  0.0808944428928647,  0.0807144544257277,  0.0773058548990876,  0.0956476462626073,  0.0902016686584223,
    0.0936834510909829,  0.0944917675323146,  0.089145953351008,   0.0925543885682594,  0.00734434277730811, 0.00754564172844114,
    0.00776572585978132, 0.00800769542473274, 0.00827541483691465, 0.00857377284814223, 0.00702457858268253, 0.00731610227788552,
    0.00765111590001225, 0.00804146737572415, 0.0085040556999778,  0.00906398110094655, 0.0508841382171217,  0.0848430998697441,
    0.0833805436701369,
);

my $counter = 0;

for my $expiry (@expiry_dates) {
    my $start_date = $expiry->minus_time_interval('8d');
    my $end_of_day = $expiry->plus_time_interval('23h59m59s');
    if ($end_of_day->day_of_week == 5) {
        $end_of_day = $expiry->plus_time_interval('21h');
    }

    my @dates;

    while ($start_date->is_before($end_of_day)) {
        push @dates, $start_date;
        $start_date = $start_date->plus_time_interval('4h');
    }

    foreach my $date (@dates) {
        price_contract($date, $end_of_day, $expectations[$counter]);
    }
}

sub price_contract {
    my ($date_start, $date_expiry, $expected_pricing_vol) = @_;

    return if ($date_expiry->epoch - $date_start->epoch < (12 * 60 * 60));
    die "Could not load volatility surface for " . $date_start->epoch if not defined $surfaces->{$date_start->epoch};

    BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
        'volsurface_delta',
        {
            recorded_date => $date_start,
            surface       => $surfaces->{$date_start->epoch}->{surface},
            symbol        => 'frxUSDJPY',
        });

    Quant::Framework::Utils::Test::create_doc(
        'currency',
        {
            symbol           => $_,
            recorded_date    => $date_start,
            chronicle_reader => BOM::System::Chronicle::get_chronicle_reader(),
            chronicle_writer => BOM::System::Chronicle::get_chronicle_writer(),
        }) for (qw/JPY USD JPY-USD/);

    my $c = produce_contract({
        bet_type     => 'CALL',
        underlying   => 'frxUSDJPY',
        barrier      => 'S0P',
        currency     => 'USD',
        payout       => 100,
        date_expiry  => $date_expiry,
        date_start   => $date_start,
        date_pricing => $date_start,
    });

    my $pricing_vol = $c->pricing_vol;

    is $pricing_vol, $expected_pricing_vol, "correct pricing_vol for " . $date_start->datetime . " to " . $date_expiry->datetime;
    $counter++;
}

done_testing;
