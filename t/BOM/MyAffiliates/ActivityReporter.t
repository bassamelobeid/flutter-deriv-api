use strict;
use warnings;

use Test::More (tests => 5);
use Test::Warnings;
use BOM::Test::Data::Utility::UnitTestCollectorDatabase qw(:init);
use BOM::Test::Data::Utility::UnitTestDatabase qw(:init);
use BOM::MyAffiliates::ActivityReporter;

my $day_one = '2011-03-08 12:59:59';
my $day_two = '2011-03-09 12:59:59';

subtest 'binary' => sub {
    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code        => 'CR',
        myaffiliates_token => 'dummy_affiliate_token',
    });
    my $account = $client->set_default_account('USD');

    $client->payment_legacy_payment(
        currency         => 'USD',
        amount           => 9098,
        remark           => 'here is money',
        payment_type     => 'credit_debit_card',
        transaction_time => $day_one,
        payment_time     => $day_one,
        source           => 1,
    );

    $client->payment_legacy_payment(
        currency         => 'USD',
        amount           => -987,
        remark           => 'here is money',
        payment_type     => 'credit_debit_card',
        transaction_time => $day_one,
        payment_time     => $day_one,
        source           => 1,
    );

    $client->payment_legacy_payment(
        currency         => 'USD',
        amount           => 270,
        remark           => 'here is money',
        payment_type     => 'credit_debit_card',
        transaction_time => $day_two,
        payment_time     => $day_two,
        source           => 1,
    );

    my $fmb = BOM::Test::Data::Utility::UnitTestDatabase::create_fmb({
        type             => 'fmb_higher_lower',
        account_id       => $account->id,
        buy_price        => 456,
        sell_price       => 40,
        payment_time     => $day_one,
        transaction_time => $day_one,
        start_time       => $day_one,
        expiry_time      => $day_one,
        source           => 1,
    });

    my $account_data = {
        client_loginid => $client->loginid,
        currency_code  => 'USD',
    };
    my $fmb_helper = BOM::Database::Helper::FinancialMarketBet->new({
        account_data => $account_data,
        bet          => $fmb,
        db           => $account->db,
    });
    $fmb_helper->bet_data->{quantity}  = 1;
    $fmb_helper->bet_data->{sell_time} = Date::Utility->new($day_one)->plus_time_interval('15s')->db_timestamp;
    $fmb_helper->buy_bet;

    my $trxn = BOM::Database::AutoGenerated::Rose::Transaction::Manager->get_transaction(
        query => [
            financial_market_bet_id => $fmb->id,
            action_type             => 'buy'
        ],
        db => $account->db,
    )->[0];

    $fmb->sell_price(40);
    $fmb_helper->sell_bet;

    $fmb = BOM::Test::Data::Utility::UnitTestDatabase::create_fmb({
        type             => 'fmb_higher_lower',
        account_id       => $account->id,
        buy_price        => 789,
        sell_price       => 40,
        payment_time     => $day_one,
        transaction_time => $day_one,
        start_time       => $day_one,
        expiry_time      => $day_two,
        source           => 1,
    });

    $fmb_helper = BOM::Database::Helper::FinancialMarketBet->new({
        account_data => $account_data,
        bet          => $fmb,
        db           => $account->db,
    });
    $fmb_helper->bet_data->{quantity}  = 1;
    $fmb_helper->bet_data->{sell_time} = Date::Utility->new($day_one)->plus_time_interval('15s')->db_timestamp;
    $fmb_helper->buy_bet;

    $trxn = BOM::Database::AutoGenerated::Rose::Transaction::Manager->get_transaction(
        query => [
            financial_market_bet_id => $fmb->id,
            action_type             => 'buy'
        ],
        db => $account->db,
    )->[0];

    $fmb->sell_price(40);
    $fmb_helper->sell_bet;

    subtest 'Activity report for specific date' => sub {
        plan tests => 3;

        my $processing_date = Date::Utility->new(substr($day_one, 0, 10));
        my $reporter        = BOM::MyAffiliates::ActivityReporter->new(
            brand           => Brands->new(name => 'binary'),
            processing_date => $processing_date,
        );
        is $reporter->output_file_path(), '/db/myaffiliates/binary/pl_' . $processing_date->date_yyyymmdd . '.csv', 'Output file path is correct';

        my @csv = $reporter->activity();
        @csv = grep { my $id = $client->loginid; /$id/ } @csv;    # Filters other clients out

        is(@csv, 1, 'Check if there is only one entry for our client on the report');
        chomp $csv[0];
        diag $reporter->headers_data();
        is(
            $csv[0],
            '2011-03-08,' . $client->loginid . ',1165.00,9098.00,0.00,912.00,1578.00,2011-03-08,987.00,9098.00',
            'Check if values are correct in report'
        );
    };
};

subtest 'Not funded account with transaction (bonus?)' => sub {
    plan tests => 1;

    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code        => 'CR',
        myaffiliates_token => 'dummy_affiliate_token',
    });
    my $account = $client->set_default_account('USD');

    $client->payment_legacy_payment(
        currency     => 'USD',
        amount       => 5000,
        remark       => 'here is money',
        payment_type => 'credit_debit_card',
        source       => 1,
    );

    $client->payment_legacy_payment(
        currency     => 'USD',
        amount       => 800,
        remark       => 'here is money',
        payment_type => 'credit_debit_card',
        source       => 1,
    );

    BOM::Test::Data::Utility::UnitTestDatabase::create_fmb({
        type             => 'fmb_higher_lower',
        account_id       => $account->id,
        buy_price        => 789,
        sell_price       => 40,
        payment_time     => $day_one,
        transaction_time => $day_one,
        start_time       => $day_one,
        expiry_time      => $day_two,
        source           => 1,
    });

    my $reporter = BOM::MyAffiliates::ActivityReporter->new(
        brand           => Brands->new(name => 'binary'),
        processing_date => Date::Utility->new(substr($day_one, 0, 10)));

    my @csv = $reporter->activity();
    @csv = grep { my $id = $client->loginid; /$id/ } @csv;
    is(@csv, 1, 'Client is on the list');
};

subtest 'Virtual clients are not reported' => sub {
    plan tests => 1;

    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code        => 'VRTC',
        myaffiliates_token => 'dummy_affiliate_token',
    });
    my $account = $client->set_default_account('USD');

    $client->payment_legacy_payment(
        currency         => 'USD',
        amount           => 270,
        remark           => 'here is money',
        payment_type     => 'credit_debit_card',
        transaction_time => $day_two,
        payment_time     => $day_two,
        source           => 1,
    );

    my $reporter = BOM::MyAffiliates::ActivityReporter->new(
        brand           => Brands->new(name => 'binary'),
        processing_date => Date::Utility->new(substr($day_one, 0, 10)));

    my @csv = $reporter->activity();
    @csv = grep { /VRTC/ } @csv;    # Filters only VRTC clients
    is(@csv, 0, 'No Virtual client is not on the list');
};

subtest 'deriv' => sub {
    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code        => 'CR',
        myaffiliates_token => 'dummy_affiliate_token',
    });
    my $account = $client->set_default_account('USD');

    $client->payment_legacy_payment(
        currency         => 'USD',
        amount           => 9098,
        remark           => 'here is money',
        payment_type     => 'credit_debit_card',
        transaction_time => $day_one,
        payment_time     => $day_one,
        source           => 16929,
    );

    $client->payment_legacy_payment(
        currency         => 'USD',
        amount           => -987,
        remark           => 'here is money',
        payment_type     => 'credit_debit_card',
        transaction_time => $day_one,
        payment_time     => $day_one,
        source           => 16929,
    );

    $client->payment_legacy_payment(
        currency         => 'USD',
        amount           => 270,
        remark           => 'here is money',
        payment_type     => 'credit_debit_card',
        transaction_time => $day_two,
        payment_time     => $day_two,
        source           => 16929,
    );

    my $fmb = BOM::Test::Data::Utility::UnitTestDatabase::create_fmb({
        type             => 'fmb_higher_lower',
        account_id       => $account->id,
        buy_price        => 456,
        sell_price       => 40,
        payment_time     => $day_one,
        transaction_time => $day_one,
        start_time       => $day_one,
        expiry_time      => $day_one,
        source           => 16929,
    });

    my $account_data = {
        client_loginid => $client->loginid,
        currency_code  => 'USD',
    };
    my $fmb_helper = BOM::Database::Helper::FinancialMarketBet->new({
        account_data => $account_data,
        bet          => $fmb,
        db           => $account->db,
    });
    $fmb_helper->bet_data->{quantity}  = 1;
    $fmb_helper->bet_data->{sell_time} = Date::Utility->new($day_one)->plus_time_interval('15s')->db_timestamp;
    $fmb_helper->buy_bet;

    my $trxn = BOM::Database::AutoGenerated::Rose::Transaction::Manager->get_transaction(
        query => [
            financial_market_bet_id => $fmb->id,
            action_type             => 'buy'
        ],
        db => $account->db,
    )->[0];

    $fmb->sell_price(40);
    $fmb_helper->sell_bet;

    $fmb = BOM::Test::Data::Utility::UnitTestDatabase::create_fmb({
        type             => 'fmb_higher_lower',
        account_id       => $account->id,
        buy_price        => 789,
        sell_price       => 40,
        payment_time     => $day_one,
        transaction_time => $day_one,
        start_time       => $day_one,
        expiry_time      => $day_two,
        source           => 16929,
    });

    $fmb_helper = BOM::Database::Helper::FinancialMarketBet->new({
        account_data => $account_data,
        bet          => $fmb,
        db           => $account->db,
    });
    $fmb_helper->bet_data->{quantity}  = 1;
    $fmb_helper->bet_data->{sell_time} = Date::Utility->new($day_one)->plus_time_interval('15s')->db_timestamp;
    $fmb_helper->buy_bet;

    $trxn = BOM::Database::AutoGenerated::Rose::Transaction::Manager->get_transaction(
        query => [
            financial_market_bet_id => $fmb->id,
            action_type             => 'buy'
        ],
        db => $account->db,
    )->[0];

    $fmb->sell_price(40);
    $fmb_helper->sell_bet;

    subtest 'Activity report for specific date' => sub {
        plan tests => 3;

        my $processing_date = Date::Utility->new(substr($day_one, 0, 10));
        my $reporter        = BOM::MyAffiliates::ActivityReporter->new(
            brand           => Brands->new(name => 'deriv'),
            processing_date => $processing_date,
        );
        is $reporter->output_file_path(), '/db/myaffiliates/deriv/pl_' . $processing_date->date_yyyymmdd . '.csv', 'Output file path is correct';

        my @csv = $reporter->activity();
        @csv = grep { my $id = $client->loginid; /$id/ } @csv;    # Filters other clients out

        is(@csv, 1, 'Check if there is only one entry for our client on the report');
        chomp $csv[0];
        diag $reporter->headers_data();
        is(
            $csv[0],
            '2011-03-08,deriv_' . $client->loginid . ',0.00,9098.00,0.00,456.00,789.00,2011-03-08,987.00,9098.00',
            'Check if values are correct in report'
        );
    };
};
