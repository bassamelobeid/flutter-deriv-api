# This test calls code that uses various MyAffiliates APIs, so if they are not accessable for any reason then the tests may fail.
# They also rely on specific test data set up in the MyAffiliates backend. If this data was to change, again the tests may break.

use List::Util qw( first );
use Test::Exception;
use Test::MockObject::Extends;
use Test::More skip_all => 'this functionality deprecated';
use Test::NoWarnings;

use BOM::Test::Data::Utility::UnitTestDatabase qw(:init);

use BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure;
use BOM::MyAffiliates;
use BOM::User::Client;
use BOM::MyAffiliates::BackfillManager;

my $aff = BOM::MyAffiliates->new;

subtest 'backfill_promo_codes' => sub {
    plan tests => 6;

    my $backfill_manager = BOM::MyAffiliates::BackfillManager->new;
    {
        my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
            broker_code => 'CR',
        });

        $client->promo_code('BOM2009');
        is($client->promo_code_checked_in_myaffiliates, 0, "$client promo code not yet checked.");
        $client->save;

        $backfill_manager->backfill_promo_codes;

        $client = BOM::User::Client->new({loginid => $client->loginid});
        is($client->promo_code_checked_in_myaffiliates, 1,  "After backfilling promo codes, $client promo code has been checked.");
        is(length $client->myaffiliates_token,          32, "$client MyAffiliates token is set.");
        my $promo_code_affiliate_id = $aff->get_affiliate_id_from_token($client->myaffiliates_token);
        is($promo_code_affiliate_id, 2, 'promo code BOM2009 is mapped to affiliate id 2.');
    }

    # since this token has a specified media_id, it will be different than the generic
    # token that would be set for a promo-code (which wouldn't contain media_id).
    my $cookied_token = $aff->get_token({
        affiliate_id => 2,
        media_id     => 2
    });

    {
        my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
            broker_code => 'CR',
        });

        $client->myaffiliates_token($cookied_token);
        # BOM2009 is linked to the same affiliate (id 2).
        $client->promo_code('BOM2009');
        $client->promo_code_checked_in_myaffiliates(0);
        $client->save;

        $backfill_manager->backfill_promo_codes;

        $client = BOM::User::Client->new({loginid => $client->loginid});
        is($client->promo_code_checked_in_myaffiliates, 1, "After backfilling promo codes, $client promo code has been checked.");
        is($client->myaffiliates_token, $cookied_token, "$client MyAffiliates token has not changed.");
    }
};

subtest 'get_token throw' => sub {
    plan tests => 1;

    $aff = Test::MockObject::Extends->new($aff);
    $aff->mock('get_default_plan', sub { return; });

    throws_ok { $aff->get_token({affiliate_id => 1234}) } qr/Unable to get Setup ID for affiliate/, 'Throws when we cannot get Setup ID.';
};

