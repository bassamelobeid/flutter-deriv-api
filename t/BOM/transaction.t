#!/etc/rmg/bin/perl

use strict;
use warnings;
use Test::MockTime qw/:all/;
use Test::MockModule;
use Test::More;
use Test::Warnings;
use Test::Exception;
use Guard;
use Crypt::NamedKeys;
use BOM::User::Client;
use BOM::User::Password;
use BOM::Config::Runtime;
use BOM::Config::Chronicle;

use Date::Utility;
use BOM::Transaction;
use BOM::Transaction::Validation;
use Math::Util::CalculatedValue::Validatable;
use BOM::Product::ContractFactory                qw( produce_contract );
use BOM::Test::Data::Utility::UnitTestDatabase   qw(:init);
use BOM::Test::Data::Utility::FeedTestDatabase   qw(:init);
use BOM::Test::Data::Utility::UnitTestMarketData qw(:init);
use BOM::Test::Data::Utility::UnitTestRedis      qw(initialize_realtime_ticks_db);
use BOM::Test::Helper::Client                    qw(create_client top_up);
use BOM::Test::Time                              qw( sleep_till_next_second );
use BOM::Platform::Client::IDAuthentication;

use BOM::MarketData qw(create_underlying_db);
use BOM::MarketData qw(create_underlying);
use BOM::MarketData::Types;

Crypt::NamedKeys::keyfile '/etc/rmg/aes_keys.yml';

my $mock_validation = Test::MockModule->new('BOM::Transaction::Validation');

$mock_validation->mock(validate_tnc          => sub { note "mocked Transaction::Validation->validate_tnc returning nothing";          undef });
$mock_validation->mock(compliance_checks     => sub { note "mocked Transaction::Validation->compliance_checks returning nothing";     undef });
$mock_validation->mock(check_tax_information => sub { note "mocked Transaction::Validation->check_tax_information returning nothing"; undef });

#create an empty un-used even so ask_price won't fail preparing market data for pricing engine
#Because the code to prepare market data is called for all pricings in Contract
BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
    'economic_events',
    {
        events => [{
                symbol       => 'USD',
                release_date => 1,
                source       => 'forexfactory',
                impact       => 1,
                event_name   => 'FOMC',
            }]});

my $now = Date::Utility->new;
BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
    'currency',
    {
        symbol        => $_,
        recorded_date => Date::Utility->new,
    }) for qw(JPY USD JPY-USD);

BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
    'randomindex',
    {
        symbol => 'R_50',
        date   => Date::Utility->new
    });

BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
    'volsurface_delta',
    {
        symbol        => 'frxUSDJPY',
        recorded_date => $now,
    });
BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
    'randomindex',
    {
        symbol => 'R_100',
        date   => Date::Utility->new
    });

my $old_tick1 = BOM::Test::Data::Utility::FeedTestDatabase::create_tick({
    epoch      => $now->epoch - 99,
    underlying => 'R_50',
    quote      => 76.5996,
    bid        => 76.6010,
    ask        => 76.2030,
});

my $old_tick2 = BOM::Test::Data::Utility::FeedTestDatabase::create_tick({
    epoch      => $now->epoch - 52,
    underlying => 'R_50',
    quote      => 76.6996,
    bid        => 76.7010,
    ask        => 76.3030,
});

my $tick = BOM::Test::Data::Utility::FeedTestDatabase::create_tick({
    epoch      => $now->epoch,
    underlying => 'R_50',
});

my $tick_r100 = BOM::Test::Data::Utility::FeedTestDatabase::create_tick({
    epoch      => $now->epoch,
    underlying => 'R_100',
    quote      => 100,
});

# Spread is calculated base on spot of the underlying.
# In this case, we mocked the spot to 100.
my $mocked_underlying = Test::MockModule->new('Quant::Framework::Underlying');
$mocked_underlying->mock('spot', sub { 100 });

my $underlying      = create_underlying('R_50');
my $underlying_r100 = create_underlying('R_100');

sub db {
    return BOM::Database::ClientDB->new({
            broker_code => 'CR',
        })->db;
}

sub get_transaction_from_db {
    my $bet_class = shift;
    my $txnid     = shift;

    my $stmt = <<"SQL";
SELECT t.*, b.*, c.*, v1.*, v2.*, t2.*
  FROM transaction.transaction t
  LEFT JOIN bet.financial_market_bet b ON t.financial_market_bet_id=b.id
  LEFT JOIN bet.${bet_class} c ON b.id=c.financial_market_bet_id
  LEFT JOIN data_collection.quants_bet_variables v1 ON t.id=v1.transaction_id
  LEFT JOIN data_collection.quants_bet_variables v2 ON b.id=v2.financial_market_bet_id AND v2.transaction_id<>t.id
  LEFT JOIN transaction.transaction t2 ON t2.financial_market_bet_id=t.financial_market_bet_id AND t2.id<>t.id
 WHERE t.id=\$1
SQL

    my $db = db;
    $stmt = $db->dbh->prepare($stmt);
    $stmt->execute($txnid);

    my $res = $stmt->fetchrow_arrayref;
    $stmt->finish;

    my @txn_col  = BOM::Database::AutoGenerated::Rose::Transaction->meta->columns;
    my @fmb_col  = BOM::Database::AutoGenerated::Rose::FinancialMarketBet->meta->columns;
    my @chld_col = BOM::Database::AutoGenerated::Rose::FinancialMarketBet->meta->{relationships}->{$bet_class}->class->meta->columns;
    my @qv_col   = BOM::Database::AutoGenerated::Rose::QuantsBetVariable->meta->columns;

    BAIL_OUT "DB structure does not match Rose classes"
        unless 2 * @txn_col + @fmb_col + @chld_col + 2 * @qv_col == @$res;

    my %txn;
    @txn{@txn_col} = splice @$res, 0, 0 + @txn_col;

    my %fmb;
    @fmb{@fmb_col} = splice @$res, 0, 0 + @fmb_col;

    my %chld;
    @chld{@chld_col} = splice @$res, 0, 0 + @chld_col;

    my %qv1;
    @qv1{@qv_col} = splice @$res, 0, 0 + @qv_col;

    my %qv2;
    @qv2{@qv_col} = splice @$res, 0, 0 + @qv_col;

    my %t2;
    @t2{@txn_col} = splice @$res, 0, 0 + @txn_col;

    return \%txn, \%fmb, \%chld, \%qv1, \%qv2, \%t2;
}

my $cl;
my $acc_usd;

####################################################################
# real tests begin here
####################################################################

lives_ok {
    $cl = create_client;

    #make sure client can trade
    ok(!BOM::Transaction::Validation->new({clients => [{client => $cl}]})->check_trade_status($cl),      "client can trade: check_trade_status");
    ok(!BOM::Transaction::Validation->new({clients => [{client => $cl}]})->_validate_client_status($cl), "client can trade: _validate_client_status");

    top_up $cl, 'USD', 5000;

    $acc_usd = $cl->account;
    is $acc_usd->currency_code, 'USD', 'got USD account';

    my $bal;
    is + ($bal = $acc_usd->balance + 0), 5000, 'USD balance is 5000 got: ' . $bal;
}
'client created and funded';

my ($trx, $fmb, $chld, $qv1, $qv2);

my $new_client = create_client;
top_up $new_client, 'USD', 5000;
my $new_acc_usd = $new_client->account;

subtest 'buy a bet', sub {
    plan tests => 11;
    lives_ok {
        my $contract = produce_contract({
                underlying => $underlying,
                bet_type   => 'CALL',
                currency   => 'USD',
                payout     => 1000,
                duration   => '15m',
#        date_start   => $now->epoch + 1,
#        date_expiry  => $now->epoch + 300,
                current_tick => $tick,
                barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 511.47,
            payout        => $contract->payout,
            amount_type   => 'payout',
            source        => 19,
            purchase_date => $contract->date_start,
        });
        my $error = $txn->buy;
        is $error, undef, 'no error';

        subtest 'transaction report', sub {
            plan tests => 11;
            note $txn->report;
            my $report = $txn->report;
            like $report, qr/\ATransaction Report:$/m,                                                    'header';
            like $report, qr/^\s*Client: \Q${\$cl}\E$/m,                                                  'client';
            like $report, qr/^\s*Contract: \Q${\$contract->code}\E$/m,                                    'contract';
            like $report, qr/^\s*Price: \Q${\$txn->price}\E$/m,                                           'price';
            like $report, qr/^\s*Payout: \Q${\$txn->payout}\E$/m,                                         'payout';
            like $report, qr/^\s*Amount Type: \Q${\$txn->amount_type}\E$/m,                               'amount_type';
            like $report, qr/^\s*Comment: \Q${\$txn->comment->[0]}\E$/m,                                  'comment';
            like $report, qr/^\s*Staff: \Q${\$txn->staff}\E$/m,                                           'staff';
            like $report, qr/^\s*Transaction Parameters: \$VAR1 = \{$/m,                                  'transaction parameters';
            like $report, qr/^\s*Transaction ID: \Q${\$txn->transaction_id}\E$/m,                         'transaction id';
            like $report, qr/^\s*Purchase Date: \Q${\$txn->purchase_date->datetime_yyyymmdd_hhmmss}\E$/m, 'purchase date';
        };

        ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

        # note explain $trx;

        subtest 'transaction row', sub {
            plan tests => 13;
            cmp_ok $trx->{id}, '>', 0, 'id';
            is $trx->{account_id},              $acc_usd->id,           'account_id';
            is $trx->{action_type},             'buy',                  'action_type';
            is $trx->{amount} + 0,              -511.47,                'amount';
            is $trx->{balance_after} + 0,       5000 - 511.47,          'balance_after';
            is $trx->{financial_market_bet_id}, $fmb->{id},             'financial_market_bet_id';
            is $trx->{payment_id},              undef,                  'payment_id';
            is $trx->{quantity},                1,                      'quantity';
            is $trx->{referrer_type},           'financial_market_bet', 'referrer_type';
            is $trx->{remark},                  undef,                  'remark';
            is $trx->{staff_loginid},           $cl->loginid,           'staff_loginid';
            is $trx->{source},                  19,                     'source';
            cmp_ok +Date::Utility->new($trx->{transaction_time})->epoch, '<=', time, 'transaction_time';
        };

        # note explain $fmb;

        subtest 'fmb row', sub {
            plan tests => 20;
            cmp_ok $fmb->{id}, '>', 0, 'id';
            is $fmb->{account_id},    $acc_usd->id,             'account_id';
            is $fmb->{bet_class},     'higher_lower_bet',       'bet_class';
            is $fmb->{bet_type},      'CALL',                   'bet_type';
            is $fmb->{buy_price} + 0, 511.47,                   'buy_price';
            is !$fmb->{expiry_daily}, !$contract->expiry_daily, 'expiry_daily';
            cmp_ok +Date::Utility->new($fmb->{expiry_time})->epoch, '>', time, 'expiry_time';
            is $fmb->{fixed_expiry}, undef, 'fixed_expiry';
            is !$fmb->{is_expired},  !0,    'is_expired';
            is !$fmb->{is_sold},     !0,    'is_sold';
            cmp_ok $fmb->{payout_price} + 0,                          '==', 1000, 'payout_price';
            cmp_ok +Date::Utility->new($fmb->{purchase_time})->epoch, '<=', time, 'purchase_time';
            like $fmb->{remark}, qr/\btrade\[511\.47000\]/, 'remark';
            is $fmb->{sell_price}, undef, 'sell_price';
            is $fmb->{sell_time},  undef, 'sell_time';
            cmp_ok +Date::Utility->new($fmb->{settlement_time})->epoch, '>', time, 'settlement_time';
            like $fmb->{short_code}, qr/CALL/, 'short_code';
            cmp_ok +Date::Utility->new($fmb->{start_time})->epoch, '<=', time, 'start_time';
            is $fmb->{tick_count},        undef,  'tick_count';
            is $fmb->{underlying_symbol}, 'R_50', 'underlying_symbol';
        };

        # note explain $chld;

        subtest 'chld row', sub {
            plan tests => 4;
            is $chld->{absolute_barrier},        undef,      'absolute_barrier';
            is $chld->{financial_market_bet_id}, $fmb->{id}, 'financial_market_bet_id';
            is $chld->{prediction},              undef,      'prediction';
            is $chld->{relative_barrier},        'S0P',      'relative_barrier';
        };

        # note explain $qv1;

        subtest 'qv row', sub {
            plan tests => 3;
            is $qv1->{financial_market_bet_id}, $fmb->{id}, 'financial_market_bet_id';
            is $qv1->{transaction_id},          $trx->{id}, 'transaction_id';
            is $qv1->{trade} + 0,               511.47,     'trade';
        };

        is $txn->contract_id,             $fmb->{id},            'txn->contract_id';
        is $txn->transaction_id,          $trx->{id},            'txn->transaction_id';
        is $txn->balance_after,           $trx->{balance_after}, 'txn->balance_after';
        is $txn->execute_at_better_price, 0,                     'txn->execute_at_better_price';
    }
    'survived';
};

subtest 'sell a bet', sub {
    plan tests => 10;
    lives_ok {
        set_relative_time 1;
        my $reset_time = guard { restore_time };
        my $contract   = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 1000,
            duration     => '15m',
            date_start   => $now->epoch,
            current_tick => $tick,
            entry_tick   => $tick,
            exit_tick    => $tick,
            barrier      => 'S0P',
        });
        my $txn;
        #note 'bid price: ' . $contract->bid_price;
        my $error = do {
            my $mocked           = Test::MockModule->new('BOM::Transaction');
            my $mocked_validator = Test::MockModule->new('BOM::Transaction::Validation');
            $mocked_validator->mock('_validate_trade_pricing_adjustment', sub { });
            $mocked->mock('price', sub { $contract->bid_price });
            $txn = BOM::Transaction->new({
                purchase_date => $contract->date_start,
                client        => $cl,
                contract      => $contract,
                contract_id   => $fmb->{id},
                price         => $contract->bid_price,
                source        => 23,
            });
            $txn->sell;
        };
        is $error, undef, 'no error';

        ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

        # note explain $trx;

        subtest 'transaction row', sub {
            plan tests => 13;
            cmp_ok $trx->{id}, '>', 0, 'id';
            is $trx->{account_id},              $acc_usd->id,                         'account_id';
            is $trx->{action_type},             'sell',                               'action_type';
            is $trx->{amount} + 0,              $contract->bid_price,                 'amount';
            is $trx->{balance_after} + 0,       5000 - 511.47 + $contract->bid_price, 'balance_after';
            is $trx->{financial_market_bet_id}, $fmb->{id},                           'financial_market_bet_id';
            is $trx->{payment_id},              undef,                                'payment_id';
            is $trx->{quantity},                1,                                    'quantity';
            is $trx->{referrer_type},           'financial_market_bet',               'referrer_type';
            is $trx->{remark},                  undef,                                'remark';
            is $trx->{staff_loginid},           $cl->loginid,                         'staff_loginid';
            is $trx->{source},                  23,                                   'source';
            cmp_ok +Date::Utility->new($trx->{transaction_time})->epoch, '<=', time, 'transaction_time';
        };

        # note explain $fmb;

        subtest 'fmb row', sub {
            plan tests => 20;
            cmp_ok $fmb->{id}, '>', 0, 'id';
            is $fmb->{account_id},    $acc_usd->id,             'account_id';
            is $fmb->{bet_class},     'higher_lower_bet',       'bet_class';
            is $fmb->{bet_type},      'CALL',                   'bet_type';
            is $fmb->{buy_price} + 0, 511.47,                   'buy_price';
            is !$fmb->{expiry_daily}, !$contract->expiry_daily, 'expiry_daily';
            cmp_ok +Date::Utility->new($fmb->{expiry_time})->epoch, '>', time, 'expiry_time';
            is $fmb->{fixed_expiry}, undef,                  'fixed_expiry';
            is !$fmb->{is_expired},  !$contract->is_expired, 'is_expired';
            is !$fmb->{is_sold},     !1,                     'is_sold';
            cmp_ok $fmb->{payout_price} + 0,                          '==', 1000, 'payout_price';
            cmp_ok +Date::Utility->new($fmb->{purchase_time})->epoch, '<=', time, 'purchase_time';
            like $fmb->{remark}, qr/\btrade\[511\.47000\]/, 'remark';
            is $fmb->{sell_price} + 0, $contract->bid_price, 'sell_price';
            cmp_ok +Date::Utility->new($fmb->{sell_time})->epoch,       '<=', time, 'sell_time';
            cmp_ok +Date::Utility->new($fmb->{settlement_time})->epoch, '>',  time, 'settlement_time';
            like $fmb->{short_code}, qr/CALL/, 'short_code';
            cmp_ok +Date::Utility->new($fmb->{start_time})->epoch, '<=', time, 'start_time';
            is $fmb->{tick_count},        undef,  'tick_count';
            is $fmb->{underlying_symbol}, 'R_50', 'underlying_symbol';
        };

        # note explain $chld;

        subtest 'chld row', sub {
            plan tests => 4;
            is $chld->{absolute_barrier},        undef,      'absolute_barrier';
            is $chld->{financial_market_bet_id}, $fmb->{id}, 'financial_market_bet_id';
            is $chld->{prediction},              undef,      'prediction';
            is $chld->{relative_barrier},        'S0P',      'relative_barrier';
        };

        # note explain $qv1;

        subtest 'qv row', sub {
            plan tests => 3;
            is $qv1->{financial_market_bet_id}, $fmb->{id},           'financial_market_bet_id';
            is $qv1->{transaction_id},          $trx->{id},           'transaction_id';
            is $qv1->{trade} + 0,               $contract->bid_price, 'trade';
        };

        # note explain $qv2;

        subtest 'qv row (buy transaction)', sub {
            plan tests => 3;
            is $qv2->{financial_market_bet_id}, $fmb->{id}, 'financial_market_bet_id';
            isnt $qv2->{transaction_id},        $trx->{id}, 'transaction_id';
            is $qv2->{trade} + 0,               511.47,     'trade';
        };

        is $txn->contract_id,    $fmb->{id},            'txn->contract_id';
        is $txn->transaction_id, $trx->{id},            'txn->transaction_id';
        is $txn->balance_after,  $trx->{balance_after}, 'txn->balance_after';
    }
    'survived';
};

subtest 'insufficient balance: buy bet for 100.01 with a balance of 100', sub {
    plan tests => 7;
    lives_ok {
        top_up $cl, 'USD', 100 - $trx->{balance_after};
        is $acc_usd->balance + 0, 100, 'USD balance is now 100';

        my $now      = Date::Utility->new;
        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            stake        => 100.01,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 100.01,
            payout        => $contract->payout,
            amount_type   => 'stake',
            purchase_date => $contract->date_start,
        });
        my $error = $txn->buy;

        SKIP: {
            skip 'no error', 5
                if not defined $error || ref $error ne 'Error::Base';

            is $error->get_type, 'InsufficientBalance', 'error is InsufficientBalance';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';

            subtest 'try again with an expired bet worth 100', sub {
                top_up $cl, 'USD', 100;
                is $acc_usd->balance + 0, 200, 'USD balance is now 200';

                my $contract_expired = produce_contract({
                    underlying   => $underlying,
                    bet_type     => 'CALL',
                    currency     => 'USD',
                    stake        => 100,
                    date_start   => $now->epoch - 100,
                    date_expiry  => $now->epoch - 50,
                    current_tick => $tick,
                    entry_tick   => $old_tick1,
                    exit_tick    => $old_tick2,
                    barrier      => 'S0P',
                });

                my $txn = BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract_expired,
                    price         => 100,
                    payout        => $contract_expired->payout,
                    amount_type   => 'stake',
                    purchase_date => $now->epoch - 101,
                });
                my $error = $txn->buy(skip_validation => 1);

                is $error,                undef, 'no error';
                is $acc_usd->balance + 0, 100,   'USD balance is now 100 again';

                # here our balance wouldn't allow us to buy a bet for 100.01.
                # but we have an expired but unsold contract that's worth 100.
                # Hence, the buy should succeed.

                my $txn_id_buy_expired_contract = $txn->transaction_id;
                ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn_id_buy_expired_contract;
                is $fmb->{is_sold}, 0, 'have expired but unsold contract in DB';

                $txn = BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 100.01,
                    payout        => $contract->payout,
                    amount_type   => 'stake',
                    source        => 31,
                    purchase_date => $now,
                });
                $error = $txn->buy;

                is $error->get_type, 'InsufficientBalance', 'error is InsufficientBalance';

                # check if the expired contract still has not been sold
                ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn_id_buy_expired_contract;
                is $fmb->{is_sold}, 0, 'have expired but unsold contract in DB';
            };
        }
    }
    'survived';
};

subtest 'exactly sufficient balance: buy bet for 100 with balance of 100', sub {
    plan tests => 9;
    lives_ok {
        unless ($acc_usd->balance + 0 == 100) {
            top_up $cl, 'USD', 100 - $acc_usd->balance;
        }
        is $acc_usd->balance + 0, 100, 'USD balance is now 100';

        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            stake        => 100.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 100.00,
            payout        => $contract->payout,
            amount_type   => 'stake',
            purchase_date => $contract->date_start,
        });
        my $error = $txn->buy;
        is $error, undef, 'no error';

        ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

        is $txn->contract_id, $fmb->{id}, 'txn->contract_id';
        cmp_ok $txn->contract_id, '>', 0, 'txn->contract_id > 0';
        is $txn->transaction_id, $trx->{id}, 'txn->transaction_id';
        cmp_ok $txn->transaction_id, '>', 0, 'txn->transaction_id > 0';
        is $txn->balance_after,     $trx->{balance_after}, 'txn->balance_after';
        is $txn->balance_after + 0, 0,                     'txn->balance_after == 0';
    }
    'survived';
};

subtest 'max_balance validation: try to buy a bet with a balance of 100 and max_balance 99.99', sub {
    plan tests => 8;
    lives_ok {
        unless ($acc_usd->balance + 0 == 100) {
            top_up $cl, 'USD', 100 - $acc_usd->balance;
        }
        is $acc_usd->balance + 0, 100, 'USD balance is now 100';

        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            stake        => 100.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 100.00,
            payout        => $contract->payout,
            amount_type   => 'stake',
            purchase_date => Date::Utility->new(),
        });

        my $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_account_balance => sub { note "mocked Client->get_limit_for_account_balance returning 99.99"; 99.99 });

            $txn->buy;
        };

        SKIP: {
            skip 'no error', 6
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, 'AccountBalanceExceedsLimit', 'error is AccountBalanceExceedsLimit';

            like $error->{-message_to_client}, qr/balance is too high \(100\.00 USD\)/,   'message_to_client contains balance';
            like $error->{-message_to_client}, qr/maximum account balance is 99\.99 USD/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }
    }
    'survived';
};

subtest 'max_balance validation: try to buy a bet with a balance of 100 and max_balance 100', sub {
    plan tests => 9;
    lives_ok {
        unless ($acc_usd->balance + 0 == 100) {
            top_up $cl, 'USD', 100 - $acc_usd->balance;
        }
        is $acc_usd->balance + 0, 100, 'USD balance is now 100';

        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            stake        => 100.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 100.00,
            payout        => $contract->payout,
            amount_type   => 'stake',
            purchase_date => $contract->date_start,
        });

        my $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_account_balance => sub { note "mocked Client->get_limit_for_account_balance returning 100"; 100 });

            $txn->buy;
        };
        is $error, undef, 'no error';

        ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

        is $txn->contract_id, $fmb->{id}, 'txn->contract_id';
        cmp_ok $txn->contract_id, '>', 0, 'txn->contract_id > 0';
        is $txn->transaction_id, $trx->{id}, 'txn->transaction_id';
        cmp_ok $txn->transaction_id, '>', 0, 'txn->transaction_id > 0';
        is $txn->balance_after,     $trx->{balance_after}, 'txn->balance_after';
        is $txn->balance_after + 0, 0,                     'txn->balance_after == 0';
    }
    'survived';
};

subtest 'max_open_bets validation', sub {
    plan tests => 11;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $now      = Date::Utility->new;
        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            stake        => 1.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 1.00,
            payout        => $contract->payout,
            amount_type   => 'stake',
            purchase_date => $contract->date_start,
        });

        my $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_open_positions => sub { note "mocked Client->get_limit_for_open_positions returning 2"; 2 });

            my $lim = $txn->calculate_limits;
            is $lim->{max_open_bets}, 2, 'calculate limit';

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 1.00,
                    payout        => $contract->payout,
                    amount_type   => 'stake',
                    purchase_date => $contract->date_start,
                })->buy, undef, '1st bet bought';

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 1.00,
                    payout        => $contract->payout,
                    amount_type   => 'stake',
                    purchase_date => $contract->date_start,
                })->buy, undef, '2nd bet bought';

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 5
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, 'OpenPositionLimit', 'error is OpenPositionLimit';

            like $error->{-message_to_client}, qr/you cannot hold more than 2 contract/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }
    }
    'survived';
};

subtest 'max_open_bets validation in presence of expired bets', sub {
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            stake        => 1.00,
            duration     => '15t',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 1.00,
            payout        => $contract->payout,
            amount_type   => 'stake',
            purchase_date => $contract->date_start,
        });

        my $txn_id_buy_expired_contract;
        my $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_open_positions => sub { note "mocked Client->get_limit_for_open_positions returning 2"; 2 });

            my $lim = $txn->calculate_limits;
            is $lim->{max_open_bets}, 2, 'for tick trades our own open position limit is ignored';

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 1.00,
                    payout        => $contract->payout,
                    amount_type   => 'stake',
                    purchase_date => $contract->date_start,
                })->buy(skip_validation => 1), undef, '1st bet bought';

            my $contract_expired = produce_contract({
                underlying   => $underlying,
                bet_type     => 'CALL',
                currency     => 'USD',
                stake        => 1,
                date_start   => $now->epoch - 100,
                date_expiry  => $now->epoch - 50,
                current_tick => $tick,
                entry_tick   => $old_tick1,
                exit_tick    => $old_tick2,
                barrier      => 'S0P',
            });

            my $exp_txn = BOM::Transaction->new({
                client        => $cl,
                contract      => $contract_expired,
                price         => 1,
                payout        => $contract->payout,
                amount_type   => 'stake',
                purchase_date => $now->epoch - 101,
            });

            is $exp_txn->buy(skip_validation => 1), undef, '2nd, expired bet bought';

            is $acc_usd->balance + 0, 98, 'USD balance is now 98';

            # here we have 2 open bets. One of them is expired.

            $txn_id_buy_expired_contract = $exp_txn->transaction_id;
            ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn_id_buy_expired_contract;
            is $fmb->{is_sold}, 0, 'have expired but unsold contract in DB';

            return $txn->buy;
        };

        ok $error, 'got error';
        is $error->get_type, 'OpenPositionLimit', 'error is OpenPositionLimit';

        ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn_id_buy_expired_contract;
        is $fmb->{is_sold}, 0, 'have expired but unsold contract in DB';
    }
    'survived';
};

subtest 'max_payout_open_bets validation', sub {
    plan tests => 11;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 5.20,
            payout        => $contract->payout,
            amount_type   => 'payout',
            purchase_date => $contract->date_start,
        });

        my $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_payout => sub { note "mocked Client->get_limit_for_payout returning 29.99"; 29.99 });

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 5.20,
                    payout        => $contract->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract->date_start,
                })->buy, undef, '1st bet bought';

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 5.20,
                    payout        => $contract->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract->date_start,
                })->buy, undef, '2nd bet bought';

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 5
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, 'OpenPositionPayoutLimit', 'error is OpenPositionPayoutLimit';

            like $error->{-message_to_client}, qr/aggregate payouts of contracts on your account cannot exceed 29\.99 USD/,
                'message_to_client contains balance';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }

        # retry with a slightly higher limit should succeed
        $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_payout => sub { note "mocked Client->get_limit_for_payout returning 30.00"; 30.00 });

            $txn->buy;
        };

        is $error, undef, 'no error';
    }
    'survived';
    restore_time();
};

subtest 'max_turnover validation', sub {
    plan tests => 17;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $contract_up = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $contract_down = produce_contract({
            underlying   => $underlying_r100,
            bet_type     => 'PUT',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract_up,
            price         => 5.20,
            payout        => $contract_up->payout,
            amount_type   => 'payout',
            purchase_date => Date::Utility->new(),
        });

        my $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_daily_turnover =>
                    sub { note "mocked Client->get_limit_for_daily_turnover returning " . (3 * 5.20 - .01); 3 * 5.20 - .01 });
            $mock_client->mock(fully_authenticated => sub { note "mocked Client->fully_authenticated returning false"; undef });

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract_up,
                    price         => 5.20,
                    payout        => $contract_up->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract_up->date_start,
                })->buy, undef, 'CALL bet bought';

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract_down,
                    price         => 5.20,
                    payout        => $contract_down->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract_down->date_start,
                })->buy, undef, 'PUT bet bought';

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 5
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, 'DailyTurnoverLimitExceeded', 'error is DailyTurnoverLimitExceeded';

            like $error->{-message_to_client}, qr/daily turnover limit of 15\.59 USD/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }

        $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_daily_turnover =>
                    sub { note "mocked Client->get_limit_for_daily_turnover returning " . (3 * 5.20 - .01); 3 * 5.20 - .01 });
            $mock_client->mock(fully_authenticated => sub { note "mocked Client->fully_authenticated returning true"; 1 });

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 5
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, 'DailyTurnoverLimitExceeded', 'error is DailyTurnoverLimitExceeded';

            like $error->{-message_to_client}, qr/daily turnover limit of 15\.59 USD/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }

        # retry with a slightly higher limit should succeed
        $error = do {
            # buy a bet yesterday. It should not interfere.
            lives_ok {
                BOM::Database::Helper::FinancialMarketBet->new({
                        bet_data => +{
                            underlying_symbol => 'R_50',
                            payout_price      => 100,
                            buy_price         => 20,
                            remark            => 'Test Remark',
                            purchase_time     => Date::Utility::today()->minus_time_interval("1s")->db_timestamp,
                            start_time        => Date::Utility::today()->minus_time_interval("0s")->db_timestamp,
                            expiry_time       => Date::Utility::today()->plus_time_interval("15s")->db_timestamp,
                            settlement_time   => Date::Utility::today()->plus_time_interval("15s")->db_timestamp,
                            is_expired        => 0,
                            is_sold           => 0,
                            bet_class         => 'higher_lower_bet',
                            bet_type          => 'CALL',
                            short_code        => 'test',
                            relative_barrier  => 'S0P',
                            quantity          => 1,
                        },
                        account_data => {
                            client_loginid => $acc_usd->client_loginid,
                            currency_code  => $acc_usd->currency_code
                        },
                        db => db,
                    })->buy_bet;
            }
            'bought a bet yesterday 23:59:59';

            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_daily_turnover => sub { note "mocked Client->get_limit_for_daily_turnover returning " . (3 * 5.20); 3 * 5.20 });

            $txn->buy;
        };

        is $error, undef, 'no error';
    }
    'survived';
};

sleep_till_next_second();

subtest 'max_7day_turnover validation', sub {
    plan tests => 11;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $contract_up = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $contract_down = produce_contract({
            underlying   => $underlying_r100,
            bet_type     => 'PUT',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract_up,
            price         => 5.20,
            payout        => $contract_up->payout,
            amount_type   => 'payout',
            purchase_date => Date::Utility->new(),
        });

        my $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_7day_turnover => sub { note "mocked Client->get_limit_for_7day_turnover returning " . (3 * 5.20 - .01); 3 * 5.20 - .01 }
            );

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract_up,
                    price         => 5.20,
                    payout        => $contract_up->payout,
                    amount_type   => 'payout',
                    purchase_date => Date::Utility->new(),
                })->buy, undef, 'CALL bet bought';

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract_down,
                    price         => 5.20,
                    payout        => $contract_down->payout,
                    amount_type   => 'payout',
                    purchase_date => Date::Utility->new(),
                })->buy, undef, 'PUT bet bought';

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 6
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, '7DayTurnoverLimitExceeded', 'error is 7DayTurnoverLimitExceeded';

            like $error->{-message_to_client}, qr/7-day turnover limit of 15\.59 USD/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }

        # retry with a slightly higher limit should succeed
        $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_7day_turnover => sub { note "mocked Client->get_limit_for_7day_turnover returning " . (3 * 5.20); 3 * 5.20 });

            $txn->buy;
        };

        is $error, undef, 'no error';
    }
    'survived';
};

sleep_till_next_second();

subtest 'max_30day_turnover validation', sub {
    plan tests => 11;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $contract_up = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $contract_down = produce_contract({
            underlying   => $underlying_r100,
            bet_type     => 'PUT',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract_up,
            price         => 5.20,
            payout        => $contract_up->payout,
            amount_type   => 'payout',
            purchase_date => $contract_up->date_start,
        });

        my $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_30day_turnover =>
                    sub { note "mocked Client->get_limit_for_30day_turnover returning " . (3 * 5.20 - .01); 3 * 5.20 - .01 });

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract_up,
                    price         => 5.20,
                    payout        => $contract_up->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract_up->date_start,
                })->buy, undef, 'CALL bet bought';

            is +BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract_down,
                    price         => 5.20,
                    payout        => $contract_down->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract_down->date_start,
                })->buy, undef, 'PUT bet bought';

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 5
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, '30DayTurnoverLimitExceeded', 'error is 30DayTurnoverLimitExceeded';

            like $error->{-message_to_client}, qr/30-day turnover limit of 15\.59 USD/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }

        # retry with a slightly higher limit should succeed
        $error = do {
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_30day_turnover => sub { note "mocked Client->get_limit_for_30day_turnover returning " . (3 * 5.20); 3 * 5.20 });

            $txn->buy;
        };

        is $error, undef, 'no error';
    }
    'survived';
};

subtest 'max_losses validation', sub {
    plan tests => 13;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $contract_up = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
            date_pricing => Date::Utility->new(time + 10),
        });

        my $contract_down = produce_contract({
            underlying   => $underlying_r100,
            bet_type     => 'PUT',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
            date_pricing => Date::Utility->new(time + 10),
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract_up,
            price         => 5.20,
            payout        => $contract_up->payout,
            amount_type   => 'payout',
            purchase_date => $contract_up->date_start,
        });

        my $error = do {
            my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
            $mock_contract->mock(is_valid_to_buy => sub { note "mocked Contract->is_valid_to_buy returning true"; 1 });

            my $mock_transaction = Test::MockModule->new('BOM::Transaction');
            my $mock_validation  = Test::MockModule->new('BOM::Transaction::Validation');
            # _validate_trade_pricing_adjustment() is tested in trade_validation.t
            $mock_validation->mock(_validate_trade_pricing_adjustment =>
                    sub { note "mocked Transaction::Validation->_validate_trade_pricing_adjustment returning nothing"; () });
            $mock_transaction->mock(_build_pricing_comment => sub { note "mocked Transaction->_build_pricing_comment returning '[]'"; [] });
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_daily_losses => sub { note "mocked Client->get_limit_for_daily_losses returning " . (3 * 5.20 - .01); 3 * 5.20 - .01 });

            my $t = BOM::Transaction->new({
                client        => $cl,
                contract      => $contract_up,
                price         => 5.20,
                payout        => $contract_up->payout,
                amount_type   => 'payout',
                purchase_date => $contract_up->date_start,
            });
            is $t->buy, undef, 'CALL bet bought';
            $t = BOM::Transaction->new({
                purchase_date => $contract_up->date_start,
                client        => $cl,
                contract      => $contract_up,
                contract_id   => $t->contract_id,
                price         => 0,
            });
            is $t->sell(skip_validation => 1), undef, 'CALL bet sold';

            $t = BOM::Transaction->new({
                client        => $cl,
                contract      => $contract_down,
                price         => 5.20,
                payout        => $contract_down->payout,
                amount_type   => 'payout',
                purchase_date => $contract_down->date_start,
            });
            is $t->buy, undef, 'PUT bet bought';
            $t = BOM::Transaction->new({
                purchase_date => $contract_down->date_start,
                client        => $cl,
                contract      => $contract_down,
                contract_id   => $t->contract_id,
                price         => 0,
            });
            is $t->sell(skip_validation => 1), undef, 'CALL bet sold';

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 5
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, 'DailyLossLimitExceeded', 'error is DailyLossLimitExceeded';

            like $error->{-message_to_client}, qr/daily limit on losses of 15\.59 USD/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }

        # retry with a slightly higher limit should succeed
        $error = do {
            my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
            $mock_contract->mock(is_valid_to_buy => sub { note "mocked Contract->is_valid_to_buy returning true"; 1 });

            my $mock_transaction = Test::MockModule->new('BOM::Transaction');
            my $mock_validation  = Test::MockModule->new('BOM::Transaction::Validation');
            # _validate_trade_pricing_adjustment() is tested in trade_validation.t
            $mock_validation->mock(_validate_trade_pricing_adjustment =>
                    sub { note "mocked Transaction::Validation->_validate_trade_pricing_adjustment returning nothing"; () });
            $mock_transaction->mock(_build_pricing_comment => sub { note "mocked Transaction->_build_pricing_comment returning '[]'"; [] });
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_daily_losses => sub { note "mocked Client->get_limit_for_daily_losses returning " . (3 * 5.20); 3 * 5.20 });

            $txn->buy;
        };

        is $error, undef, 'no error';
    }
    'survived';
};

subtest 'max_7day_losses validation', sub {
    plan tests => 13;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $contract_up = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
            date_pricing => Date::Utility->new(time + 10),
        });

        my $contract_down = produce_contract({
            underlying   => $underlying_r100,
            bet_type     => 'PUT',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
            date_pricing => Date::Utility->new(time + 10),
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract_up,
            price         => 5.20,
            payout        => $contract_up->payout,
            amount_type   => 'payout',
            purchase_date => $contract_up->date_start,
        });

        my $error = do {
            my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
            $mock_contract->mock(is_valid_to_buy => sub { note "mocked Contract->is_valid_to_buy returning true"; 1 });

            my $mock_transaction = Test::MockModule->new('BOM::Transaction');
            my $mock_validation  = Test::MockModule->new('BOM::Transaction::Validation');
            # _validate_trade_pricing_adjustment() is tested in trade_validation.t
            $mock_validation->mock(_validate_trade_pricing_adjustment =>
                    sub { note "mocked Transaction::Validation->_validate_trade_pricing_adjustment returning nothing"; () });
            $mock_transaction->mock(_build_pricing_comment => sub { note "mocked Transaction->_build_pricing_comment returning '[]'"; [] });
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_7day_losses => sub { note "mocked Client->get_limit_for_7day_losses returning " . (3 * 5.20 - .01); 3 * 5.20 - .01 });

            my $t = BOM::Transaction->new({
                client        => $cl,
                contract      => $contract_up,
                price         => 5.20,
                payout        => $contract_up->payout,
                amount_type   => 'payout',
                purchase_date => $contract_up->date_start,
            });
            is $t->buy, undef, 'CALL bet bought';
            $t = BOM::Transaction->new({
                purchase_date => $contract_up->date_start,
                client        => $cl,
                contract      => $contract_up,
                contract_id   => $t->contract_id,
                price         => 0,
            });
            is $t->sell(skip_validation => 1), undef, 'CALL bet sold';

            $t = BOM::Transaction->new({
                client        => $cl,
                contract      => $contract_down,
                price         => 5.20,
                payout        => $contract_down->payout,
                amount_type   => 'payout',
                purchase_date => $contract_down->date_start,
            });
            is $t->buy, undef, 'PUT bet bought';
            $t = BOM::Transaction->new({
                purchase_date => $contract_down->date_start,
                client        => $cl,
                contract      => $contract_down,
                contract_id   => $t->contract_id,
                price         => 0,
            });
            is $t->sell(skip_validation => 1), undef, 'CALL bet sold';

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 5
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, '7DayLossLimitExceeded', 'error is 7DayLossLimitExceeded';

            like $error->{-message_to_client}, qr/7-day limit on losses of 15\.59 USD/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }

        # retry with a slightly higher limit should succeed
        $error = do {
            my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
            $mock_contract->mock(is_valid_to_buy => sub { note "mocked Contract->is_valid_to_buy returning true"; 1 });

            my $mock_transaction = Test::MockModule->new('BOM::Transaction');
            my $mock_validation  = Test::MockModule->new('BOM::Transaction::Validation');
            # _validate_trade_pricing_adjustment() is tested in trade_validation.t
            $mock_validation->mock(_validate_trade_pricing_adjustment =>
                    sub { note "mocked Transaction::Validation->_validate_trade_pricing_adjustment returning nothing"; () });
            $mock_transaction->mock(_build_pricing_comment => sub { note "mocked Transaction->_build_pricing_comment returning '[]'"; [] });
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(get_limit_for_7day_losses => sub { note "mocked Client->get_limit_for_7day_losses returning " . (3 * 5.20); 3 * 5.20 }
            );

            $txn->buy;
        };

        is $error, undef, 'no error';
    }
    'survived';
};

subtest 'max_30day_losses validation', sub {
    plan tests => 13;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 100;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

        my $now         = Date::Utility->new();
        my $contract_up = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
            date_pricing => Date::Utility->new(time + 10),
        });

        my $contract_down = produce_contract({
            underlying   => $underlying_r100,
            bet_type     => 'PUT',
            currency     => 'USD',
            payout       => 10.00,
            duration     => '15m',
            current_tick => $tick,
            barrier      => 'S0P',
            date_pricing => Date::Utility->new(time + 10),
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract_up,
            price         => 5.20,
            payout        => $contract_up->payout,
            amount_type   => 'payout',
            purchase_date => $contract_up->date_start,
        });

        my $error = do {
            my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
            $mock_contract->mock(is_valid_to_buy => sub { note "mocked Contract->is_valid_to_buy returning true"; 1 });

            my $mock_transaction = Test::MockModule->new('BOM::Transaction');
            my $mock_validation  = Test::MockModule->new('BOM::Transaction::Validation');
            # _validate_trade_pricing_adjustment() is tested in trade_validation.t
            $mock_validation->mock(_validate_trade_pricing_adjustment =>
                    sub { note "mocked Transaction::Validation->_validate_trade_pricing_adjustment returning nothing"; () });
            $mock_transaction->mock(_build_pricing_comment => sub { note "mocked Transaction->_build_pricing_comment returning '[]'"; [] });
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_30day_losses => sub { note "mocked Client->get_limit_for_30day_losses returning " . (3 * 5.20 - .01); 3 * 5.20 - .01 });

            my $t = BOM::Transaction->new({
                client        => $cl,
                contract      => $contract_up,
                price         => 5.20,
                payout        => $contract_up->payout,
                amount_type   => 'payout',
                purchase_date => $contract_up->date_start,
            });
            is $t->buy, undef, 'CALL bet bought';
            $t = BOM::Transaction->new({
                purchase_date => $contract_up->date_start,
                client        => $cl,
                contract      => $contract_up,
                contract_id   => $t->contract_id,
                price         => 0,
            });
            is $t->sell(skip_validation => 1), undef, 'CALL bet sold';

            $t = BOM::Transaction->new({
                client        => $cl,
                contract      => $contract_down,
                price         => 5.20,
                payout        => $contract_down->payout,
                amount_type   => 'payout',
                purchase_date => $contract_down->date_start,
            });
            is $t->buy, undef, 'PUT bet bought';
            $t = BOM::Transaction->new({
                purchase_date => $contract_down->date_start,
                client        => $cl,
                contract      => $contract_down,
                contract_id   => $t->contract_id,
                price         => 0,
            });
            is $t->sell(skip_validation => 1), undef, 'CALL bet sold';

            $txn->buy;
        };
        SKIP: {
            skip 'no error', 5
                if not defined $error
                or ref $error ne 'Error::Base';

            is $error->get_type, '30DayLossLimitExceeded', 'error is 30DayLossLimitExceeded';

            like $error->{-message_to_client}, qr/30-day limit on losses of 15\.59 USD/, 'message_to_client contains limit';

            is $txn->contract_id,    undef, 'txn->contract_id';
            is $txn->transaction_id, undef, 'txn->transaction_id';
            is $txn->balance_after,  undef, 'txn->balance_after';
        }

        # retry with a slightly higher limit should succeed
        $error = do {
            my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
            $mock_contract->mock(is_valid_to_buy => sub { note "mocked Contract->is_valid_to_buy returning true"; 1 });

            my $mock_transaction = Test::MockModule->new('BOM::Transaction');
            my $mock_validation  = Test::MockModule->new('BOM::Transaction::Validation');
            # _validate_trade_pricing_adjustment() is tested in trade_validation.t
            $mock_validation->mock(_validate_trade_pricing_adjustment =>
                    sub { note "mocked Transaction::Validation->_validate_trade_pricing_adjustment returning nothing"; () });
            $mock_transaction->mock(_build_pricing_comment => sub { note "mocked Transaction->_build_pricing_comment returning '[]'"; [] });
            my $mock_client = Test::MockModule->new('BOM::User::Client');
            $mock_client->mock(
                get_limit_for_30day_losses => sub { note "mocked Client->get_limit_for_30day_losses returning " . (3 * 5.20); 3 * 5.20 });

            $txn->buy;
        };

        is $error, undef, 'no error';
    }
    'survived';
};

subtest 'sell_expired_contracts', sub {
    plan tests => 37;
    lives_ok {
        my $cl = create_client;

        top_up $cl, 'USD', 1000;

        my $acc_usd = $cl->account;
        is $acc_usd->currency_code, 'USD', 'got USD account';

        my $bal;
        is + ($bal = $acc_usd->balance + 0), 1000, 'USD balance is 1000 got: ' . $bal;

        my $contract_expired = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            stake        => 100,
            date_start   => $now->epoch - 100,
            date_expiry  => $now->epoch - 50,
            current_tick => $tick,
            entry_tick   => $old_tick1,
            exit_tick    => $old_tick2,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract_expired,
            price         => 100,
            payout        => $contract_expired->payout,
            amount_type   => 'stake',
            purchase_date => $now->epoch - 101,
        });

        my (@expired_txnids, @expired_fmbids, @unexpired_fmbids);
        # buy 5 expired contracts
        for (1 .. 5) {
            my $error = $txn->buy(skip_validation => 1);
            is $error, undef, 'no error: bought 1 expired contract for 100';
            push @expired_txnids, $txn->transaction_id;
            push @expired_fmbids, $txn->contract_id;
        }

        # now buy a couple of not-yet-expired contracts
        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            stake        => 100,
            date_start   => $now->epoch - 100,
            date_expiry  => $now->epoch + 2,
            current_tick => $tick,
            entry_tick   => $old_tick1,
            barrier      => 'S0P',
        });

        $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 100,
            payout        => $contract->payout,
            amount_type   => 'stake',
            purchase_date => $now->epoch - 101,
        });

        my @txnids;
        # buy 5 unexpired contracts
        for (1 .. 5) {
            my $error = $txn->buy(skip_validation => 1);
            is $error, undef, 'no error: bought 1 contract for 100';
            push @txnids,           $txn->transaction_id;
            push @unexpired_fmbids, $txn->contract_id;
        }

        is $acc_usd->balance + 0, 0, 'USD balance is down to 0';

        # First sell some particular ones by id.
        my $res = BOM::Transaction::sell_expired_contracts + {
            client       => $cl,
            source       => 29,
            contract_ids => [@expired_fmbids[0 .. 1]],
        };

        is_deeply $res,
            +{
            number_of_sold_bets => 2,
            skip_contract       => 0,
            total_credited      => 200,
            failures            => [],
            },
            'sold the two requested contracts';

        $res = BOM::Transaction::sell_expired_contracts + {
            client => $cl,
            source => 29
        };

        @unexpired_fmbids = sort { $a <=> $b } @unexpired_fmbids;
        $res->{failures} = [sort { $a->{fmb_id} <=> $b->{fmb_id} } @{$res->{failures}}];
        is_deeply $res, +{
            number_of_sold_bets => 3,
            skip_contract       => 5,     # this means the contract was looked at but skipped due to invalid to sell
            total_credited      => 300,
            failures            => [map { {reason => 'not expired', fmb_id => $_} } @unexpired_fmbids],
            },
            'sold 3 out of 8 remaining bets';

        is $acc_usd->balance + 0, 500, 'USD balance 500';

        for (@expired_txnids) {
            my ($trx, $fmb, $chld, $qv1, $qv2, $trx2) = get_transaction_from_db higher_lower_bet => $_;
            is $fmb->{is_sold},        1,          'expired contract is sold';
            is $trx2->{source},        29,         'source';
            is $trx2->{staff_loginid}, 'AUTOSELL', 'staff_loginid';
        }

        for (@txnids) {
            my ($trx, $fmb) = get_transaction_from_db higher_lower_bet => $_;
            is !$fmb->{is_sold}, !0, 'not-yet-expired contract is not sold';
        }
    }
    'survived';
};

subtest 'transaction slippage' => sub {
    my $cl = create_client;
    top_up $cl, 'USD', 1000;
    my $acc_usd = $cl->account;
    is $acc_usd->currency_code, 'USD', 'got USD account';
    my $bal;
    is + ($bal = $acc_usd->balance + 0), 1000, 'USD balance is 1000 got: ' . $bal;

    my $fmb_id;
    my $mock_pc       = Test::MockModule->new('Price::Calculator');
    my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
    $mock_contract->mock('ask_price',        sub { 10 });
    $mock_contract->mock('allowed_slippage', sub { 0.01 });
    $mock_contract->mock(
        'commission_markup',
        sub {
            return Math::Util::CalculatedValue::Validatable->new({
                name        => 'commission_markup',
                description => 'fake commission markup',
                set_by      => 'BOM::Product::Contract',
                base_amount => 0.01,
            });
        });
    $mock_contract->mock(
        'risk_markup',
        sub {
            return Math::Util::CalculatedValue::Validatable->new({
                name        => 'risk_markup',
                description => 'fake risk markup',
                set_by      => 'BOM::Product::Contract',
                base_amount => 0,
            });
        });
    subtest 'buy slippage' => sub {
        my $ask_cv = Math::Util::CalculatedValue::Validatable->new({
            name        => 'ask_probability',
            description => 'fake ask prov',
            set_by      => 'BOM::Product::Contract',
            base_amount => 0.1
        });
        $mock_pc->mock('ask_probability', sub { $ask_cv });

        # 50% of commission
        my $allowed_move = 0.01 * 0.50;

        my $contract = produce_contract({
            underlying   => 'R_100',
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 100,
            date_start   => $now,
            date_pricing => $now,
            date_expiry  => $now->plus_time_interval('15m'),
            current_tick => $tick,
            barrier      => 'S0P',
        });

        # we just want to _validate_trade_pricing_adjustment
        my $mocked = Test::MockModule->new('BOM::Transaction::Validation');
        $mocked->unmock_all();
        $mocked->mock($_ => sub { '' })
            for (
            qw/
            _validate_buy_transaction_rate
            _validate_iom_withdrawal_limit
            _validate_currency
            _validate_jurisdictional_restrictions
            _validate_client_status
            _validate_client_self_exclusion
            _is_valid_to_buy
            _validate_date_pricing
            _validate_payout_limit
            validate_tnc
            _validate_stake_limit/
            );
        # no limits
        my $mocked_tr = Test::MockModule->new('BOM::Transaction');
        $mocked_tr->mock('limits', sub { {} });

        my $price       = $contract->ask_price - ($allowed_move * $contract->payout / 2);
        my $transaction = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            action        => 'BUY',
            amount_type   => 'payout',
            price         => $price,
            purchase_date => $now,
        });

        ok !$transaction->buy, 'buy without error.';
        my ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $transaction->transaction_id;

        is $fmb->{buy_price},       $price, 'buy at requested price';
        is $qv1->{price_slippage},  -0.25,  'slippage stored';
        is $qv1->{requested_price}, $price, 'correct requested price stored';
        cmp_ok $qv1->{recomputed_price}, '==', $contract->ask_price, 'correct recomputed price stored';
        $fmb_id = $fmb->{id};
    };

    subtest 'sell slippage' => sub {
        my $bid_cv = Math::Util::CalculatedValue::Validatable->new({
            name        => 'bid_probability',
            description => 'fake ask prov',
            set_by      => 'BOM::Product::Contract',
            base_amount => 0.1
        });
        $mock_pc->mock('bid_probability', sub { $bid_cv });

        my $contract = produce_contract({
            underlying   => 'R_100',
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 100,
            date_start   => $now->plus_time_interval('5m'),
            date_pricing => $now->plus_time_interval('5m'),
            date_expiry  => $now->plus_time_interval('15m'),
            current_tick => $tick,
            barrier      => 'S0P',
        });

        my $allowed_move = 0.01 * 0.50;

        my $price = $contract->bid_price + ($allowed_move * $contract->payout - 0.1);

        # we just want to _validate_trade_pricing_adjustment
        my $mocked = Test::MockModule->new('BOM::Transaction::Validation');
        $mocked->mock($_ => sub { '' })
            for (
            qw/
            _validate_sell_transaction_rate
            _validate_iom_withdrawal_limit
            _is_valid_to_sell
            _validate_currency
            _validate_date_pricing/
            );

        # no limits
        $mocked->mock('limits', sub { {} });

        my $transaction = BOM::Transaction->new({
            purchase_date => $contract->date_start,
            client        => $cl,
            contract      => $contract,
            contract_id   => $fmb_id,
            price         => $price,
            amount_type   => 'payout',
            source        => 23,
        });

        ok !$transaction->sell, 'no error when sell';
        my ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $transaction->transaction_id;
        cmp_ok $fmb->{sell_price}, '==', sprintf('%.2f', $price), 'sell at requested price';
        is $qv1->{price_slippage},   '-0.40',              'slippage stored';
        is $qv1->{requested_price},  $price,               'correct requested price stored';
        is $qv1->{recomputed_price}, $contract->bid_price, 'correct recomputed price stored';
    };
};

subtest 'buy/sell on suspend_trading' => sub {
    my $cl = create_client;

    top_up $cl, 'USD', 100;

    my $acc_usd = $cl->account;
    is $acc_usd->currency_code, 'USD', 'got USD account';

    my $bal;
    is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

    note "mocking app_config->loaded_revision to rand()";
    my $mock_appconfig = Test::MockModule->new('App::Config::Chronicle');
    $mock_appconfig->mock('loaded_revision', sub { rand });

    my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
    $mock_contract->mock(is_valid_to_buy => sub { note "mocked Contract->is_valid_to_buy returning true"; 1 });

    my $mock_transaction = Test::MockModule->new('BOM::Transaction');
    my $mock_validation  = Test::MockModule->new('BOM::Transaction::Validation');
    # _validate_trade_pricing_adjustment() is tested in trade_validation.t
    $mock_validation->mock(
        _validate_trade_pricing_adjustment => sub { note "mocked Transaction::Validation->_validate_trade_pricing_adjustment returning nothing"; () }
    );
    $mock_transaction->mock(_build_pricing_comment => sub { note "mocked Transaction->_build_pricing_comment returning '[]'"; [] });

    my $now      = Date::Utility->new();
    my $contract = produce_contract({
        underlying   => $underlying,
        bet_type     => 'CALL',
        currency     => 'USD',
        payout       => 10.00,
        duration     => '15m',
        current_tick => $tick,
        barrier      => 'S0P',
        date_pricing => Date::Utility->new(time + 10),
    });

    my $txn;
    my $error = do {
        $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 5.20,
            payout        => $contract->payout,
            amount_type   => 'payout',
            purchase_date => $contract->date_start,
        });

        $txn->buy;
    };

    ok !$error, 'no error';

    ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

    note "setting app_config->system->suspend_trading to 1";
    BOM::Config::Runtime->instance->app_config->system->suspend->trading(1);

    $error = do {
        $txn = BOM::Transaction->new({
            client        => $cl,
            contract      => $contract,
            price         => 5.20,
            payout        => $contract->payout,
            amount_type   => 'payout',
            purchase_date => $contract->date_start,
        });

        $txn->buy;
    };

    is $error->{'-type'},              'InvalidOfferings',                       'type is InvalidOfferings';
    is $error->{'-mesg'},              'Disabled platform',                      'message is Disabled platform';
    is $error->{'-message_to_client'}, 'This trade is temporarily unavailable.', 'message to clien is This trade is temporarily unavailable.';

    $contract = produce_contract({
        underlying   => $underlying,
        bet_type     => 'CALL',
        currency     => 'USD',
        payout       => 1000,
        duration     => '15m',
        date_start   => $now->epoch,
        date_pricing => $now->epoch + 1,
        current_tick => $tick,
        entry_tick   => $tick,
        exit_tick    => $tick,
        barrier      => 'S0P',
    });

    #note 'bid price: ' . $contract->bid_price;
    $error = do {
        $mock_transaction->mock('price', sub { $contract->bid_price });
        $txn = BOM::Transaction->new({
            purchase_date => $contract->date_start,
            client        => $cl,
            contract      => $contract,
            contract_id   => $fmb->{id},
            price         => $contract->bid_price,
            source        => 23,
        });
        $txn->sell;
    };

    is $error->{'-type'},              'InvalidOfferings',                        'type is InvalidOfferings';
    is $error->{'-mesg'},              'Disabled platform',                       'message is Disabled platform';
    is $error->{'-message_to_client'}, 'Resale of this contract is not offered.', 'message to clien is Resale of this contract is not offered.';

    note "reset app_config->system->suspend_trading to 0";
    BOM::Config::Runtime->instance->app_config->system->suspend->trading(0);
};

subtest 'suspend_buy & suspend_trades' => sub {
    my $cl = create_client;

    top_up $cl, 'USD', 100;

    my $acc_usd = $cl->account;
    is $acc_usd->currency_code, 'USD', 'got USD account';

    my $bal;
    is + ($bal = $acc_usd->balance + 0), 100, 'USD balance is 100 got: ' . $bal;

    note "mocking app_config->loaded_revision to rand()";
    my $mock_appconfig = Test::MockModule->new('App::Config::Chronicle');
    $mock_appconfig->mock('loaded_revision', sub { rand });

    my $mock_contract = Test::MockModule->new('BOM::Product::Contract');
    $mock_contract->mock(is_valid_to_buy => sub { note "mocked Contract->is_valid_to_buy returning true"; 1 });

    my $mock_transaction = Test::MockModule->new('BOM::Transaction');
    my $mock_validation  = Test::MockModule->new('BOM::Transaction::Validation');
    # _validate_trade_pricing_adjustment() is tested in trade_validation.t
    $mock_validation->mock(
        _validate_trade_pricing_adjustment => sub { note "mocked Transaction::Validation->_validate_trade_pricing_adjustment returning nothing"; () }
    );
    $mock_transaction->mock(_build_pricing_comment => sub { note "mocked Transaction->_build_pricing_comment returning '[]'"; [] });

    my $app_config = BOM::Config::Runtime->instance->app_config;
    $app_config->chronicle_writer(BOM::Config::Chronicle::get_chronicle_writer());

    subtest 'suspend buy' => sub {
        foreach my $type (
            ['quants.underlyings.suspend_buy',    [$underlying->symbol]],
            ['quants.markets.suspend_buy',        [$underlying->market->name]],
            ['quants.contract_types.suspend_buy', ['CALL']])
        {
            my ($to_suspend, $data) = @$type;
            my $now      = Date::Utility->new();
            my $contract = produce_contract({
                underlying   => $underlying,
                bet_type     => 'CALL',
                currency     => 'USD',
                payout       => 10.00,
                duration     => '15m',
                current_tick => $tick,
                barrier      => 'S0P',
                date_pricing => Date::Utility->new(time + 10),
            });

            my $txn;
            my $error = do {
                $txn = BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 5.20,
                    payout        => $contract->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract->date_start,
                });

                $txn->buy;
            };

            ok !$error, 'no error';

            ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

            note "setting app_config->$to_suspend to [$data->[0]]";
            $app_config->set({@$type});

            $error = do {
                $txn = BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 5.20,
                    payout        => $contract->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract->date_start,
                });

                $txn->buy;
            };
            is $error->{'-type'}, 'InvalidOfferings', 'type is InvalidOfferings';
            like $error->{'-mesg'}, qr/Disabled (contract_type|market|underlying_symbol)/, 'message is Disabled ' . $type;
            is $error->{'-message_to_client'}, 'This trade is temporarily unavailable.', 'message to clien is This trade is temporarily unavailable.';

            $contract = produce_contract({
                underlying   => $underlying,
                bet_type     => 'CALL',
                currency     => 'USD',
                payout       => 10,
                duration     => '15m',
                date_start   => $now->epoch,
                date_pricing => $now->epoch + 1,
                current_tick => $tick,
                entry_tick   => $tick,
                exit_tick    => $tick,
                barrier      => 'S0P',
            });

            #note 'bid price: ' . $contract->bid_price;
            $error = do {
                $mock_transaction->mock('price', sub { $contract->bid_price });
                $txn = BOM::Transaction->new({
                    purchase_date => $contract->date_start,
                    client        => $cl,
                    contract      => $contract,
                    contract_id   => $fmb->{id},
                    price         => $contract->bid_price,
                    source        => 23,
                });
                $txn->sell;
            };

            ok !$error, "$type->[0] will not afffect sell";

            note "reset app_config->$to_suspend to []";
            $app_config->set({$type->[0], []});
        }
    };

    subtest 'suspend trades' => sub {
        foreach my $type (
            ['quants.underlyings.suspend_trades',    [$underlying->symbol]],
            ['quants.markets.suspend_trades',        [$underlying->market->name]],
            ['quants.contract_types.suspend_trades', ['CALL', 'PUT']])
        {
            my ($to_suspend, $data) = @$type;
            my $now      = Date::Utility->new();
            my $contract = produce_contract({
                underlying   => $underlying,
                bet_type     => 'CALL',
                currency     => 'USD',
                payout       => 10.00,
                duration     => '15m',
                current_tick => $tick,
                barrier      => 'S0P',
                date_pricing => Date::Utility->new(time + 10),
            });

            my $txn;
            my $error = do {
                $txn = BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 5.20,
                    payout        => $contract->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract->date_start,
                });

                $txn->buy;
            };

            ok !$error, 'no error';

            ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

            note "setting app_config->$to_suspend to [$data->[0]]";
            $app_config->set({@$type});

            $error = do {
                $txn = BOM::Transaction->new({
                    client        => $cl,
                    contract      => $contract,
                    price         => 5.20,
                    payout        => $contract->payout,
                    amount_type   => 'payout',
                    purchase_date => $contract->date_start,
                });

                $txn->buy;
            };
            is $error->{'-type'}, 'InvalidOfferings', 'type is InvalidOfferings';
            like $error->{'-mesg'}, qr/Disabled (underlying_symbol|market|contract_type)/, 'message is Disabled ' . $type;
            is $error->{'-message_to_client'}, 'This trade is temporarily unavailable.', 'message to clien is This trade is temporarily unavailable.';

            $contract = produce_contract({
                underlying   => $underlying,
                bet_type     => 'CALL',
                currency     => 'USD',
                payout       => 10,
                duration     => '15m',
                date_start   => $now->epoch,
                date_pricing => $now->epoch + 1,
                current_tick => $tick,
                entry_tick   => $tick,
                exit_tick    => $tick,
                barrier      => 'S0P',
            });

            #note 'bid price: ' . $contract->bid_price;
            $error = do {
                $mock_transaction->mock('price', sub { $contract->bid_price });
                $txn = BOM::Transaction->new({
                    purchase_date => $contract->date_start,
                    client        => $cl,
                    contract      => $contract,
                    contract_id   => $fmb->{id},
                    price         => $contract->bid_price,
                    source        => 23,
                });
                $txn->sell;
            };

            is $error->{'-type'}, 'InvalidOfferings', 'type is InvalidOfferings';
            like $error->{'-mesg'}, qr/Disabled (underlying_symbol|market|contract_type)/, 'message is Disabled ' . $type;
            is $error->{'-message_to_client'}, 'Resale of this contract is not offered.',
                'message to clien is Resale of this contract is not offered.';

            note "reset app_config->$to_suspend to []";
            $app_config->set({$type->[0], []});
        }
    };
};

#### Test for 1HZ contracts for China account *****
my $china_account;
my $underlying_symbol = "1HZ10V";
$underlying = create_underlying($underlying_symbol);

# Initialize random index for the 1HZ contract
BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
    'randomindex',
    {
        symbol => $underlying_symbol,
        date   => Date::Utility->new
    });

# Create tick for the 1HZ contract
my $tick_1HZ = BOM::Test::Data::Utility::FeedTestDatabase::create_tick({
    epoch      => $now->epoch,
    underlying => $underlying_symbol,
});

lives_ok {

    $china_account = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code => 'CR',
        residence   => 'cn'
    });

    #make sure client can trade
    ok(!BOM::Transaction::Validation->new({clients => [{client => $china_account}]})->check_trade_status($china_account),
        "China client can trade: check_trade_status");
    ok(!BOM::Transaction::Validation->new({clients => [{client => $china_account}]})->_validate_client_status($china_account),
        "China client can trade: _validate_client_status");

    top_up $china_account, 'USD', 5000;

    my $acc_usd = $china_account->account;
    is $acc_usd->currency_code, 'USD', 'got USD account';

    my $bal;
    is + ($bal = $acc_usd->balance + 0), 5000, 'USD balance is 5000 got: ' . $bal;
}
'client created and funded';

subtest 'buy a 1HZ bet for China account', sub {

    # print Dumper($underlying);
    lives_ok {
        my $contract = produce_contract({
            underlying   => $underlying,
            bet_type     => 'CALL',
            currency     => 'USD',
            payout       => 1000,
            duration     => '15m',
            current_tick => $tick_1HZ,
            barrier      => 'S0P',
        });

        my $txn = BOM::Transaction->new({
            client        => $china_account,
            contract      => $contract,
            price         => 511.47,
            payout        => $contract->payout,
            amount_type   => 'payout',
            source        => 19,
            purchase_date => $contract->date_start,
        });
        my $error = $txn->buy;
        is $error, undef, 'no error';

        ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

    }
    'survived';

    subtest 'sell a 1HZ bet for China account', sub {

        lives_ok {
            set_relative_time 1;
            my $reset_time = guard { restore_time };
            my $contract   = produce_contract({
                underlying   => $underlying,
                bet_type     => 'CALL',
                currency     => 'USD',
                payout       => 1000,
                duration     => '15m',
                date_start   => $now->epoch,
                current_tick => $tick_1HZ,
                entry_tick   => $tick_1HZ,
                exit_tick    => $tick_1HZ,
                barrier      => 'S0P',
            });
            my $txn;
            #note 'bid price: ' . $contract->bid_price;
            my $error = do {
                my $mocked           = Test::MockModule->new('BOM::Transaction');
                my $mocked_validator = Test::MockModule->new('BOM::Transaction::Validation');
                $mocked_validator->mock('_validate_trade_pricing_adjustment', sub { });
                $mocked->mock('price', sub { $contract->bid_price });
                $txn = BOM::Transaction->new({
                    purchase_date => $contract->date_start,
                    client        => $china_account,
                    contract      => $contract,
                    contract_id   => $fmb->{id},
                    price         => $contract->bid_price,
                    source        => 23,
                });
                $txn->sell;
            };
            is $error, undef, 'no error';

            ($trx, $fmb, $chld, $qv1, $qv2) = get_transaction_from_db higher_lower_bet => $txn->transaction_id;

            is $txn->contract_id,    $fmb->{id},            'txn->contract_id';
            is $txn->transaction_id, $trx->{id},            'txn->transaction_id';
            is $txn->balance_after,  $trx->{balance_after}, 'txn->balance_after';
        }
        'survived';
    };
};

subtest 'buy binary option for Australian' => sub {
    # specific date instead of current date to avoid failure over non-trading day.
    my $mocked = Test::MockModule->new('BOM::Transaction::Validation');
    $mocked->mock('_validate_date_pricing', sub { return undef });
    my $now = Date::Utility->new('2021-04-13');

    BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
        'currency',
        {
            symbol        => $_,
            recorded_date => $now,
        }) for qw(JPY USD JPY-USD);
    BOM::Test::Data::Utility::UnitTestMarketData::create_doc(
        'volsurface_delta',
        {
            symbol        => 'frxUSDJPY',
            recorded_date => $now,
        });

    my $usdjpy_tick = BOM::Test::Data::Utility::FeedTestDatabase::create_tick({
        epoch      => $now->epoch,
        underlying => 'frxUSDJPY',
    });

    my $au_account = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code => 'CR',
        residence   => 'au'
    });

    #make sure client can trade
    ok(!BOM::Transaction::Validation->new({clients => [{client => $au_account}]})->check_trade_status($au_account),
        "Australia client can trade: check_trade_status");
    ok(!BOM::Transaction::Validation->new({clients => [{client => $au_account}]})->_validate_client_status($au_account),
        "Australia client can trade: _validate_client_status");

    top_up $au_account, 'USD', 5000;

    my $contract = produce_contract({
        underlying   => 'frxUSDJPY',
        bet_type     => 'CALL',
        date_start   => $now,
        date_pricing => $now,
        currency     => 'USD',
        payout       => 1000,
        duration     => '1d',
        barrier      => 'S0P',
        current_tick => $usdjpy_tick,
    });

    my $txn = BOM::Transaction->new({
        client        => $au_account,
        contract      => $contract,
        price         => 511.47,
        payout        => $contract->payout,
        amount_type   => 'payout',
        source        => 19,
        purchase_date => $contract->date_start,
    });
    my $error = $txn->buy;
    is $error->{'-type'},              'InvalidOfferings',                       '-type [InvalidOfferings]';
    is $error->{'-message_to_client'}, 'Trading is not offered for this asset.', '-message_to_client [Trading is not offered for this asset.]';

    note "multipliers on FX is still available";

    $contract = produce_contract({
        underlying   => 'frxUSDJPY',
        bet_type     => 'MULTUP',
        date_start   => $now,
        date_pricing => $now,
        currency     => 'USD',
        amount       => 100,
        amount_type  => 'stake',
        multiplier   => 100,
        current_tick => $usdjpy_tick,
    });

    $txn = BOM::Transaction->new({
        client        => $au_account,
        contract      => $contract,
        price         => 100,
        amount_type   => 'stake',
        source        => 19,
        purchase_date => $contract->date_start,
    });
    ok !$txn->buy, 'valid to buy';
};

#######

# see further transaction2.t: special turnover limits
#             transaction3.t: intraday fx action
$mocked_underlying->unmock_all;

done_testing;
