subtest 'Unsuccessful finished upload' => sub {
    my $params = { %default_real_params };
    $params->{args}->{expiration_date} = EXP_DATE_FUTURE;    # 100 years is all I give you, humanity!
    $c->call_ok($method, $params)
        ->has_error->error_message_is('Sorry, an error occurred while processing your request.', 'upload finished unsuccessfully');
};

subtest 'Error for no document_id' => sub {
    my $params = { %default_real_params };
    $params->{args}->{document_type}   = DOC_TYPE;
    $params->{args}->{document_format} = DOC_FORMAT;
    $params->{args}->{expected_checksum} = CHECKSUM;
    
    $c->call_ok($method, $params)->has_error->error_message_is('Document ID is required.', 'document_id is required');

    $args->{document_id} = DOC_ID_1;
    $result = $c->call_ok($method, $params)->result;
    ($doc) = $test_client->find_client_authentication_document(query => [id => $result->{file_id}]);
    # Succesfully retrieved object from database.
    is($doc->document_id, $args->{document_id}, 'document is saved in db');
    is($doc->status,      'uploading',          'document status is set to uploading');
};

subtest 'Document with no expiration_date' => sub {
    $args->{expiration_date} = '';    # Document with no expiration_date
    $c->call_ok($method, $params)->result;
};

subtest 'Upload doc and send CS notification email' => sub {
    $args = {
        status   => 'success',
        file_id  => $result->{file_id}};
    $params->{args} = $args;
    
    $mailbox->clear;
    $client_id = uc $test_client->loginid;
    $result = $c->call_ok($method, $params)->result;
    like(get_notification_email()->{body}, qr/New document was uploaded for the account: $client_id/, 'CS notification email was sent successfully');
};

subtest 'Status and checksum of newly uploaded document' => sub {
    ($doc) = $test_client->find_client_authentication_document(query => [id => $result->{file_id}]);
    is($doc->status,                                              'uploaded',           'document\'s status changed');
    is($test_client->get_status('document_under_review')->reason, 'Documents uploaded', 'client\'s status changed');
    ok(!$test_client->get_status('document_needs_action'), 'Document should not be in needs_action state');
    ok $doc->file_name, 'Filename should not be empty';
    is $doc->checksum, CHECKSUM, 'Checksum should be added correctly';
};

subtest 'Call finish again to ensure CS team is only sent 1 email' => sub {
    $mailbox->clear;
    $result = $c->call_ok($method, $params)->result;
    ok(!get_notification_email(), 'CS notification email should only be sent once');
};

subtest 'Attempt with non-existent file ID' => sub {
    $args->{file_id} = $invalid_file_id;
    $c->call_ok($method, $params)->has_error->error_message_is('Document not found.', 'error if document is not present');
};

subtest 'Attempt to upload same document again (checksum collision) with different document ID' => sub {
    $args = {
        document_type     => DOC_TYPE,
        document_format   => DOC_FORMAT,
        expiration_date   => EXP_DATE_FUTURE,
        document_id       => DOC_ID_2,
        expected_checksum => CHECKSUM
    };
    $params->{args} = $args;
    $result = $c->call_ok($method, $params)->result;
    # Upload will commence and be blocked at finish

    $args = {
        status   => 'success',
        file_id  => $result->{file_id}};
    $params->{args} = $args;
    $c->call_ok($method, $params)->has_error->error_message_is('Document already uploaded.', 'error if same document is uploaded twice');
};

subtest 'Check audit information after all above upload requests' => sub {
    my $result = $test_client->db->dbic->run(
        fixup => sub {
            $_->selectall_arrayref('SELECT pg_userid, remote_addr FROM audit.client_authentication_document');
        });

    ok(all { $_->[0] eq 'system' and $_->[1] eq '127.0.0.1/32' } @$result), 'Check staff and staff IP for all audit info';
};