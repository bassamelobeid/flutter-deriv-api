use strict;
use warnings;
use Test::More;

use Test::Exception;
use BOM::Database::Model::Account;

use BOM::Database::Model::Account;

use BOM::Test::Data::Utility::UnitTestDatabase qw(:init);
use BOM::Database::ClientDB;
use BOM::Database::AutoGenerated::Rose::Copier::Manager;

use BOM::Database::AutoGenerated::Rose::Copier;

use BOM::Database::DataMapper::Copier qw| get_copiers_cnt get_traders |;

my $connection_builder;
my $accounts = {};

lives_ok {
    $connection_builder = BOM::Database::ClientDB->new({
        broker_code => 'CR',
    });
    for ( 27..29 ) {
        my $loginid = 'CR00'.$_;
        $accounts->{$loginid} = BOM::Database::Model::Account->new({
            'data_object_params' => {
                'client_loginid' => $loginid,
                'currency_code'  => 'USD'
            },
            db => $connection_builder->db
        });
        $accounts->{$loginid}->load();
    }
}
'build connection builder & account';

sub subscribe {
    my $args = shift;
    lives_ok {
        BOM::Database::AutoGenerated::Rose::Copier::Manager->delete_copiers(
            db => BOM::Database::ClientDB->new(
                {
                    broker_code => 'CR',
                    operation   => 'write',
                }
            )->db,
            where => [
                trader_id => $args->{trader_id},
                copier_id => $args->{copier_id},
            ],
        );

        for my $p (qw/assets trade_types/) {
            $args->{$p} ||= '*';
            $args->{$p} = [$args->{$p}] if ref $args->{$p} ne 'ARRAY';
        }

        for my $asset (@{$args->{assets}}) {
            for my $trade_type (@{$args->{trade_types}}) {
                BOM::Database::AutoGenerated::Rose::Copier->new(
                    broker          => 'CR',
                    trader_id       => $args->{trader_id},
                    copier_id       => $args->{copier_id},
                    min_trade_stake => $args->{min_trade_stake},
                    max_trade_stake => $args->{max_trade_stake},
                    trade_type      => $trade_type,
                    asset           => $asset,
                )->save;
            }
        }
    } 'copy start'
}

my $i = 1;
subscribe({ trader_id => 'CR0027', copier_id => 'CR0028'});
subscribe({ trader_id => 'CR0027', copier_id => 'CR0029', max_trade_stake => 100, trade_types => 'CALL', assets => 'frxUSDAUD'});
my $dm = BOM::Database::DataMapper::Copier->new(
    broker_code => 'CR',
    operation => 'replica'
);
is( $dm->get_copiers_cnt( { trader_id => 'CR0027' } ), 2, 'check copiers count' );
is( $dm->get_traders( { copier_id => 'CR0028' } )->[0], 'CR0027', 'check trader' );
is( $dm->get_traders( { copier_id => 'CR0029' } )->[0], 'CR0027', 'check trader' );

is( scalar @{$dm->get_trade_copiers({trader_id=>'CR0027',  trade_type => 'CALL', asset => 'frxUSDAUD', price => 10})}, 2, 'got all copiers' );
is( scalar @{$dm->get_trade_copiers({trader_id=>'CR0027',  trade_type => 'PUT' , asset => 'frxUSDAUD', price => 10})}, 1, 'got filtred copiers' );
is( scalar @{$dm->get_trade_copiers({trader_id=>'CR0027',  trade_type => 'CALL', asset => 'frxUSDJPY', price => 10})}, 1, 'got filtred copiers' );
is( scalar @{$dm->get_trade_copiers({trader_id=>'CR0027',  trade_type => 'CALL', asset => 'frxUSDAUD', price => 1000})}, 1, 'got filtred copiers' );

done_testing();
1;
