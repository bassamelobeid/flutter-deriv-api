#!/etc/rmg/bin/perl

use strict;
use warnings;
use Test::More;
use Test::Warnings;
use Test::Exception;
use Date::Utility;

use Format::Util::Numbers qw/financialrounding/;

use BOM::Database::AutoGenerated::Rose::FinancialMarketBetOpen::Manager;
use BOM::Database::Model::Account;
use BOM::Database::Model::FinancialMarketBet::Accumulator;
use BOM::Database::Helper::FinancialMarketBet;
use BOM::Test::Data::Utility::UnitTestDatabase qw(:init);
use Date::Utility;

my $connection_builder;
my $account;

lives_ok {
    $connection_builder = BOM::Database::ClientDB->new({
        broker_code => 'CR',
    });

    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code => 'CR',
    });
    $account = $client->set_default_account('USD');

    $client->payment_free_gift(
        currency => 'USD',
        amount   => 500,
        remark   => 'free gift',
    );

}
'create & credit acc';
my %account_data = (
    account_data => {
        client_loginid => $account->client_loginid,
        currency_code  => $account->currency_code
    });

my $accumulator_bet;
my $accumulator_fmb_id;

my $underlying_symbol = 'R_100';
my $payout_price      = 0;
my $buy_price         = 100;
my $sell_price        = 0;
my $remark            = 'Test Remark';
my $start_time        = Date::Utility->new('2010-12-02 12:00:00');
my $is_expired        = 1;
my $bet_class         = 'accumulator';
my $bet_type          = 'ACCU';
my $short_code        = 'ACCU_R_100_100_1_0.01_1_0.00064889_' . $start_time->epoch;

my $take_profit_order_amount = 10;
my $take_profit_order_date   = $start_time;

lives_ok {

    $accumulator_bet = BOM::Database::Model::FinancialMarketBet::Accumulator->new({
            'data_object_params' => {
                'account_id' => $account->id,

                'underlying_symbol' => $underlying_symbol,
                'payout_price'      => $payout_price,
                'buy_price'         => $buy_price,
                'remark'            => $remark,
                'purchase_time'     => $start_time->datetime_yyyymmdd_hhmmss,
                'start_time'        => $start_time->datetime_yyyymmdd_hhmmss,
                'is_expired'        => $is_expired,
                'bet_class'         => $bet_class,
                'bet_type'          => $bet_type,
                'short_code'        => $short_code,

                'take_profit_order_amount' => $take_profit_order_amount,
                'take_profit_order_date'   => $take_profit_order_date->datetime_yyyymmdd_hhmmss,
            },
        },
    );

    my $financial_market_bet_helper = BOM::Database::Helper::FinancialMarketBet->new({
        %account_data,
        bet => $accumulator_bet,
        db  => $connection_builder->db,
    });
    $financial_market_bet_helper->bet_data->{quantity} = 1;
    $financial_market_bet_helper->buy_bet;

    $accumulator_fmb_id = $accumulator_bet->financial_market_bet_open_record->id;
}
'expect to be able to buy the bet';

isa_ok($accumulator_bet->class_orm_record, 'BOM::Database::AutoGenerated::Rose::Accumulator');

# Check if it can be initialized propery by sendin the parent orm object that has the run_bet table joined
my $fmb_records = BOM::Database::AutoGenerated::Rose::FinancialMarketBetOpen::Manager->get_financial_market_bet_open(
    require_objects => ['accumulator'],
    query           => [
        id => [$accumulator_fmb_id],
    ],
    db => $connection_builder->db,
);

my $accumulator_by_orm_object = BOM::Database::Model::FinancialMarketBet::Accumulator->new({
    'financial_market_bet_open_record' => $fmb_records->[0],
    'db'                               => $connection_builder->db
});
cmp_ok($accumulator_by_orm_object->accumulator_record->take_profit_order_amount,
    '==', $take_profit_order_amount, 'Check the child params to see if they are laoded properly');
cmp_ok($accumulator_by_orm_object->financial_market_bet_open_record->payout_price,
    '==', $payout_price, 'Check the parent parent to see if they are loaded properly');

lives_ok {
    $accumulator_bet = BOM::Database::Model::FinancialMarketBet::Accumulator->new({
            data_object_params => {
                'financial_market_bet_id' => $accumulator_fmb_id,
            },
            db => $connection_builder->db,
        },
    );
    $accumulator_bet->load;

}
'expect to load the bet records after saving them';

lives_ok {
    $accumulator_bet = BOM::Database::Model::FinancialMarketBet::Accumulator->new({
            'data_object_params' => {
                'financial_market_bet_id' => $accumulator_fmb_id,
            },
            db => $connection_builder->db,
        },
    );
    $accumulator_bet->load;
    $accumulator_bet->sell_price(40);

    my $financial_market_bet_helper = BOM::Database::Helper::FinancialMarketBet->new({
            %account_data,
            bet      => $accumulator_bet,
            bet_data => {
                is_expired => $is_expired,
                sell_time  => Date::Utility::today()->db_timestamp,
            },
            db => $connection_builder->db,
        });
    $financial_market_bet_helper->bet_data->{quantity} = 1;
    $financial_market_bet_helper->sell_bet // die "Bet not sold";
    $sell_price = 40;
}
'expect to sell';

is($accumulator_bet->financial_market_bet_open_record->account_id,        $account->id,       'account_id');
is($accumulator_bet->financial_market_bet_open_record->underlying_symbol, $underlying_symbol, 'underlying_symbol');
cmp_ok($accumulator_bet->financial_market_bet_open_record->payout_price, '==', financialrounding('amount', 'USD', $payout_price), 'payout_price');
cmp_ok($accumulator_bet->financial_market_bet_open_record->buy_price,    '==', financialrounding('amount', 'USD', $buy_price),    'buy_price');
cmp_ok($accumulator_bet->financial_market_bet_open_record->sell_price,   '==', financialrounding('amount', 'USD', $sell_price),   'sell_price');
is($accumulator_bet->financial_market_bet_open_record->is_expired, $is_expired, 'is_expired');
is($accumulator_bet->financial_market_bet_open_record->is_sold,    1,           'is_sold');
is($accumulator_bet->financial_market_bet_open_record->bet_class,  $bet_class,  'bet_class');
is($accumulator_bet->financial_market_bet_open_record->bet_type,   $bet_type,   'bet_type');
is($accumulator_bet->financial_market_bet_open_record->short_code, $short_code, 'short_code');

is($accumulator_bet->accumulator_record->take_profit_order_amount, $take_profit_order_amount, 'take_profit_order_amount');
is(
    $accumulator_bet->accumulator_record->take_profit_order_date,
    $take_profit_order_date->date_yyyymmdd . 'T' . $take_profit_order_date->time_hhmmss,
    'take_profit_order_date'
);

done_testing();
