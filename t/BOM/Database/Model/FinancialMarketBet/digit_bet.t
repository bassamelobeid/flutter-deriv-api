#!/etc/rmg/bin/perl

use strict;
use warnings;
use Test::More (tests => 11);
use Test::FailWarnings;
use Test::Exception;
use BOM::Database::Model::Account;
use BOM::Database::Model::FinancialMarketBet::DigitBet;
use BOM::Database::Model::Constants;
use BOM::Database::Helper::FinancialMarketBet;
use BOM::Database::AutoGenerated::Rose::FinancialMarketBet::Manager;
use BOM::Test::Data::Utility::UnitTestDatabase qw(:init);

my $connection_builder = BOM::Database::ClientDB->new({
    broker_code => 'CR',
});

my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
    broker_code => 'CR',
});
my $account = $client->set_default_account('USD');

$client->payment_free_gift(
    currency    => 'USD',
    amount      => 500,
    remark      => 'free gift',
);

my $digit;
my $digit_id;

lives_ok {
    $digit = BOM::Database::Model::FinancialMarketBet::DigitBet->new({});
}
'Initiate object without passing data_object_params';

# Normal Digit Bet
lives_ok {

    my ($fmb, $txn) = BOM::Database::Helper::FinancialMarketBet->new({
        account_data => {
            client_loginid => $account->client_loginid,
            currency_code  => $account->currency_code,
        },
        bet_data => {
            underlying_symbol => 'frxUSDJPY',
            payout_price      => 200,
            buy_price         => 20,
            remark            => 'Test Remark',
            purchase_time     => '2010-12-02 12:00:00',
            start_time        => '2010-12-02 12:00:00',
            expiry_time       => '2010-12-02 14:00:00',
            is_expired        => 1,
            bet_class         => 'digit_bet',
            bet_type          => 'DIGITMATCH',
            short_code        => 'DIGITMATCH_FRXUSDJPY_200_1301038969_1301038999_8_0',
            last_digit        => 8,
            prediction        => 'match',
        },
        transaction_data => {
            staff_loginid => $account->client_loginid,
        },
        db  => $connection_builder->db,
    })->buy_bet;

    $digit = BOM::Database::Model::FinancialMarketBet::DigitBet->new({
        data_object_params => $fmb,
    });

    $digit_id = $digit->financial_market_bet_record->id;
}
'expect to be able to buy the bet';

cmp_ok $digit_id, '>', 0, 'fmbid > 0';

# Check if it can be initialized propery by sendin the parent orm object that has the run_bet table joined
my $fmb_records = BOM::Database::AutoGenerated::Rose::FinancialMarketBet::Manager->get_financial_market_bet(
    require_objects => ['digit_bet'],
    query           => [
        id => [$digit_id],
    ],
    db => $connection_builder->db,
);

my $digit_by_orm_object = BOM::Database::Model::FinancialMarketBet::DigitBet->new({
    'financial_market_bet_record' => $fmb_records->[0],
    'db'                          => $connection_builder->db
});

isa_ok($digit_by_orm_object->class_orm_record, 'BOM::Database::AutoGenerated::Rose::DigitBet');

cmp_ok($digit_by_orm_object->digit_bet_record->last_digit,              '==', 8,       'Check the child params to see if they are laoded properly');
cmp_ok($digit_by_orm_object->digit_bet_record->prediction,              'eq', 'match', 'Check prediction to see if the object was loaded properly');
cmp_ok($digit_by_orm_object->financial_market_bet_record->payout_price, '==', 200,     'Check the parent paramt to see if they are loaded properly');

lives_ok {
    $digit = BOM::Database::Model::FinancialMarketBet::DigitBet->new({
            'data_object_params' => {
                'financial_market_bet_id' => $digit_id,
            },
            db => $connection_builder->db,
        },
    );
    $digit->load;

}
'expect to load the bet records after saving them';

lives_ok {
    my ($fmb, $txn) = BOM::Database::Helper::FinancialMarketBet->new({
        account_data => {
            client_loginid => $account->client_loginid,
            currency_code  => $account->currency_code,
        },
        bet_data => {
            id         => $digit_id,
            sell_price => 40,
        },
        transaction_data => {
            staff_loginid => 'AUTOSELL',
        },
        db  => $connection_builder->db,
    })->sell_bet;

    $digit = BOM::Database::Model::FinancialMarketBet::DigitBet->new({
        data_object_params => $fmb,
        db                 => $connection_builder->db,
    });
}
'expect to sell';

subtest 'Expect that all fields are the same after loading FROM account transfer record' => sub {

    is($digit->financial_market_bet_record->account_id,              $account->id, 'account_id');
    is($digit->financial_market_bet_record->underlying_symbol,       'frxUSDJPY',                  'underlying_symbol');
    cmp_ok($digit->financial_market_bet_record->payout_price, '==',   200,                          'payout_price');
    cmp_ok($digit->financial_market_bet_record->buy_price, '==',      20,                           'buy_price');
    cmp_ok($digit->financial_market_bet_record->sell_price, '==',     40,                           'sell_price');
    is($digit->financial_market_bet_record->remark,                  'Test Remark',                'remark');
    is($digit->financial_market_bet_record->start_time->datetime(),  '2010-12-02T12:00:00',        'start_time');
    is($digit->financial_market_bet_record->expiry_time->datetime(), '2010-12-02T14:00:00',        'expiry_time');
    is($digit->financial_market_bet_record->is_expired,              1,                            'is_expired');
    is($digit->financial_market_bet_record->is_sold,                 1,                            'is_sold');
    is($digit->financial_market_bet_record->bet_class,               'digit_bet',                  'bet_class');
    is($digit->financial_market_bet_record->bet_type,                'DIGITMATCH',                 'bet_type');
    is($digit->digit_bet_record->last_digit,                         8,                            'last_digit');
    is($digit->digit_bet_record->prediction,                         'match',                      'prediction');
};

lives_ok {
    my $new_digit_bet = BOM::Database::Model::FinancialMarketBet::DigitBet->new({
        'digit_bet_record'            => $digit->digit_bet_record,
        'financial_market_bet_record' => $digit->financial_market_bet_record,
    });
}
'check if we can instantiate a digit_bet by passing an orm object.'
