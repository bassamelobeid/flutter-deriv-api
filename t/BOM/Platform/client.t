use strict;
use warnings;
use Test::Most;
use Test::FailWarnings;
use Test::Exception;
use BOM::Database::ClientDB;
use BOM::Database::AutoGenerated::Rose::Client;
use BOM::Test::Data::Utility::UnitTestDatabase qw(:init);

my $client_db;
subtest 'prepare' => sub {

    lives_ok {
        my $conn = BOM::Database::ClientDB->new({
            broker_code => 'CR',
        });

        my $first_client = BOM::Database::AutoGenerated::Rose::Client->new(
            loginid                  => 'CR656232',
            client_password          => 'angelina',
            email                    => 'bard1@pitt.com',
            binary_user_id           => BOM::Test::Data::Utility::UnitTestDatabase::get_next_binary_user_id(),
            broker_code              => 'CR',
            residence                => 'USA',
            citizen                  => 'USA',
            salutation               => 'MR',
            first_name               => 'bRaD',
            last_name                => 'pItT',
            address_line_1           => 'Civic Center',
            address_line_2           => '301',
            address_city             => 'Beverly Hills',
            address_state            => 'LA',
            address_postcode         => '232323',
            phone                    => '+15417543010',
            latest_environment       => 'FireFox',
            secret_question          => 'How many child did I adopted',
            secret_answer            => 'its not your bussined',
            restricted_ip_address    => '',
            date_joined              => Date::Utility->new('20010108')->date_yyyymmdd,
            gender                   => 'm',
            cashier_setting_password => '',
            date_of_birth            => '1980-01-01',
            non_pep_declaration_time => Date::Utility->new('20010108')->date_yyyymmdd,
        );

        $first_client->db($conn->db);
        $first_client->save();

        # we need third client to Coverage this method
        my $thi_client = BOM::Database::AutoGenerated::Rose::Client->new(
            loginid                  => 'CR656234',
            client_password          => 'angelina',
            email                    => 'bard3@pitt.com',
            binary_user_id           => BOM::Test::Data::Utility::UnitTestDatabase::get_next_binary_user_id(),
            broker_code              => 'CR',
            residence                => 'USA',
            citizen                  => 'USA',
            salutation               => 'Mrs',
            first_name               => 'angelina',
            last_name                => 'Jolie',
            address_line_1           => 'Civic Center',
            address_line_2           => '301',
            address_city             => 'Beverly Hills',
            address_state            => 'LA',
            address_postcode         => '232323',
            phone                    => '+15417543010',
            latest_environment       => 'FireFox',
            secret_question          => 'How many child did I adopted',
            secret_answer            => 'its not your bussined',
            restricted_ip_address    => '',
            date_joined              => Date::Utility->new()->date_yyyymmdd,
            gender                   => 'm',
            cashier_setting_password => '',
            date_of_birth            => '1980-01-01',
            non_pep_declaration_time => Date::Utility->new('20010108')->date_yyyymmdd,
        );
        $thi_client->db($conn->db);
        $thi_client->save();

    }
    ' Create two clients with same first name and last name';

    lives_ok {
        $client_db = BOM::Database::ClientDB->new({
            broker_code => 'CR',
        });
    }
    'Expect to initialize the client data mapper';

    my $client_CR = BOM::User::Client->new({loginid => 'CR656234'});
    my $account = $client_CR->set_default_account('USD');

};

subtest 'client lock unlock' => sub {
    lives_ok {
        $client_db = BOM::Database::ClientDB->new({
            client_loginid => 'CR656232',
        });
    }
    'Expect to initialize the client data mapper';

    ok($client_db->lock_client_loginid(), "Can lock client when there is no record in lock table initially.");

    ok(!$client_db->lock_client_loginid(),   "Can not lock client wheb it is already locked.");
    ok($client_db->unlock_client_loginid(),  "Can unlock client.");
    ok($client_db->lock_client_loginid(),    "Can lock client again after unlock.");
    ok($client_db->unlock_client_loginid(),  "Can unlock client.");
    ok(!$client_db->unlock_client_loginid(), "Can not lock client if it is not locked.");
};

subtest 'Login to self excluded client' => sub {
    my ($client);
    my $new_email = 'test' . rand . '@binary.com';
    lives_ok {
        $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
            broker_code => 'CR',
            email       => $new_email,
        });
        my $exclude_until = Date::Utility->new()->plus_time_interval('365d')->date;
        $client->set_exclusion->exclude_until($exclude_until);
        $client->save;
    }
    'create client';
};

subtest 'Login to self timeouted client' => sub {
    my ($client);
    my $new_email = 'test' . rand . '@binary.com';
    lives_ok {
        $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
            broker_code => 'CR',
            email       => $new_email,
        });
        my $timeout_until = Date::Utility->new()->plus_time_interval('1d');
        $client->set_exclusion->timeout_until($timeout_until->epoch);
        $client->save;
    }
    'create client';
};

done_testing;
