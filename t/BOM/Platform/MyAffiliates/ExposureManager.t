use Test::More $ENV{SKIP_MYAFFILIATES} ? (skip_all => 'SKIP_MYAFFILIATES set') : ('no_plan');
use Test::NoWarnings;
use Test::Exception;
use BOM::Test::Data::Utility::UnitTestDatabase qw(:init);
use DateTime;
use BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure;
use BOM::Platform::MyAffiliates::ExposureManager;
use BOM::Platform::Client;

my $dt_20040801_1000 = DateTime->new(
    year   => 2004,
    month  => 8,
    day    => 1,
    hour   => 10,
    minute => 0
);
my $dt_20040801_1020 = DateTime->new(
    year   => 2004,
    month  => 8,
    day    => 1,
    hour   => 10,
    minute => 20
);
my $dt_20040801_1040 = DateTime->new(
    year   => 2004,
    month  => 8,
    day    => 1,
    hour   => 10,
    minute => 40
);
my $dt_20090830_1000 = DateTime->new(
    year  => 2009,
    month => 8,
    day   => 30,
    hour  => 10
);
my $dt_20090901_1100 = DateTime->new(
    year  => 2009,
    month => 8,
    day   => 30,
    hour  => 11
);

subtest 'Client with no exposures.' => sub {
    plan tests => 8;

    my $client = BOM::Platform::Client->new({loginid => 'CR2002'});
    my $manager;

    lives_ok { $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client) } 'can create manager instance ok.';

    my %exposures_from_db = %{$manager->_exposures_from_db};

    is(scalar keys %exposures_from_db, 0, 'Initially, no exposures in DB.');

    is(
        $manager->add_exposure(
            BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
                client             => $client,
                myaffiliates_token => 'QQQQQQQQQQQQQQQQQQQQRSTUVW'
            )
        ),
        1,
        'Added exposure successfully.'
    );

    # NOTE: these two tests test the internal storage of exposures in the class.
    #       Some may argue that the unit test should leave these alone, so that
    #       maintainers can change internal workings without breaking the tests.
    #       I'd like right now to verify that these internal workings are correct,
    #       so decided to include these.
    is(scalar @{$manager->_exposures_added},        1, 'After add, one exposure scheduled for addition to DB...');
    is(scalar keys %{$manager->_exposures_from_db}, 0, '...but, newely added exposure will only reach DB when ->save is called.');

    is($manager->save, 1, 'can save to DB..!');

    is(scalar keys %{$manager->_exposures_from_db}, 1, 'Now there is one exposure in DB...');
    is(scalar @{$manager->_exposures_added},        0, '...and none scheduled for addition to DB.');
};

subtest 'Saving boolean values to DB.' => sub {
    plan tests => 4;

    my $client = BOM::Platform::Client->new({loginid => 'CR3003'});
    my $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    is(keys %{$manager->_exposures_from_db}, 0, 'No exposures in DB initially.');

    my $paying_for_and_registered_exposure = BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
        client                        => $client,
        myaffiliates_token            => 'jGZUKO3JWgyVAv0U_Fv2nVOqZLGcUW5p',
        pay_for_exposure              => 1,
        myaffiliates_token_registered => 1,
    );

    $manager->add_exposure($paying_for_and_registered_exposure);
    $manager->save;

    # grab a brand new instance to check that we saved and retrieved from DB correctly
    $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    is(keys %{$manager->_exposures_from_db}, 1, 'One exposure in DB after save.');

    my @exposures_from_db = values %{$manager->_exposures_from_db};

    my $exposure_from_db = $exposures_from_db[0];

    is($exposure_from_db->pay_for_exposure,              1, 'pay_for_exposure is true.');
    is($exposure_from_db->myaffiliates_token_registered, 1, 'myaffiliates_token_registered is true.');
};

subtest 'Retrieving creative_affiliate_id' => sub {
    plan tests => 4;

    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code => 'CR',
    });
    my $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2nS0plL73saAE',
            exposure_record_date => DateTime->now(),
        ));

    is($manager->creative_affiliate_id, 6,  'Token added has media provided by affiliate "6".');
    is($manager->creative_media_id,     48, 'Token added has media with id "48".');

    # The following tests that BOM::Platform::MyAffiliates::ExposureManager takes the
    # MOST RECENT exposure with creative info:

    $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code => 'CR',
    });
    $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    # token has creative id 6 and media id 2
    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2nS0plL73saAE',
            exposure_record_date => $dt_20040801_1000,
        ));

    # token has no creative id at all
    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2nagaAKfXWndM',
            exposure_record_date => $dt_20040801_1040,
        ));

    # token has creative id 3 and media id 1
    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2ncni_MQzyHn0',
            exposure_record_date => $dt_20040801_1020,
        ));

    is($manager->creative_affiliate_id, 3, 'Most recent exposure with creative id has creative id 3');
    is($manager->creative_media_id,     1, '...and media id 1');

};

subtest '"pay for" exposures...' => sub {
    plan tests => 7;

    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code => 'CR',
    });
    my $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    # token has creative id 3
    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2ncni_MQzyHn0',
            exposure_record_date => $dt_20040801_1000,
            pay_for_exposure     => 1,
        ));

    # token has creative id 6
    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2nVOqZLGcUW5p',
            exposure_record_date => $dt_20040801_1000,
        ));

    is($manager->creative_affiliate_id, 3, 'Less recent exposure with creative id 3 is affiliate_creative_id, as it is marked as "pay for".');

    ######

    my @exposures = $manager->_get_exposures;

    is(scalar @exposures, 2, 'Before adding 2nd "pay for" exposure attempt, we have two exposures on the manager.');

    my $another_pay_for_exposure_with_different_token = BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
        client               => $client,
        myaffiliates_token   => 'PQ4YXsO2q5nKto_EPcZApM8HIfpxphHr',
        pay_for_exposure     => 1,
        exposure_record_date => DateTime->now(),
    );

    is($manager->add_exposure($another_pay_for_exposure_with_different_token), 1, 'Can add a 2nd "pay for" exposure when token is different.');

    @exposures = $manager->_get_exposures;
    is(scalar @exposures, 3, 'After adding 2nd "pay for" exposure, we have three exposures on the manager.');

    my $another_pay_for_exposure_with_dupe_token = BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
        client               => $client,
        myaffiliates_token   => 'PQ4YXsO2q5nKto_EPcZApM8HIfpxphHr',
        pay_for_exposure     => 1,
        exposure_record_date => DateTime->now(),
    );

    throws_ok { $manager->add_exposure($another_pay_for_exposure_with_dupe_token) } qr/already has pay_for_exposure token/,
        'Cannot add "pay for" exposure that has token already added.';

    @exposures = $manager->_get_exposures;
    is(scalar @exposures, 3, 'After attempting to add dupe "pay for" exposure, we still have three exposures on the manager.');

    # Aside: check that all exposures returned
    # from _get_exposures are of the correct type.
    is(scalar(grep { $_->isa('BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure') } @exposures),
        scalar(@exposures), 'All exposures are of type BPDPR::ClientAffiliateExposure.');
};

subtest 'creative_affiliate_id assignment.' => sub {
    plan tests => 3;

    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code => 'CR',
    });
    my $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    my @exposures = $manager->_get_exposures;
    is(scalar @exposures, 0, 'Manager starts with no exposures.');

    is($manager->creative_affiliate_id, undef, 'No exposures => no creative affiliate id.');

    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2nS0plL73saAE',    # has creative id 6
            exposure_record_date => $dt_20040801_1000,
        ));

    is($manager->creative_affiliate_id, 6, 'One exposure with creative id => creative affiliate id = 6.');
};

my $loginid;
subtest 'Exposures added after 1st deposit.' => sub {
    plan tests => 1;

    my $client = BOM::Test::Data::Utility::UnitTestDatabase::create_client({
        broker_code => 'CR',
    });
    $loginid = $client->loginid;
    my $account = $client->set_default_account('USD');

    $client->payment_free_gift(
        currency     => 'USD',
        amount       => 20,
        remark       => 'here is money',
        payment_type => 'free_gift'
    );

    $client = BOM::Platform::Client->new({loginid => $client->loginid});
    my $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    # token has creative id 3
    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2ncni_MQzyHn0',
            exposure_record_date => $dt_20090830_1000,
        ));

    # token has creative id 6
    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgyVAv0U_Fv2nVOqZLGcUW5p',
            exposure_record_date => $dt_20090901_1100,
        ));

    is($manager->creative_affiliate_id, 3, 'Must take most recent creative affiliate id before 1st deposit.');
};

subtest 'Exposure token has several meta tags.' => sub {
    plan tests => 1;

    my $client = BOM::Platform::Client->new({loginid => $loginid});

    my $manager = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    # token has creative id 3, and also two other meta tags.
    $manager->add_exposure(
        BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
            client               => $client,
            myaffiliates_token   => 'jGZUKO3JWgzKto_EPcZApM3my6fcIJjz',
            exposure_record_date => $dt_20090830_1000,
        ));

    is($manager->creative_affiliate_id, 3, 'Manager can weed out creative affiliate id from potentially several meta tags.');
};

