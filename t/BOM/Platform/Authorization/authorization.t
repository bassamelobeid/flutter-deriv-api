use Test::Most 0.22;
require Test::NoWarnings;

use Date::Utility;
use BOM::Platform::Authorization;
use BOM::Platform::Authorization::Token;
use Data::Dumper;

# clear out any data from previous tests.. only user 'postgres' can do this.
BOM::Database::AuthDB::rose_db(username => 'postgres')->dbh->do("
    delete from auth.auth_codes; delete from auth.grants; delete from auth.users;
    delete from auth.clients where id>1; delete from auth.developers where id>1;
");

subtest "Create grant and issue token" => sub {
    my $token = BOM::Platform::Authorization->issue_token(
        client_id       => 1,
        login_id        => "CR1234",
        expiration_time => time + 3600,
        scopes          => [qw(chart price)],
    );
    ok $token, "got a token";
    ok length($token) > 26, "token is long enough";

    my $token2 = BOM::Platform::Authorization->issue_token(
        client_id       => 1,
        login_id        => "CR8888",
        expiration_time => time + 3600,
        scopes          => [qw(price)],
    );
    ok $token2, "got a token";
    isnt $token, $token2, "got different tokens";

    my $res = BOM::Platform::Authorization->validate_token(
        token     => $token,
        client_id => 1,
        scope     => 'chart',
    );
    ok $res->{validated}, "token is valid for charts";
    ok !$res->{reason}, "  ... reason is not set";
    is $res->{login_id}, "CR1234", "  ... got expected login id from token";
    eq_or_diff [sort @{$res->{scopes}}], [sort qw(chart price)], "  ... and correct list of scopes";

    $res = BOM::Platform::Authorization->validate_token(
        token     => $token2,
        client_id => 1,
        scope     => 'chart',
    );
    ok !$res->{validated}, "token2 is not valid for charts";
    like($res->{reason}, qr/scope/i, "  ... because of scope");

    ok(BOM::Platform::Authorization::Token->validate(token => $token2), "validation successful when no scope requested");

    $res = BOM::Platform::Authorization->validate_token(
        token     => $token,
        client_id => 1,
        scope     => 'trade',
    );
    ok !$res->{validated}, "token is not valid for trade";

    $res = BOM::Platform::Authorization->validate_token(
        token     => $token,
        client_id => 1,
        scope     => 'trade',
    );
    ok !$res->{validated}, "token is not valid for use with other client";

    $res = BOM::Platform::Authorization->validate_token(
        token     => $token2,
        client_id => 1,
        scope     => 'price',
    );
    ok $res->{validated}, "token2 is valid for price";
    eq_or_diff [@{$res->{scopes}}], ['price'], "  ... and response contains correct list of scopes";
    my $grant = BOM::Database::AutoGenerated::Rose::Auth::Grant->new(
        token => $token2,
        db    => BOM::Platform::Authorization->_write_db,
    );
    $grant->load;
    $grant->expires(Date::Utility->new(time - 1)->db_timestamp);
    $grant->save;
};

Test::NoWarnings::had_no_warnings();
done_testing;
