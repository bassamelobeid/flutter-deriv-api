#!/etc/rmg/bin/perl
use strict;
use warnings;

use FindBin qw/$Bin/;
use lib "$Bin/../lib";
# load this file to force Mojo::JSON to use JSON::MaybeXS
use Mojo::JSON::MaybeXS;
use Mojo::JSON 'encode_json';
use YAML::XS;
use Mojo::Redis2;
use Encode;
use Getopt::Long qw(GetOptions :config no_auto_abbrev no_ignore_case);

use Binary::WebSocketAPI::v3::Instance::Redis 'ws_redis_master';

STDOUT->autoflush(1);

my $send_notification = 1;
GetOptions(
    's|status=s'          => \my $status,
    'send-notifications!' => \$send_notification,
    'm|message=s'         => \my $message,
    'h|help'              => \my $help,
);

my $show_help = $help;
die <<"EOF" if (!($status || $message) || $show_help);
usage: $0 OPTIONS
These options are available:
  -s, --status                   Site status. up or down. up by default
      --no-send-notifications    Do not send notifications
  -m, --message                  Message ( in quotes )
  -h, --help                     Show this message.
EOF

if (!$status || $status ne 'up' && $status ne 'down') {
    $status = 'up';
}

my $channel_name = "NOTIFY::broadcast::channel";
my $state_key    = "NOTIFY::broadcast::state";
my $is_on_key    = "NOTIFY::broadcast::is_on";     ### TODO: to config

my $redis = ws_redis_master() or die 'no redis connection';
$redis->on(
    error => sub {
        my ($self, $err) = @_;
        warn "ws write redis error: $err";
    });

if ($status || $message) {
    print $redis->set($is_on_key, $send_notification), "\n";

    my $mess_obj = Encode::encode_utf8(
        encode_json({
                site_status => $status // "up",
                message     => $message // ""
            }));
    print $redis->set($state_key, $mess_obj), "\n";

    my $subscribes_count = $redis->publish($channel_name, $mess_obj);
    print $subscribes_count . " workers subscribed\n";
}
