#!/etc/rmg/bin/perl
use strict;
use warnings;

use FindBin qw/$Bin/;
use lib "$Bin/../lib";
# load this file to force Mojo::JSON to use JSON::MaybeXS
use Mojo::JSON::MaybeXS;
use Mojo::JSON 'encode_json';
use YAML::XS;
use Mojo::Redis2;
use Encode;
use Getopt::Long qw(GetOptions :config no_auto_abbrev no_ignore_case);

use Binary::WebSocketAPI::v3::Instance::Redis 'ws_redis_master';
use BOM::Platform::Context 'localize';

STDOUT->autoflush(1);

my $send_notification = 1;
GetOptions(
    'send-notifications!' => \$send_notification,
    'h|help'              => \my $help,
);
my ($status, $message) = @ARGV;

my $show_help = $help;
die <<"EOF" if (!($status || $message) || $show_help);
usage: $0 [--no-send-notifications] STATUS MESSAGE
These options are available:
      --no-send-notifications    Do not send notifications
  -h, --help                     Show this message.

STATUS is either "up" or "down".

MESSAGE to set can be a keyword from the following: "release_due",
"suspended", "unstable", "feed_issues", "mt5_issues", "cashier_issues".
This will use a preset localized message for the chosen keyword to use
for the site status message.  If the keyword is unrecognized, the
keyword will be used directly in the site status message.
EOF

if (!$status || $status ne 'up' && $status ne 'down') {
    $status = 'up';
}

my %status_codes = (
    release_due    => localize('Heads-up: We are releasing something...'),
    suspended      => localize('System is suspended until further notice.'),
    feed_issues    => localize('Something is wrong with the feed'),
    mt5_issues     => localize('Something is wrong with MT5'),
    cashier_issues => localize('Something is wrong with the cashier'),
    unstable       => localize('System is experiencing high load'),
);
$message = $status_codes{$message} || $message if $message;

my $channel_name = "NOTIFY::broadcast::channel";
my $state_key    = "NOTIFY::broadcast::state";
my $is_on_key    = "NOTIFY::broadcast::is_on";     ### TODO: to config

my $redis = ws_redis_master() or die 'no redis connection';
$redis->on(
    error => sub {
        my ($self, $err) = @_;
        warn "ws write redis error: $err";
    });

if ($status || $message) {
    print $redis->set($is_on_key, $send_notification), "\n";

    my $mess_obj = Encode::encode_utf8(
        encode_json({
                site_status => $status // "up",
                message     => $message // ""
            }));
    print $redis->set($state_key, $mess_obj), "\n";

    my $subscribes_count = $redis->publish($channel_name, $mess_obj);
    print $subscribes_count . " subscribers\n";
}
