#!/etc/rmg/bin/perl
package main;

use strict;
use warnings;

use Format::Util::Numbers qw(formatnumber);
use HTML::Entities;
use JSON::MaybeXS;
use LandingCompany::Registry;
use Locale::Country;
use Syntax::Keyword::Try;
use Text::CSV;

use f_brokerincludeall;

use BOM::Database::DataMapper::Payment;
use BOM::Database::DataMapper::Transaction;
use BOM::Database::DataMapper::FinancialMarketBet;
use BOM::Database::AutoGenerated::Rose::PromoCode::Manager;
use BOM::Backoffice::PlackHelpers qw( PrintContentType );
use BOM::Backoffice::PromoCodeEligibility;
use BOM::Backoffice::Request qw(request);
use BOM::Backoffice::Sysinit ();
use BOM::Platform::Event::Emitter;

BOM::Backoffice::Sysinit::init();

PrintContentType();

BrokerPresentation('MARKETING TOOLS');

my %input  = %{request()->params};
my $broker = request()->broker_code;

my $where = BOM::Config::Runtime->instance->app_config->system->directory->db . '/affiliates/' . $broker;
if (not -d $where) {
    system("mkdir -p $where");
}

# Promotional codes
Bar('Promotional codes');

my $dbclass = 'BOM::Database::AutoGenerated::Rose::PromoCode';

my $db  = $dbclass->new(broker => $broker)->db;
my $pcs = "${dbclass}::Manager"->get_promo_code(
    db      => $db,
    sort_by => 'code'
);

if (@$pcs) {

    my %expiry_select = (
        'All expiry date'  => '',
        'Expired only'     => '1',
        'Non expired only' => '2',
    );

    ## Pulldown for expired status
    print '<p>Show <select id=expiry_select>';
    $input{expiry_select} //= '2';
    foreach my $label (sort keys %expiry_select) {
        printf q{<option value='%s' %s>%s</option>},
            $expiry_select{$label},
            $expiry_select{$label} eq $input{expiry_select} ? 'selected' : '',
            $label;
    }
    print '</select> for:</p>';

    ## Allow choosing by type of currency
    my %pcs_by_currency;
    for my $pc (@$pcs) {
        $pc->{_json} ||= eval { JSON::MaybeXS->new->decode($pc->promo_code_config) } || {};
        my $currency = $pc->{_json}->{currency}                                      || next;
        $pcs_by_currency{$currency}++;
    }
    print '<ul>';
    for my $currency_label (sort keys %pcs_by_currency) {
        printf qq{<li><a class="link" href="%s" onclick="%s">%s currency</a></li>\n},
            request()->url_for(
            'backoffice/f_promotional.cgi',
            {
                broker        => $broker,
                currency_only => $currency_label
            }
            ),
            "window.location=this.href + '&expiry_select=' + document.getElementById('expiry_select').value; return(false);",
            $currency_label;
    }
    printf qq{<li><a class="link" href="%s" onclick="%s">ALL promocodes</a></li>\n},
        request()->url_for(
        'backoffice/f_promotional.cgi',
        {
            broker        => $broker,
            currency_only => ''
        }
        ),
        "window.location=this.href + '&expiry_select=' + document.getElementById('expiry_select').value; return(false);";
    print '</ul>';

    print 'The Free Gift promotional codes are:';

    print qq{
<div class="scrollable">
<table class="sortable hover border alternate">
    <thead>
        <tr>
            <th>Code</th>
            <th>Currency</th>
            <th>Amount</th>
            <th>Min. deposit</th>
            <th>Min. turnover</th>
            <th>Turnover type</th>
            <th>Min. payout</th>
            <th>Max. maxout</th>
            <th>Payment method</th>
            <th>Start date<br></th>
            <th>Expiry date<br>(red=expired)</th>
            <th>Type</th>
            <th>Country</th>
            <th>Description</th>
            <th>Status</th>
            <th>Edit</th>
        </tr>
    </thead>
};
    for my $pc (@$pcs) {

        ## Skip there is no currency, or we are not viewing this specific one
        my $pc_currency = $pc->{_json}{currency} || next;
        next if $input{currency_only} && $input{currency_only} ne $pc_currency;

        ## Limit by expiration, based on expiry_date: 0=all 1=expired 2=non-expired
        my $expiry_date = '';
        $input{expiry_select} ||= 0;
        if ($pc->expiry_date && $pc->expiry_date->epoch < time()) {
            next if 2 == $input{expiry_select};
            $expiry_date = sprintf '<span class="%s">%s</span>', 'text-red', $pc->expiry_date->ymd;
        } elsif ($pc->expiry_date) {
            next if 1 == $input{expiry_select};
            $expiry_date = $pc->expiry_date->ymd;
        }

        my %show;
        my $SPACE = ' &nbsp;';

        # display defaults for older promocodes created without these fields
        if ($pc->promo_code_type =~ /^(GET_X_WHEN_DEPOSIT_Y|GET_X_OF_DEPOSITS)$/) {
            $show{min_turnover}  = $pc->{_json}{min_turnover}  // 5;
            $show{turnover_type} = $pc->{_json}{turnover_type} // 'bonus';
        }

        $show{amount} = sprintf '%s%s', $pc->{_json}{amount}, $pc->promo_code_type eq 'GET_X_OF_DEPOSITS' ? '%' : '';
        for my $x (qw/min_deposit min_turnover min_amount max_amount payment_processor turnover_type/) {
            $show{$x} = $pc->{_json}{$x} // $SPACE;
        }
        $show{start_date}  = $pc->start_date ? $pc->start_date->ymd : $SPACE;
        $show{description} = encode_entities($pc->description // $SPACE);
        $show{status}      = $pc->status ? 'TRUE' : 'FALSE';
        my @countries =
            map { /ALL/ ? 'ALL' : request()->brand->countries_instance->countries->country_from_code($_) }
            split(/,/, $pc->{_json}->{country});
        $show{countries} = join ', ' => @countries;

        my $href = request()->url_for(
            'backoffice/promocode_edit.cgi',
            {
                broker    => $broker,
                promocode => $pc->code,
            });
        $show{link} = qq[<a class="link" target="_blank" href="$href">Edit</a>];

        print qq{
<tr>
 <td class="code">${\($pc->code)}</td>
 <td>$pc_currency</td>
 <td class="money">$show{amount}</td>
 <td>$show{min_deposit}</td>
 <td>$show{min_turnover}</td>
 <td>$show{turnover_type}</td>
 <td class="nowrap">$show{min_amount}</td>
 <td class="nowrap">$show{max_amount}</td>
 <td class="nowrap">$show{payment_processor}</td>
 <td class="nowrap">$show{start_date}</td>
 <td>$expiry_date</td>
 <td>${\($pc->promo_code_type)}</td>
 <td>$show{countries}</td>
 <td>$show{description}</td>
 <td>$show{status}</td>
 <td>$show{link}</td>
</tr>
};
    }

    print '</table></div>';
}

print '<br><i>NOTE: to track signups, see the log files in the Perl log files section.</i>';

# Adding new promocode
print '<hr>';

printf '
<form method=get action="%s">
<input name=broker value="%s" type=hidden></input>
<input type="hidden" name="isnew" value="1" />
<input type=submit class="btn btn--primary" value="Add new promocode">
</form>
', request()->url_for('backoffice/promocode_edit.cgi'), $broker;

# Bulk upload promocodes
Bar('BULK PROMO CODE APPLY');

if (my $bulk_upload = $input{bulk_promo_upload}) {

    my $cgi = CGI->new;

    try {
        die "$bulk_upload: only csv or txt files allowed\n" unless $bulk_upload =~ /(txt|csv)$/i;

        my $csv = Text::CSV->new({binary => 1});
        my $fh  = $cgi->upload('bulk_promo_upload');
        my @errors;
        my $success = 0;
        my $lines   = $csv->getline_all($fh);
        my $email   = $input{bulk_promo_notify_email} or die "Please provide an email to notify about promo code import.\n";
        BOM::Platform::Event::Emitter::emit(
            'client_promo_codes_upload',
            {
                email => $email,
                file  => $bulk_upload,
                data  => $lines
            }) or die "Failed to emit assign_promo_codes event - please check with Backend team.\n";
        print '<p class="success">' . " $bulk_upload is being processed. An email will be sent to $email when the job completes.</p>";
    } catch ($e) {
        print '<p class="error">ERROR: ' . $e . '</p>';
    }
}

my $clerk = BOM::Backoffice::Auth0::get_staffname() // '';

print
    '<l><li>Applies bonus codes to clients if the code is valid and the client does not have a promo code.</li><li>CSV format, comma separated</li><li>No header</li><li>2 columns: client id, bonus code</li></l>'
    . '<br><form method="post" enctype="multipart/form-data">'
    . '<div class="row"><label>File:</label><input type="file" required name="bulk_promo_upload"></div>'
    . '<div class="row"><label>Notify when done:</label><input type="email" required name="bulk_promo_notify_email" value="'
    . $clerk
    . '@binary.com"></div>'
    . '<input type=submit class="btn btn--primary" value="Upload">'
    . '</form>';

# PROMO CODE APPROVAL TOOL
Bar('PROMO CODE APPROVAL TOOL');

my ($output, $table_elements, $input_elements);

my $table_header = sprintf '<br /><form method="post" action="%s">
<table id="PROMO_CODE_APPROVAL" class="border sortable">
<thead>
<tr>
<th>Approve</th>
<th>Reject</th>
<th>Date/Time</th>
<th>Promocode</th>
<th>Code type</th>
<th>Bonus</th>
<th>LoginID</th>
<th>Name</th>
<th>Residence</th>
<th>Referer</th>
<th>IP address</th>
<th>Turnover</th>
<th>Account age</th>
<th>Authenticated?</th>
<th>Account status</th>
<th>Notify client?</th>
<th>Further details</th>
</tr>
</thead>', request()->url_for('backoffice/f_promotional_processing.cgi');

my @clients = BOM::User::Client->by_promo_code(
    broker_code => $broker,
    status      => 'APPROVAL'
);

foreach my $client (@clients) {
    my $client_login = $client->loginid;
    next unless ($client->promo_code_status || '') eq 'APPROVAL';
    # bail out before if client currency is crypto
    next
        if ((LandingCompany::Registry::get_currency_type($client->currency) // '') eq 'crypto');
    my $dodgy =
           $client->status->disabled
        || $client->status->cashier_locked
        || $client->status->unwelcome;
    my $class                = $dodgy ? 'error'               : '';
    my $disabled             = $dodgy ? 'disabled="disabled"' : '';
    my $client_name          = $client->salutation . ' ' . $client->first_name . ' ' . $client->last_name;
    my $client_residence     = Locale::Country::code2country($client->residence);
    my $client_authenticated = ($client->fully_authenticated) ? 'yes' : 'no';
    my $datetime             = $client->promo_code_apply_date;

    my $user          = $client->user;
    my $login_history = $user->login_history(
        order                    => 'desc',
        show_impersonate_records => 1,
        limit                    => 1,
    );
    my $client_ip = 'no ip';
    if (@$login_history > 0) {
        if ($login_history->[0]->{environment} =~ /(\d+\.\d+\.\d+\.\d+)/) {
            $client_ip = $1;
        }
    }

    my $account_age;
    my $now         = Date::Utility->new;
    my $date_joined = $client->date_joined;

    if ($date_joined) {
        my $joined = Date::Utility->new($date_joined);
        $date_joined = $joined->date_ddmmmyy;
        $account_age = $now->days_between($joined);

        if ($account_age eq 0) {
            $account_age = 'account opened today';
        } elsif ($account_age > 1) {
            $account_age = $account_age . ' days';
        } else {
            $account_age = $account_age . ' day';
        }
    }

    my $cpc = $client->client_promo_code || die "$client must have a client-promo-code by now";
    my $pc  = $cpc->promotion;
    $pc->{_json} ||= eval { JSON::MaybeXS->new->decode($pc->promo_code_config) } || {};

    my $currency = $pc->{_json}->{currency};
    if ($currency eq 'ALL') {
        $currency = $client->currency;
    }
    # check if currency passed is not crypto, client currency is checked before as well
    # but better to have check for promo code currency as well
    next if ((LandingCompany::Registry::get_currency_type($currency) // '') eq 'crypto');

    my $amount = $pc->{_json}->{amount};
    # Amount for GET_X_OF_DEPOSITS is dependant on eligible deposits made
    if ($pc->promo_code_type eq 'GET_X_OF_DEPOSITS') {
        my ($bonus) = BOM::Backoffice::PromoCodeEligibility::get_dynamic_bonus(
            db           => $client->db->dbic,
            account_id   => $client->account->id,
            code         => $pc->code,
            promo_config => $pc->{_json},
        );
        $amount = formatnumber('amount', $pc->{_json}{currency}, $bonus);
        next if $amount <= 0;
    }

    my $total_turnover;
    my $txn_mapper = BOM::Database::DataMapper::Transaction->new({
        client_loginid => $client_login,
        currency_code  => $client->currency,
    });
    my $account_turnover = $txn_mapper->get_turnover_of_account;

    if ($account_turnover > 0) {
        $total_turnover .= $currency . sprintf("%.2f", $account_turnover) . ' ';
    }

    $total_turnover ||= '&nbsp;';

    my $bonuscheck_link = '<a class="link" href="'
        . request()->url_for(
        'backoffice/f_client_bonus_check.cgi',
        {
            broker  => $broker,
            loginID => $client_login
        }) . '" target=_blank>bonus check</a>';
    my $clientdetail_link = '<a class="link" href="'
        . request()->url_for(
        'backoffice/f_clientloginid_edit.cgi',
        {
            broker  => $broker,
            loginID => $client_login
        }) . '" target=_blank>client details</a>';
    my $statement_link = '<a class="link" href="'
        . request()->url_for(
        'backoffice/f_manager_history.cgi',
        {
            broker   => $broker,
            loginID  => $client_login,
            currency => 'All',
        }) . '" target=_blank>statement</a>';

    my $check_account =
          $client->status->disabled          ? 'account disabled'
        : $client->status->cashier_locked    ? 'cashier locked'
        : $client->status->unwelcome         ? 'unwelcome login'
        : not $client->has_valid_documents() ? 'no documents/documents expired'
        :                                      '';

    $table_elements .= qq[
        <tr>
            <td><center><input name="${client_login}_promo" value="A" type="radio" $disabled ></center></td>
            <td><center><input name="${client_login}_promo" value="R" type="radio"           ></center>
            <input type="hidden" name="${client_login}_amount" value="$amount"></td>
            <td class="$class">$datetime</td>
            <td class="$class">${\($pc->code)}</td>
            <td class="$class">${\($pc->promo_code_type)}</td>
            <td class="$class">${\($pc->{_json}{currency})} $amount</td>
            <td class="$class">$client_login</td>
            <td class="$class">$client_name</td>
            <td class="$class">$client_residence</td>
            <td class="$class">&nbsp;</td>
            <td class="$class">$client_ip</td>
            <td class="$class">$total_turnover</td>
            <td class="$class">$account_age</td>
            <td class="$class">$client_authenticated</td>
            <td class="$class">$check_account</td>
            <td><center><input name="${client_login}_notify" type="checkbox" checked="checked"></center></td>
            <td>$bonuscheck_link, $clientdetail_link, $statement_link</td>
        </tr>
    ]
}

my $table_end =
      '</table>'
    . '<br /><input type="submit" class="btn btn--primary" value="Save">'
    . '<input type=hidden name="save_file" value="save">'
    . '<input type=hidden name="broker" value="'
    . $broker . '">'
    . '</form>';

if ($table_elements) {
    $output .= $table_header . $table_elements . $table_end;
} else {
    $output .= '<p>There are no clients in the pending promotional code approval list.</p>';
}

print $output;

Bar('Fetch Myaffiliate Payment');
BOM::Backoffice::Request::template()->process(
    'backoffice/fetch_myaffiliate_payment.tt',
    {
        action => request()->url_for('backoffice/fetch_myaffiliate_payment.cgi'),
    },
);

Bar('Payment Agent List');
my $pa_list_url = request()->url_for('backoffice/f_payment_agent_list.cgi', {broker => $broker});
print qq[<p><a class="btn btn--primary" href="$pa_list_url">Display list of payment agents</a></p>];

code_exit_BO();
