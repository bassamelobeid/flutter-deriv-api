#!/usr/bin/perl
package main;
use strict 'vars';

use f_brokerincludeall;
use Exception::Class;
use BOM::Platform::MyAffiliates::ExposureManager;
use BOM::Platform::Plack qw( PrintContentType );
use BOM::Platform::Sysinit ();
BOM::Platform::Sysinit::init();

PrintContentType();
BrokerPresentation('Bulk-add Exposures.');

BOM::Backoffice::Auth0::can_access(['Marketing']);

# Promotional codes
Bar('Promotional codes');

my @loginids        = split /\s+/, request()->param('loginids');
my $token           = request()->param('token');
my $signup_override = request()->param('signup_override') ? 1 : 0;
my $pay_for         = $signup_override || (request()->param('pay_for') ? 1 : 0);

my @report;

LOGINID:
foreach my $loginid (@loginids) {
    my $client = BOM::Platform::Client::get_instance({loginid => $loginid});

    if (not $client) {
        push @report, "Client $loginid doesn't exist.";
        next LOGINID;
    }

    my $expmgr = BOM::Platform::MyAffiliates::ExposureManager->new(client => $client);

    my $exposure = BOM::Database::AutoGenerated::Rose::ClientAffiliateExposure->new(
        client             => $client,
        myaffiliates_token => $token,
        pay_for_exposure   => $pay_for,
        signup_override    => $signup_override,
    );

    eval {
        $client->myaffiliates_token($token);
        $expmgr->add_exposure($exposure);
        $client->save;
        $expmgr->save;
    };

    if (my $e = Exception::Class->caught) {
        push @report, $e->message;
    } else {
        push @report, $client->loginid . ' has been given token ' . $token;
    }
}

map { print $_ . '<br>' } @report;
code_exit_BO();
